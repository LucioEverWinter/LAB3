
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d84  08002d84  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002d84  08002d84  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d84  08002d84  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d88  08002d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000058  08002de4  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002de4  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000882e  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d2  00000000  00000000  000288af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002a288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002ac88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a68  00000000  00000000  0002b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b114  00000000  00000000  00042008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820f1  00000000  00000000  0004d11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf20d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  000cf260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d4c 	.word	0x08002d4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002d4c 	.word	0x08002d4c

0800014c <isButton1Pressed>:
int TimeOutForNoKeyPress = 1000;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000074 	.word	0x20000074

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000078 	.word	0x20000078

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000007c 	.word	0x2000007c

080001b8 <subKeyProcess>:

void subKeyProcess(int i){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d103      	bne.n	80001ce <subKeyProcess+0x16>
		button1_flag = 1;
 80001c6:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <subKeyProcess+0x3c>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
	else if(i == 1)
		button2_flag = 1;
	else if(i == 2)
		button3_flag = 1;
}
 80001cc:	e00c      	b.n	80001e8 <subKeyProcess+0x30>
	else if(i == 1)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d103      	bne.n	80001dc <subKeyProcess+0x24>
		button2_flag = 1;
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <subKeyProcess+0x40>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	e005      	b.n	80001e8 <subKeyProcess+0x30>
	else if(i == 2)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b02      	cmp	r3, #2
 80001e0:	d102      	bne.n	80001e8 <subKeyProcess+0x30>
		button3_flag = 1;
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <subKeyProcess+0x44>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	601a      	str	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	20000074 	.word	0x20000074
 80001f8:	20000078 	.word	0x20000078
 80001fc:	2000007c 	.word	0x2000007c

08000200 <getKeyInput>:

void getKeyInput(){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++){
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e08f      	b.n	800032c <getKeyInput+0x12c>
		KeyReg2[i] = KeyReg1[i];
 800020c:	4a4c      	ldr	r2, [pc, #304]	; (8000340 <getKeyInput+0x140>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	494b      	ldr	r1, [pc, #300]	; (8000344 <getKeyInput+0x144>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800021c:	4a4a      	ldr	r2, [pc, #296]	; (8000348 <getKeyInput+0x148>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4946      	ldr	r1, [pc, #280]	; (8000340 <getKeyInput+0x140>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ( i == 0) {
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d10a      	bne.n	8000248 <getKeyInput+0x48>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin);
 8000232:	2102      	movs	r1, #2
 8000234:	4845      	ldr	r0, [pc, #276]	; (800034c <getKeyInput+0x14c>)
 8000236:	f001 fd49 	bl	8001ccc <HAL_GPIO_ReadPin>
 800023a:	4603      	mov	r3, r0
 800023c:	4619      	mov	r1, r3
 800023e:	4a42      	ldr	r2, [pc, #264]	; (8000348 <getKeyInput+0x148>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000246:	e01a      	b.n	800027e <getKeyInput+0x7e>
		}
		else if ( i == 1) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d10a      	bne.n	8000264 <getKeyInput+0x64>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUT2_GPIO_Port, BUT2_Pin);
 800024e:	2104      	movs	r1, #4
 8000250:	483e      	ldr	r0, [pc, #248]	; (800034c <getKeyInput+0x14c>)
 8000252:	f001 fd3b 	bl	8001ccc <HAL_GPIO_ReadPin>
 8000256:	4603      	mov	r3, r0
 8000258:	4619      	mov	r1, r3
 800025a:	4a3b      	ldr	r2, [pc, #236]	; (8000348 <getKeyInput+0x148>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000262:	e00c      	b.n	800027e <getKeyInput+0x7e>
		}
		else if ( i == 2) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b02      	cmp	r3, #2
 8000268:	d109      	bne.n	800027e <getKeyInput+0x7e>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUT3_GPIO_Port, BUT3_Pin);
 800026a:	2108      	movs	r1, #8
 800026c:	4837      	ldr	r0, [pc, #220]	; (800034c <getKeyInput+0x14c>)
 800026e:	f001 fd2d 	bl	8001ccc <HAL_GPIO_ReadPin>
 8000272:	4603      	mov	r3, r0
 8000274:	4619      	mov	r1, r3
 8000276:	4a34      	ldr	r2, [pc, #208]	; (8000348 <getKeyInput+0x148>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800027e:	4a30      	ldr	r2, [pc, #192]	; (8000340 <getKeyInput+0x140>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000286:	4930      	ldr	r1, [pc, #192]	; (8000348 <getKeyInput+0x148>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028e:	429a      	cmp	r2, r3
 8000290:	d149      	bne.n	8000326 <getKeyInput+0x126>
 8000292:	4a2b      	ldr	r2, [pc, #172]	; (8000340 <getKeyInput+0x140>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029a:	492a      	ldr	r1, [pc, #168]	; (8000344 <getKeyInput+0x144>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d13f      	bne.n	8000326 <getKeyInput+0x126>
			if (KeyReg2[i] != KeyReg3[i]){
 80002a6:	4a27      	ldr	r2, [pc, #156]	; (8000344 <getKeyInput+0x144>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ae:	4928      	ldr	r1, [pc, #160]	; (8000350 <getKeyInput+0x150>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d017      	beq.n	80002ea <getKeyInput+0xea>
			  KeyReg3[i] = KeyReg2[i];
 80002ba:	4a22      	ldr	r2, [pc, #136]	; (8000344 <getKeyInput+0x144>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c2:	4923      	ldr	r1, [pc, #140]	; (8000350 <getKeyInput+0x150>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			  if (KeyReg2[i] == PRESSED_STATE){
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <getKeyInput+0x144>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d127      	bne.n	8000326 <getKeyInput+0x126>

				subKeyProcess(i);
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f7ff ff6e 	bl	80001b8 <subKeyProcess>

				TimeOutForKeyPress[i] = 300; // note: not need for step 1
 80002dc:	4a1d      	ldr	r2, [pc, #116]	; (8000354 <getKeyInput+0x154>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002e8:	e01d      	b.n	8000326 <getKeyInput+0x126>
				//One pressed
			  }
			}else{
			   TimeOutForKeyPress[i] --;
 80002ea:	4a1a      	ldr	r2, [pc, #104]	; (8000354 <getKeyInput+0x154>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f2:	1e5a      	subs	r2, r3, #1
 80002f4:	4917      	ldr	r1, [pc, #92]	; (8000354 <getKeyInput+0x154>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 80002fc:	4a15      	ldr	r2, [pc, #84]	; (8000354 <getKeyInput+0x154>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d10e      	bne.n	8000326 <getKeyInput+0x126>
				  if (KeyReg2[i] == PRESSED_STATE){
 8000308:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <getKeyInput+0x144>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <getKeyInput+0x11a>
					  subKeyProcess(i);
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f7ff ff4f 	bl	80001b8 <subKeyProcess>
				  }
				  //Long pressed

				  TimeOutForKeyPress[i] = 300;
 800031a:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <getKeyInput+0x154>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3301      	adds	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b02      	cmp	r3, #2
 8000330:	f77f af6c 	ble.w	800020c <getKeyInput+0xc>
				}
		    }
		}
	}
}
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000000c 	.word	0x2000000c
 8000344:	20000018 	.word	0x20000018
 8000348:	20000000 	.word	0x20000000
 800034c:	40010800 	.word	0x40010800
 8000350:	20000024 	.word	0x20000024
 8000354:	20000030 	.word	0x20000030

08000358 <fsm_run>:
int num4 = 0;
int tempRED = 0;
int tempYELLOW = 0;
int tempGREEN = 0;

void fsm_run() {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	switch (state) {
 800035c:	4b9e      	ldr	r3, [pc, #632]	; (80005d8 <fsm_run+0x280>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b28      	cmp	r3, #40	; 0x28
 8000362:	f200 838d 	bhi.w	8000a80 <fsm_run+0x728>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <fsm_run+0x14>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	08000411 	.word	0x08000411
 8000370:	08000489 	.word	0x08000489
 8000374:	0800078b 	.word	0x0800078b
 8000378:	080008a9 	.word	0x080008a9
 800037c:	08000997 	.word	0x08000997
 8000380:	08000a81 	.word	0x08000a81
 8000384:	08000a81 	.word	0x08000a81
 8000388:	08000a81 	.word	0x08000a81
 800038c:	08000a81 	.word	0x08000a81
 8000390:	08000a81 	.word	0x08000a81
 8000394:	08000a81 	.word	0x08000a81
 8000398:	08000a81 	.word	0x08000a81
 800039c:	08000a81 	.word	0x08000a81
 80003a0:	08000a81 	.word	0x08000a81
 80003a4:	08000a81 	.word	0x08000a81
 80003a8:	08000a81 	.word	0x08000a81
 80003ac:	08000a81 	.word	0x08000a81
 80003b0:	08000a81 	.word	0x08000a81
 80003b4:	08000a81 	.word	0x08000a81
 80003b8:	08000a81 	.word	0x08000a81
 80003bc:	08000843 	.word	0x08000843
 80003c0:	08000a81 	.word	0x08000a81
 80003c4:	08000a81 	.word	0x08000a81
 80003c8:	08000a81 	.word	0x08000a81
 80003cc:	08000a81 	.word	0x08000a81
 80003d0:	08000a81 	.word	0x08000a81
 80003d4:	08000a81 	.word	0x08000a81
 80003d8:	08000a81 	.word	0x08000a81
 80003dc:	08000a81 	.word	0x08000a81
 80003e0:	08000a81 	.word	0x08000a81
 80003e4:	08000963 	.word	0x08000963
 80003e8:	08000a81 	.word	0x08000a81
 80003ec:	08000a81 	.word	0x08000a81
 80003f0:	08000a81 	.word	0x08000a81
 80003f4:	08000a81 	.word	0x08000a81
 80003f8:	08000a81 	.word	0x08000a81
 80003fc:	08000a81 	.word	0x08000a81
 8000400:	08000a81 	.word	0x08000a81
 8000404:	08000a81 	.word	0x08000a81
 8000408:	08000a81 	.word	0x08000a81
 800040c:	08000a4f 	.word	0x08000a4f
	case RESET:
		setTimer1(30);
 8000410:	201e      	movs	r0, #30
 8000412:	f001 f855 	bl	80014c0 <setTimer1>
		setTimer2(40);
 8000416:	2028      	movs	r0, #40	; 0x28
 8000418:	f001 f86c 	bl	80014f4 <setTimer2>

		tempRED = timeRED;
 800041c:	4b6f      	ldr	r3, [pc, #444]	; (80005dc <fsm_run+0x284>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a6f      	ldr	r2, [pc, #444]	; (80005e0 <fsm_run+0x288>)
 8000422:	6013      	str	r3, [r2, #0]
		tempGREEN = timeGREEN;
 8000424:	4b6f      	ldr	r3, [pc, #444]	; (80005e4 <fsm_run+0x28c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a6f      	ldr	r2, [pc, #444]	; (80005e8 <fsm_run+0x290>)
 800042a:	6013      	str	r3, [r2, #0]
		tempYELLOW = timeYELLOW;
 800042c:	4b6f      	ldr	r3, [pc, #444]	; (80005ec <fsm_run+0x294>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a6f      	ldr	r2, [pc, #444]	; (80005f0 <fsm_run+0x298>)
 8000432:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000434:	2201      	movs	r2, #1
 8000436:	2110      	movs	r1, #16
 8000438:	486e      	ldr	r0, [pc, #440]	; (80005f4 <fsm_run+0x29c>)
 800043a:	f001 fc5e 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800043e:	2201      	movs	r2, #1
 8000440:	2140      	movs	r1, #64	; 0x40
 8000442:	486c      	ldr	r0, [pc, #432]	; (80005f4 <fsm_run+0x29c>)
 8000444:	f001 fc59 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2120      	movs	r1, #32
 800044c:	4869      	ldr	r0, [pc, #420]	; (80005f4 <fsm_run+0x29c>)
 800044e:	f001 fc54 	bl	8001cfa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	4867      	ldr	r0, [pc, #412]	; (80005f4 <fsm_run+0x29c>)
 8000458:	f001 fc4f 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000462:	4864      	ldr	r0, [pc, #400]	; (80005f4 <fsm_run+0x29c>)
 8000464:	f001 fc49 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046e:	4861      	ldr	r0, [pc, #388]	; (80005f4 <fsm_run+0x29c>)
 8000470:	f001 fc43 	bl	8001cfa <HAL_GPIO_WritePin>

		light1_counter = 0;
 8000474:	4b60      	ldr	r3, [pc, #384]	; (80005f8 <fsm_run+0x2a0>)
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
		light2_counter = 0;
 800047a:	4b60      	ldr	r3, [pc, #384]	; (80005fc <fsm_run+0x2a4>)
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]

		state = MODE_1;
 8000480:	4b55      	ldr	r3, [pc, #340]	; (80005d8 <fsm_run+0x280>)
 8000482:	2201      	movs	r2, #1
 8000484:	601a      	str	r2, [r3, #0]
		break;
 8000486:	e30a      	b.n	8000a9e <fsm_run+0x746>
	case MODE_1:
		total_time = timeRED + timeGREEN + timeYELLOW;
 8000488:	4b54      	ldr	r3, [pc, #336]	; (80005dc <fsm_run+0x284>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b55      	ldr	r3, [pc, #340]	; (80005e4 <fsm_run+0x28c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	441a      	add	r2, r3
 8000492:	4b56      	ldr	r3, [pc, #344]	; (80005ec <fsm_run+0x294>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4413      	add	r3, r2
 8000498:	4a59      	ldr	r2, [pc, #356]	; (8000600 <fsm_run+0x2a8>)
 800049a:	6013      	str	r3, [r2, #0]
		if (light1_counter == 0) light1_counter = total_time;
 800049c:	4b56      	ldr	r3, [pc, #344]	; (80005f8 <fsm_run+0x2a0>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d103      	bne.n	80004ac <fsm_run+0x154>
 80004a4:	4b56      	ldr	r3, [pc, #344]	; (8000600 <fsm_run+0x2a8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a53      	ldr	r2, [pc, #332]	; (80005f8 <fsm_run+0x2a0>)
 80004aa:	6013      	str	r3, [r2, #0]
		if (light2_counter == 0) light2_counter = total_time;
 80004ac:	4b53      	ldr	r3, [pc, #332]	; (80005fc <fsm_run+0x2a4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d103      	bne.n	80004bc <fsm_run+0x164>
 80004b4:	4b52      	ldr	r3, [pc, #328]	; (8000600 <fsm_run+0x2a8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a50      	ldr	r2, [pc, #320]	; (80005fc <fsm_run+0x2a4>)
 80004ba:	6013      	str	r3, [r2, #0]

		if (timeRED < light1_counter && light1_counter <= total_time) {
 80004bc:	4b47      	ldr	r3, [pc, #284]	; (80005dc <fsm_run+0x284>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b4d      	ldr	r3, [pc, #308]	; (80005f8 <fsm_run+0x2a0>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	da1c      	bge.n	8000502 <fsm_run+0x1aa>
 80004c8:	4b4b      	ldr	r3, [pc, #300]	; (80005f8 <fsm_run+0x2a0>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b4c      	ldr	r3, [pc, #304]	; (8000600 <fsm_run+0x2a8>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	dc16      	bgt.n	8000502 <fsm_run+0x1aa>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2110      	movs	r1, #16
 80004d8:	4846      	ldr	r0, [pc, #280]	; (80005f4 <fsm_run+0x29c>)
 80004da:	f001 fc0e 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2140      	movs	r1, #64	; 0x40
 80004e2:	4844      	ldr	r0, [pc, #272]	; (80005f4 <fsm_run+0x29c>)
 80004e4:	f001 fc09 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2120      	movs	r1, #32
 80004ec:	4841      	ldr	r0, [pc, #260]	; (80005f4 <fsm_run+0x29c>)
 80004ee:	f001 fc04 	bl	8001cfa <HAL_GPIO_WritePin>
			num1 = light1_counter - timeRED;
 80004f2:	4b41      	ldr	r3, [pc, #260]	; (80005f8 <fsm_run+0x2a0>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4b39      	ldr	r3, [pc, #228]	; (80005dc <fsm_run+0x284>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	4a41      	ldr	r2, [pc, #260]	; (8000604 <fsm_run+0x2ac>)
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	e03f      	b.n	8000582 <fsm_run+0x22a>
		}
		else if (timeYELLOW < light1_counter && light1_counter <= timeRED) {
 8000502:	4b3a      	ldr	r3, [pc, #232]	; (80005ec <fsm_run+0x294>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	4b3c      	ldr	r3, [pc, #240]	; (80005f8 <fsm_run+0x2a0>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	429a      	cmp	r2, r3
 800050c:	da1c      	bge.n	8000548 <fsm_run+0x1f0>
 800050e:	4b3a      	ldr	r3, [pc, #232]	; (80005f8 <fsm_run+0x2a0>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	4b32      	ldr	r3, [pc, #200]	; (80005dc <fsm_run+0x284>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	429a      	cmp	r2, r3
 8000518:	dc16      	bgt.n	8000548 <fsm_run+0x1f0>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	4835      	ldr	r0, [pc, #212]	; (80005f4 <fsm_run+0x29c>)
 8000520:	f001 fbeb 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2140      	movs	r1, #64	; 0x40
 8000528:	4832      	ldr	r0, [pc, #200]	; (80005f4 <fsm_run+0x29c>)
 800052a:	f001 fbe6 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2120      	movs	r1, #32
 8000532:	4830      	ldr	r0, [pc, #192]	; (80005f4 <fsm_run+0x29c>)
 8000534:	f001 fbe1 	bl	8001cfa <HAL_GPIO_WritePin>
			num1 = light1_counter - timeYELLOW;
 8000538:	4b2f      	ldr	r3, [pc, #188]	; (80005f8 <fsm_run+0x2a0>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <fsm_run+0x294>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	4a30      	ldr	r2, [pc, #192]	; (8000604 <fsm_run+0x2ac>)
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e01c      	b.n	8000582 <fsm_run+0x22a>
		}
		else if (0 < light1_counter && light1_counter <= timeYELLOW) {
 8000548:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <fsm_run+0x2a0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	dd18      	ble.n	8000582 <fsm_run+0x22a>
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <fsm_run+0x2a0>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <fsm_run+0x294>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	429a      	cmp	r2, r3
 800055a:	dc12      	bgt.n	8000582 <fsm_run+0x22a>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2110      	movs	r1, #16
 8000560:	4824      	ldr	r0, [pc, #144]	; (80005f4 <fsm_run+0x29c>)
 8000562:	f001 fbca 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2140      	movs	r1, #64	; 0x40
 800056a:	4822      	ldr	r0, [pc, #136]	; (80005f4 <fsm_run+0x29c>)
 800056c:	f001 fbc5 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2120      	movs	r1, #32
 8000574:	481f      	ldr	r0, [pc, #124]	; (80005f4 <fsm_run+0x29c>)
 8000576:	f001 fbc0 	bl	8001cfa <HAL_GPIO_WritePin>
			num1 = light1_counter;
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <fsm_run+0x2a0>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a21      	ldr	r2, [pc, #132]	; (8000604 <fsm_run+0x2ac>)
 8000580:	6013      	str	r3, [r2, #0]
		}

		if (timeRED + timeYELLOW < light2_counter && light2_counter <= total_time) {
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <fsm_run+0x284>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b19      	ldr	r3, [pc, #100]	; (80005ec <fsm_run+0x294>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	441a      	add	r2, r3
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <fsm_run+0x2a4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	429a      	cmp	r2, r3
 8000592:	da3b      	bge.n	800060c <fsm_run+0x2b4>
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <fsm_run+0x2a4>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <fsm_run+0x2a8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	429a      	cmp	r2, r3
 800059e:	dc35      	bgt.n	800060c <fsm_run+0x2b4>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	4813      	ldr	r0, [pc, #76]	; (80005f4 <fsm_run+0x29c>)
 80005a6:	f001 fba8 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <fsm_run+0x29c>)
 80005b2:	f001 fba2 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <fsm_run+0x29c>)
 80005be:	f001 fb9c 	bl	8001cfa <HAL_GPIO_WritePin>
			num3 = light2_counter - timeRED - timeYELLOW;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <fsm_run+0x2a4>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <fsm_run+0x284>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	1ad2      	subs	r2, r2, r3
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <fsm_run+0x294>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <fsm_run+0x2b0>)
 80005d4:	6013      	str	r3, [r2, #0]
 80005d6:	e060      	b.n	800069a <fsm_run+0x342>
 80005d8:	200000a0 	.word	0x200000a0
 80005dc:	2000003c 	.word	0x2000003c
 80005e0:	20000094 	.word	0x20000094
 80005e4:	20000040 	.word	0x20000040
 80005e8:	2000009c 	.word	0x2000009c
 80005ec:	20000044 	.word	0x20000044
 80005f0:	20000098 	.word	0x20000098
 80005f4:	40010800 	.word	0x40010800
 80005f8:	20000084 	.word	0x20000084
 80005fc:	20000088 	.word	0x20000088
 8000600:	20000080 	.word	0x20000080
 8000604:	2000008c 	.word	0x2000008c
 8000608:	20000090 	.word	0x20000090
		}
		else if (timeRED < light2_counter && light2_counter <= timeRED + timeYELLOW) {
 800060c:	4b9a      	ldr	r3, [pc, #616]	; (8000878 <fsm_run+0x520>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b9a      	ldr	r3, [pc, #616]	; (800087c <fsm_run+0x524>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	da21      	bge.n	800065c <fsm_run+0x304>
 8000618:	4b97      	ldr	r3, [pc, #604]	; (8000878 <fsm_run+0x520>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b98      	ldr	r3, [pc, #608]	; (8000880 <fsm_run+0x528>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	441a      	add	r2, r3
 8000622:	4b96      	ldr	r3, [pc, #600]	; (800087c <fsm_run+0x524>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	db18      	blt.n	800065c <fsm_run+0x304>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	4895      	ldr	r0, [pc, #596]	; (8000884 <fsm_run+0x52c>)
 8000630:	f001 fb63 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063a:	4892      	ldr	r0, [pc, #584]	; (8000884 <fsm_run+0x52c>)
 800063c:	f001 fb5d 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	488f      	ldr	r0, [pc, #572]	; (8000884 <fsm_run+0x52c>)
 8000648:	f001 fb57 	bl	8001cfa <HAL_GPIO_WritePin>
			num3 = light2_counter - timeRED;
 800064c:	4b8b      	ldr	r3, [pc, #556]	; (800087c <fsm_run+0x524>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b89      	ldr	r3, [pc, #548]	; (8000878 <fsm_run+0x520>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	4a8c      	ldr	r2, [pc, #560]	; (8000888 <fsm_run+0x530>)
 8000658:	6013      	str	r3, [r2, #0]
 800065a:	e01e      	b.n	800069a <fsm_run+0x342>
		}
		else if (0 < light2_counter && light2_counter <= timeRED) {
 800065c:	4b87      	ldr	r3, [pc, #540]	; (800087c <fsm_run+0x524>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	dd1a      	ble.n	800069a <fsm_run+0x342>
 8000664:	4b85      	ldr	r3, [pc, #532]	; (800087c <fsm_run+0x524>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b83      	ldr	r3, [pc, #524]	; (8000878 <fsm_run+0x520>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	dc14      	bgt.n	800069a <fsm_run+0x342>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2180      	movs	r1, #128	; 0x80
 8000674:	4883      	ldr	r0, [pc, #524]	; (8000884 <fsm_run+0x52c>)
 8000676:	f001 fb40 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000680:	4880      	ldr	r0, [pc, #512]	; (8000884 <fsm_run+0x52c>)
 8000682:	f001 fb3a 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	487d      	ldr	r0, [pc, #500]	; (8000884 <fsm_run+0x52c>)
 800068e:	f001 fb34 	bl	8001cfa <HAL_GPIO_WritePin>
			num3 = light2_counter;
 8000692:	4b7a      	ldr	r3, [pc, #488]	; (800087c <fsm_run+0x524>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a7c      	ldr	r2, [pc, #496]	; (8000888 <fsm_run+0x530>)
 8000698:	6013      	str	r3, [r2, #0]
		}


		num1 = num1/10;
 800069a:	4b7c      	ldr	r3, [pc, #496]	; (800088c <fsm_run+0x534>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a7c      	ldr	r2, [pc, #496]	; (8000890 <fsm_run+0x538>)
 80006a0:	fb82 1203 	smull	r1, r2, r2, r3
 80006a4:	1092      	asrs	r2, r2, #2
 80006a6:	17db      	asrs	r3, r3, #31
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	4a78      	ldr	r2, [pc, #480]	; (800088c <fsm_run+0x534>)
 80006ac:	6013      	str	r3, [r2, #0]
		num1 = num1%10;
 80006ae:	4b77      	ldr	r3, [pc, #476]	; (800088c <fsm_run+0x534>)
 80006b0:	6819      	ldr	r1, [r3, #0]
 80006b2:	4b77      	ldr	r3, [pc, #476]	; (8000890 <fsm_run+0x538>)
 80006b4:	fb83 2301 	smull	r2, r3, r3, r1
 80006b8:	109a      	asrs	r2, r3, #2
 80006ba:	17cb      	asrs	r3, r1, #31
 80006bc:	1ad2      	subs	r2, r2, r3
 80006be:	4613      	mov	r3, r2
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	1aca      	subs	r2, r1, r3
 80006c8:	4b70      	ldr	r3, [pc, #448]	; (800088c <fsm_run+0x534>)
 80006ca:	601a      	str	r2, [r3, #0]
		num3 = num3/10;
 80006cc:	4b6e      	ldr	r3, [pc, #440]	; (8000888 <fsm_run+0x530>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a6f      	ldr	r2, [pc, #444]	; (8000890 <fsm_run+0x538>)
 80006d2:	fb82 1203 	smull	r1, r2, r2, r3
 80006d6:	1092      	asrs	r2, r2, #2
 80006d8:	17db      	asrs	r3, r3, #31
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	4a6a      	ldr	r2, [pc, #424]	; (8000888 <fsm_run+0x530>)
 80006de:	6013      	str	r3, [r2, #0]
		num3 = num3%10;
 80006e0:	4b69      	ldr	r3, [pc, #420]	; (8000888 <fsm_run+0x530>)
 80006e2:	6819      	ldr	r1, [r3, #0]
 80006e4:	4b6a      	ldr	r3, [pc, #424]	; (8000890 <fsm_run+0x538>)
 80006e6:	fb83 2301 	smull	r2, r3, r3, r1
 80006ea:	109a      	asrs	r2, r3, #2
 80006ec:	17cb      	asrs	r3, r1, #31
 80006ee:	1ad2      	subs	r2, r2, r3
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	1aca      	subs	r2, r1, r3
 80006fa:	4b63      	ldr	r3, [pc, #396]	; (8000888 <fsm_run+0x530>)
 80006fc:	601a      	str	r2, [r3, #0]
		updateClockBuffer(num1, num1, num3, num3);
 80006fe:	4b63      	ldr	r3, [pc, #396]	; (800088c <fsm_run+0x534>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	4b62      	ldr	r3, [pc, #392]	; (800088c <fsm_run+0x534>)
 8000704:	6819      	ldr	r1, [r3, #0]
 8000706:	4b60      	ldr	r3, [pc, #384]	; (8000888 <fsm_run+0x530>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	4b5f      	ldr	r3, [pc, #380]	; (8000888 <fsm_run+0x530>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f000 fd33 	bl	8001178 <updateClockBuffer>

		if (timer1_flag == 1) {
 8000712:	4b60      	ldr	r3, [pc, #384]	; (8000894 <fsm_run+0x53c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d10d      	bne.n	8000736 <fsm_run+0x3de>
			light1_counter--;
 800071a:	4b5f      	ldr	r3, [pc, #380]	; (8000898 <fsm_run+0x540>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3b01      	subs	r3, #1
 8000720:	4a5d      	ldr	r2, [pc, #372]	; (8000898 <fsm_run+0x540>)
 8000722:	6013      	str	r3, [r2, #0]
			light2_counter--;
 8000724:	4b55      	ldr	r3, [pc, #340]	; (800087c <fsm_run+0x524>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3b01      	subs	r3, #1
 800072a:	4a54      	ldr	r2, [pc, #336]	; (800087c <fsm_run+0x524>)
 800072c:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000732:	f000 fec5 	bl	80014c0 <setTimer1>
		}



		if (isButton1Pressed() == 1) {
 8000736:	f7ff fd09 	bl	800014c <isButton1Pressed>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	f040 81a1 	bne.w	8000a84 <fsm_run+0x72c>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2110      	movs	r1, #16
 8000746:	484f      	ldr	r0, [pc, #316]	; (8000884 <fsm_run+0x52c>)
 8000748:	f001 fad7 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2180      	movs	r1, #128	; 0x80
 8000750:	484c      	ldr	r0, [pc, #304]	; (8000884 <fsm_run+0x52c>)
 8000752:	f001 fad2 	bl	8001cfa <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2120      	movs	r1, #32
 800075a:	484a      	ldr	r0, [pc, #296]	; (8000884 <fsm_run+0x52c>)
 800075c:	f001 facd 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000766:	4847      	ldr	r0, [pc, #284]	; (8000884 <fsm_run+0x52c>)
 8000768:	f001 fac7 	bl	8001cfa <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	4844      	ldr	r0, [pc, #272]	; (8000884 <fsm_run+0x52c>)
 8000772:	f001 fac2 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077c:	4841      	ldr	r0, [pc, #260]	; (8000884 <fsm_run+0x52c>)
 800077e:	f001 fabc 	bl	8001cfa <HAL_GPIO_WritePin>

			state = MODE_2;
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <fsm_run+0x544>)
 8000784:	2202      	movs	r2, #2
 8000786:	601a      	str	r2, [r3, #0]
		}
		break;
 8000788:	e17c      	b.n	8000a84 <fsm_run+0x72c>
	case MODE_2:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 800078a:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <fsm_run+0x548>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a40      	ldr	r2, [pc, #256]	; (8000890 <fsm_run+0x538>)
 8000790:	fb82 1203 	smull	r1, r2, r2, r3
 8000794:	1092      	asrs	r2, r2, #2
 8000796:	17db      	asrs	r3, r3, #31
 8000798:	1ad0      	subs	r0, r2, r3
 800079a:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <fsm_run+0x548>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b3c      	ldr	r3, [pc, #240]	; (8000890 <fsm_run+0x538>)
 80007a0:	fb83 1302 	smull	r1, r3, r3, r2
 80007a4:	1099      	asrs	r1, r3, #2
 80007a6:	17d3      	asrs	r3, r2, #31
 80007a8:	1ac9      	subs	r1, r1, r3
 80007aa:	460b      	mov	r3, r1
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	440b      	add	r3, r1
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	1ad1      	subs	r1, r2, r3
 80007b4:	460b      	mov	r3, r1
 80007b6:	4602      	mov	r2, r0
 80007b8:	2102      	movs	r1, #2
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fcdc 	bl	8001178 <updateClockBuffer>

		if (timer2_flag == 1) {
 80007c0:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <fsm_run+0x54c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d10a      	bne.n	80007de <fsm_run+0x486>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80007c8:	2110      	movs	r1, #16
 80007ca:	482e      	ldr	r0, [pc, #184]	; (8000884 <fsm_run+0x52c>)
 80007cc:	f001 faad 	bl	8001d2a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	482c      	ldr	r0, [pc, #176]	; (8000884 <fsm_run+0x52c>)
 80007d4:	f001 faa9 	bl	8001d2a <HAL_GPIO_TogglePin>
			setTimer2(250);
 80007d8:	20fa      	movs	r0, #250	; 0xfa
 80007da:	f000 fe8b 	bl	80014f4 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 80007de:	f7ff fcb5 	bl	800014c <isButton1Pressed>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d122      	bne.n	800082e <fsm_run+0x4d6>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2110      	movs	r1, #16
 80007ec:	4825      	ldr	r0, [pc, #148]	; (8000884 <fsm_run+0x52c>)
 80007ee:	f001 fa84 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	4823      	ldr	r0, [pc, #140]	; (8000884 <fsm_run+0x52c>)
 80007f8:	f001 fa7f 	bl	8001cfa <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2120      	movs	r1, #32
 8000800:	4820      	ldr	r0, [pc, #128]	; (8000884 <fsm_run+0x52c>)
 8000802:	f001 fa7a 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080c:	481d      	ldr	r0, [pc, #116]	; (8000884 <fsm_run+0x52c>)
 800080e:	f001 fa74 	bl	8001cfa <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	481b      	ldr	r0, [pc, #108]	; (8000884 <fsm_run+0x52c>)
 8000818:	f001 fa6f 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <fsm_run+0x52c>)
 8000824:	f001 fa69 	bl	8001cfa <HAL_GPIO_WritePin>

			state = MODE_3;
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <fsm_run+0x544>)
 800082a:	2203      	movs	r2, #3
 800082c:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed() == 1) {
 800082e:	f7ff fc9f 	bl	8000170 <isButton2Pressed>
 8000832:	4603      	mov	r3, r0
 8000834:	2b01      	cmp	r3, #1
 8000836:	f040 8127 	bne.w	8000a88 <fsm_run+0x730>
			state = MODI_2;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <fsm_run+0x544>)
 800083c:	2214      	movs	r2, #20
 800083e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000840:	e122      	b.n	8000a88 <fsm_run+0x730>
	case MODI_2:
		tempRED++;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <fsm_run+0x548>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <fsm_run+0x548>)
 800084a:	6013      	str	r3, [r2, #0]
		if (tempRED > 99) tempRED = 0;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <fsm_run+0x548>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b63      	cmp	r3, #99	; 0x63
 8000852:	dd02      	ble.n	800085a <fsm_run+0x502>
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <fsm_run+0x548>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]

		if (isButton3Pressed() == 1) {
 800085a:	f7ff fc9b 	bl	8000194 <isButton3Pressed>
 800085e:	4603      	mov	r3, r0
 8000860:	2b01      	cmp	r3, #1
 8000862:	f040 8113 	bne.w	8000a8c <fsm_run+0x734>
			timeRED = tempRED;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <fsm_run+0x548>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a03      	ldr	r2, [pc, #12]	; (8000878 <fsm_run+0x520>)
 800086c:	6013      	str	r3, [r2, #0]
			state = MODE_2;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <fsm_run+0x544>)
 8000870:	2202      	movs	r2, #2
 8000872:	601a      	str	r2, [r3, #0]
		}
		break;
 8000874:	e10a      	b.n	8000a8c <fsm_run+0x734>
 8000876:	bf00      	nop
 8000878:	2000003c 	.word	0x2000003c
 800087c:	20000088 	.word	0x20000088
 8000880:	20000044 	.word	0x20000044
 8000884:	40010800 	.word	0x40010800
 8000888:	20000090 	.word	0x20000090
 800088c:	2000008c 	.word	0x2000008c
 8000890:	66666667 	.word	0x66666667
 8000894:	20000108 	.word	0x20000108
 8000898:	20000084 	.word	0x20000084
 800089c:	200000a0 	.word	0x200000a0
 80008a0:	20000094 	.word	0x20000094
 80008a4:	20000110 	.word	0x20000110
	case MODE_3:
		updateClockBuffer(0, 3, tempYELLOW / 10, tempYELLOW % 10);
 80008a8:	4b7e      	ldr	r3, [pc, #504]	; (8000aa4 <fsm_run+0x74c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a7e      	ldr	r2, [pc, #504]	; (8000aa8 <fsm_run+0x750>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	1092      	asrs	r2, r2, #2
 80008b4:	17db      	asrs	r3, r3, #31
 80008b6:	1ad0      	subs	r0, r2, r3
 80008b8:	4b7a      	ldr	r3, [pc, #488]	; (8000aa4 <fsm_run+0x74c>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b7a      	ldr	r3, [pc, #488]	; (8000aa8 <fsm_run+0x750>)
 80008be:	fb83 1302 	smull	r1, r3, r3, r2
 80008c2:	1099      	asrs	r1, r3, #2
 80008c4:	17d3      	asrs	r3, r2, #31
 80008c6:	1ac9      	subs	r1, r1, r3
 80008c8:	460b      	mov	r3, r1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	440b      	add	r3, r1
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	1ad1      	subs	r1, r2, r3
 80008d2:	460b      	mov	r3, r1
 80008d4:	4602      	mov	r2, r0
 80008d6:	2103      	movs	r1, #3
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 fc4d 	bl	8001178 <updateClockBuffer>

		if (timer2_flag == 1) {
 80008de:	4b73      	ldr	r3, [pc, #460]	; (8000aac <fsm_run+0x754>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d10b      	bne.n	80008fe <fsm_run+0x5a6>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80008e6:	2120      	movs	r1, #32
 80008e8:	4871      	ldr	r0, [pc, #452]	; (8000ab0 <fsm_run+0x758>)
 80008ea:	f001 fa1e 	bl	8001d2a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 80008ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f2:	486f      	ldr	r0, [pc, #444]	; (8000ab0 <fsm_run+0x758>)
 80008f4:	f001 fa19 	bl	8001d2a <HAL_GPIO_TogglePin>
			setTimer2(250);
 80008f8:	20fa      	movs	r0, #250	; 0xfa
 80008fa:	f000 fdfb 	bl	80014f4 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 80008fe:	f7ff fc25 	bl	800014c <isButton1Pressed>
 8000902:	4603      	mov	r3, r0
 8000904:	2b01      	cmp	r3, #1
 8000906:	d122      	bne.n	800094e <fsm_run+0x5f6>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2110      	movs	r1, #16
 800090c:	4868      	ldr	r0, [pc, #416]	; (8000ab0 <fsm_run+0x758>)
 800090e:	f001 f9f4 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	4866      	ldr	r0, [pc, #408]	; (8000ab0 <fsm_run+0x758>)
 8000918:	f001 f9ef 	bl	8001cfa <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2120      	movs	r1, #32
 8000920:	4863      	ldr	r0, [pc, #396]	; (8000ab0 <fsm_run+0x758>)
 8000922:	f001 f9ea 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092c:	4860      	ldr	r0, [pc, #384]	; (8000ab0 <fsm_run+0x758>)
 800092e:	f001 f9e4 	bl	8001cfa <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	2140      	movs	r1, #64	; 0x40
 8000936:	485e      	ldr	r0, [pc, #376]	; (8000ab0 <fsm_run+0x758>)
 8000938:	f001 f9df 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000942:	485b      	ldr	r0, [pc, #364]	; (8000ab0 <fsm_run+0x758>)
 8000944:	f001 f9d9 	bl	8001cfa <HAL_GPIO_WritePin>

			state = MODE_4;
 8000948:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <fsm_run+0x75c>)
 800094a:	2204      	movs	r2, #4
 800094c:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed() == 1) {
 800094e:	f7ff fc0f 	bl	8000170 <isButton2Pressed>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	f040 809b 	bne.w	8000a90 <fsm_run+0x738>
			state = MODI_3;
 800095a:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <fsm_run+0x75c>)
 800095c:	221e      	movs	r2, #30
 800095e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000960:	e096      	b.n	8000a90 <fsm_run+0x738>
	case MODI_3:
		tempYELLOW++;
 8000962:	4b50      	ldr	r3, [pc, #320]	; (8000aa4 <fsm_run+0x74c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a4e      	ldr	r2, [pc, #312]	; (8000aa4 <fsm_run+0x74c>)
 800096a:	6013      	str	r3, [r2, #0]
		if (tempYELLOW > 99) tempYELLOW = 0;
 800096c:	4b4d      	ldr	r3, [pc, #308]	; (8000aa4 <fsm_run+0x74c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b63      	cmp	r3, #99	; 0x63
 8000972:	dd02      	ble.n	800097a <fsm_run+0x622>
 8000974:	4b4b      	ldr	r3, [pc, #300]	; (8000aa4 <fsm_run+0x74c>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]

		if (isButton3Pressed() == 1) {
 800097a:	f7ff fc0b 	bl	8000194 <isButton3Pressed>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	f040 8087 	bne.w	8000a94 <fsm_run+0x73c>
			tempYELLOW = tempYELLOW;
 8000986:	4b47      	ldr	r3, [pc, #284]	; (8000aa4 <fsm_run+0x74c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a46      	ldr	r2, [pc, #280]	; (8000aa4 <fsm_run+0x74c>)
 800098c:	6013      	str	r3, [r2, #0]
			state = MODE_3;
 800098e:	4b49      	ldr	r3, [pc, #292]	; (8000ab4 <fsm_run+0x75c>)
 8000990:	2203      	movs	r2, #3
 8000992:	601a      	str	r2, [r3, #0]
		}
		break;
 8000994:	e07e      	b.n	8000a94 <fsm_run+0x73c>
	case MODE_4:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 8000996:	4b48      	ldr	r3, [pc, #288]	; (8000ab8 <fsm_run+0x760>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a43      	ldr	r2, [pc, #268]	; (8000aa8 <fsm_run+0x750>)
 800099c:	fb82 1203 	smull	r1, r2, r2, r3
 80009a0:	1092      	asrs	r2, r2, #2
 80009a2:	17db      	asrs	r3, r3, #31
 80009a4:	1ad0      	subs	r0, r2, r3
 80009a6:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <fsm_run+0x760>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <fsm_run+0x750>)
 80009ac:	fb83 1302 	smull	r1, r3, r3, r2
 80009b0:	1099      	asrs	r1, r3, #2
 80009b2:	17d3      	asrs	r3, r2, #31
 80009b4:	1ac9      	subs	r1, r1, r3
 80009b6:	460b      	mov	r3, r1
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	440b      	add	r3, r1
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	1ad1      	subs	r1, r2, r3
 80009c0:	460b      	mov	r3, r1
 80009c2:	4602      	mov	r2, r0
 80009c4:	2102      	movs	r1, #2
 80009c6:	2000      	movs	r0, #0
 80009c8:	f000 fbd6 	bl	8001178 <updateClockBuffer>

		if (timer2_flag == 1) {
 80009cc:	4b37      	ldr	r3, [pc, #220]	; (8000aac <fsm_run+0x754>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d10b      	bne.n	80009ec <fsm_run+0x694>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009d4:	2140      	movs	r1, #64	; 0x40
 80009d6:	4836      	ldr	r0, [pc, #216]	; (8000ab0 <fsm_run+0x758>)
 80009d8:	f001 f9a7 	bl	8001d2a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 80009dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e0:	4833      	ldr	r0, [pc, #204]	; (8000ab0 <fsm_run+0x758>)
 80009e2:	f001 f9a2 	bl	8001d2a <HAL_GPIO_TogglePin>
			setTimer2(250);
 80009e6:	20fa      	movs	r0, #250	; 0xfa
 80009e8:	f000 fd84 	bl	80014f4 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 80009ec:	f7ff fbae 	bl	800014c <isButton1Pressed>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d122      	bne.n	8000a3c <fsm_run+0x6e4>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2110      	movs	r1, #16
 80009fa:	482d      	ldr	r0, [pc, #180]	; (8000ab0 <fsm_run+0x758>)
 80009fc:	f001 f97d 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2180      	movs	r1, #128	; 0x80
 8000a04:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <fsm_run+0x758>)
 8000a06:	f001 f978 	bl	8001cfa <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	4828      	ldr	r0, [pc, #160]	; (8000ab0 <fsm_run+0x758>)
 8000a10:	f001 f973 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1a:	4825      	ldr	r0, [pc, #148]	; (8000ab0 <fsm_run+0x758>)
 8000a1c:	f001 f96d 	bl	8001cfa <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2140      	movs	r1, #64	; 0x40
 8000a24:	4822      	ldr	r0, [pc, #136]	; (8000ab0 <fsm_run+0x758>)
 8000a26:	f001 f968 	bl	8001cfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a30:	481f      	ldr	r0, [pc, #124]	; (8000ab0 <fsm_run+0x758>)
 8000a32:	f001 f962 	bl	8001cfa <HAL_GPIO_WritePin>

			state = RESET;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <fsm_run+0x75c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
		}

		if (isButton2Pressed() == 1) {
 8000a3c:	f7ff fb98 	bl	8000170 <isButton2Pressed>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d128      	bne.n	8000a98 <fsm_run+0x740>
			state = MODI_4;
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <fsm_run+0x75c>)
 8000a48:	2228      	movs	r2, #40	; 0x28
 8000a4a:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a4c:	e024      	b.n	8000a98 <fsm_run+0x740>
	case MODI_4:
		tempGREEN++;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <fsm_run+0x764>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <fsm_run+0x764>)
 8000a56:	6013      	str	r3, [r2, #0]
		if (tempGREEN > 99) tempGREEN = 0;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <fsm_run+0x764>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b63      	cmp	r3, #99	; 0x63
 8000a5e:	dd02      	ble.n	8000a66 <fsm_run+0x70e>
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <fsm_run+0x764>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]

		if (isButton3Pressed() == 1) {
 8000a66:	f7ff fb95 	bl	8000194 <isButton3Pressed>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d115      	bne.n	8000a9c <fsm_run+0x744>
			tempGREEN = tempGREEN;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <fsm_run+0x764>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a11      	ldr	r2, [pc, #68]	; (8000abc <fsm_run+0x764>)
 8000a76:	6013      	str	r3, [r2, #0]
			state = MODE_4;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <fsm_run+0x75c>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a7e:	e00d      	b.n	8000a9c <fsm_run+0x744>
	default:
		break;
 8000a80:	bf00      	nop
 8000a82:	e00c      	b.n	8000a9e <fsm_run+0x746>
		break;
 8000a84:	bf00      	nop
 8000a86:	e00a      	b.n	8000a9e <fsm_run+0x746>
		break;
 8000a88:	bf00      	nop
 8000a8a:	e008      	b.n	8000a9e <fsm_run+0x746>
		break;
 8000a8c:	bf00      	nop
 8000a8e:	e006      	b.n	8000a9e <fsm_run+0x746>
		break;
 8000a90:	bf00      	nop
 8000a92:	e004      	b.n	8000a9e <fsm_run+0x746>
		break;
 8000a94:	bf00      	nop
 8000a96:	e002      	b.n	8000a9e <fsm_run+0x746>
		break;
 8000a98:	bf00      	nop
 8000a9a:	e000      	b.n	8000a9e <fsm_run+0x746>
		break;
 8000a9c:	bf00      	nop
	}
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000098 	.word	0x20000098
 8000aa8:	66666667 	.word	0x66666667
 8000aac:	20000110 	.word	0x20000110
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	200000a0 	.word	0x200000a0
 8000ab8:	20000094 	.word	0x20000094
 8000abc:	2000009c 	.word	0x2000009c

08000ac0 <display7SEG>:
 *      Author: Admin
 */

#include "global.h"

void display7SEG(int num){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	switch(num){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b09      	cmp	r3, #9
 8000acc:	f200 8180 	bhi.w	8000dd0 <display7SEG+0x310>
 8000ad0:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <display7SEG+0x18>)
 8000ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad6:	bf00      	nop
 8000ad8:	08000b01 	.word	0x08000b01
 8000adc:	08000b49 	.word	0x08000b49
 8000ae0:	08000b91 	.word	0x08000b91
 8000ae4:	08000bd9 	.word	0x08000bd9
 8000ae8:	08000c21 	.word	0x08000c21
 8000aec:	08000c69 	.word	0x08000c69
 8000af0:	08000cb1 	.word	0x08000cb1
 8000af4:	08000cf9 	.word	0x08000cf9
 8000af8:	08000d41 	.word	0x08000d41
 8000afc:	08000d89 	.word	0x08000d89
	case 0:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000b00:	2200      	movs	r2, #0
 8000b02:	2101      	movs	r1, #1
 8000b04:	48b5      	ldr	r0, [pc, #724]	; (8000ddc <display7SEG+0x31c>)
 8000b06:	f001 f8f8 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	48b3      	ldr	r0, [pc, #716]	; (8000ddc <display7SEG+0x31c>)
 8000b10:	f001 f8f3 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000b14:	2200      	movs	r2, #0
 8000b16:	2104      	movs	r1, #4
 8000b18:	48b0      	ldr	r0, [pc, #704]	; (8000ddc <display7SEG+0x31c>)
 8000b1a:	f001 f8ee 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2108      	movs	r1, #8
 8000b22:	48ae      	ldr	r0, [pc, #696]	; (8000ddc <display7SEG+0x31c>)
 8000b24:	f001 f8e9 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	48ab      	ldr	r0, [pc, #684]	; (8000ddc <display7SEG+0x31c>)
 8000b2e:	f001 f8e4 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000b32:	2200      	movs	r2, #0
 8000b34:	2120      	movs	r1, #32
 8000b36:	48a9      	ldr	r0, [pc, #676]	; (8000ddc <display7SEG+0x31c>)
 8000b38:	f001 f8df 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	48a6      	ldr	r0, [pc, #664]	; (8000ddc <display7SEG+0x31c>)
 8000b42:	f001 f8da 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000b46:	e144      	b.n	8000dd2 <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	48a3      	ldr	r0, [pc, #652]	; (8000ddc <display7SEG+0x31c>)
 8000b4e:	f001 f8d4 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000b52:	2200      	movs	r2, #0
 8000b54:	2102      	movs	r1, #2
 8000b56:	48a1      	ldr	r0, [pc, #644]	; (8000ddc <display7SEG+0x31c>)
 8000b58:	f001 f8cf 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2104      	movs	r1, #4
 8000b60:	489e      	ldr	r0, [pc, #632]	; (8000ddc <display7SEG+0x31c>)
 8000b62:	f001 f8ca 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000b66:	2201      	movs	r2, #1
 8000b68:	2108      	movs	r1, #8
 8000b6a:	489c      	ldr	r0, [pc, #624]	; (8000ddc <display7SEG+0x31c>)
 8000b6c:	f001 f8c5 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000b70:	2201      	movs	r2, #1
 8000b72:	2110      	movs	r1, #16
 8000b74:	4899      	ldr	r0, [pc, #612]	; (8000ddc <display7SEG+0x31c>)
 8000b76:	f001 f8c0 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	4897      	ldr	r0, [pc, #604]	; (8000ddc <display7SEG+0x31c>)
 8000b80:	f001 f8bb 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000b84:	2201      	movs	r2, #1
 8000b86:	2140      	movs	r1, #64	; 0x40
 8000b88:	4894      	ldr	r0, [pc, #592]	; (8000ddc <display7SEG+0x31c>)
 8000b8a:	f001 f8b6 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000b8e:	e120      	b.n	8000dd2 <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000b90:	2200      	movs	r2, #0
 8000b92:	2101      	movs	r1, #1
 8000b94:	4891      	ldr	r0, [pc, #580]	; (8000ddc <display7SEG+0x31c>)
 8000b96:	f001 f8b0 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	488f      	ldr	r0, [pc, #572]	; (8000ddc <display7SEG+0x31c>)
 8000ba0:	f001 f8ab 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_SET ) ;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	488c      	ldr	r0, [pc, #560]	; (8000ddc <display7SEG+0x31c>)
 8000baa:	f001 f8a6 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	488a      	ldr	r0, [pc, #552]	; (8000ddc <display7SEG+0x31c>)
 8000bb4:	f001 f8a1 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2110      	movs	r1, #16
 8000bbc:	4887      	ldr	r0, [pc, #540]	; (8000ddc <display7SEG+0x31c>)
 8000bbe:	f001 f89c 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	4885      	ldr	r0, [pc, #532]	; (8000ddc <display7SEG+0x31c>)
 8000bc8:	f001 f897 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2140      	movs	r1, #64	; 0x40
 8000bd0:	4882      	ldr	r0, [pc, #520]	; (8000ddc <display7SEG+0x31c>)
 8000bd2:	f001 f892 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000bd6:	e0fc      	b.n	8000dd2 <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2101      	movs	r1, #1
 8000bdc:	487f      	ldr	r0, [pc, #508]	; (8000ddc <display7SEG+0x31c>)
 8000bde:	f001 f88c 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000be2:	2200      	movs	r2, #0
 8000be4:	2102      	movs	r1, #2
 8000be6:	487d      	ldr	r0, [pc, #500]	; (8000ddc <display7SEG+0x31c>)
 8000be8:	f001 f887 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000bec:	2200      	movs	r2, #0
 8000bee:	2104      	movs	r1, #4
 8000bf0:	487a      	ldr	r0, [pc, #488]	; (8000ddc <display7SEG+0x31c>)
 8000bf2:	f001 f882 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	4878      	ldr	r0, [pc, #480]	; (8000ddc <display7SEG+0x31c>)
 8000bfc:	f001 f87d 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000c00:	2201      	movs	r2, #1
 8000c02:	2110      	movs	r1, #16
 8000c04:	4875      	ldr	r0, [pc, #468]	; (8000ddc <display7SEG+0x31c>)
 8000c06:	f001 f878 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4873      	ldr	r0, [pc, #460]	; (8000ddc <display7SEG+0x31c>)
 8000c10:	f001 f873 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000c14:	2200      	movs	r2, #0
 8000c16:	2140      	movs	r1, #64	; 0x40
 8000c18:	4870      	ldr	r0, [pc, #448]	; (8000ddc <display7SEG+0x31c>)
 8000c1a:	f001 f86e 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000c1e:	e0d8      	b.n	8000dd2 <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000c20:	2201      	movs	r2, #1
 8000c22:	2101      	movs	r1, #1
 8000c24:	486d      	ldr	r0, [pc, #436]	; (8000ddc <display7SEG+0x31c>)
 8000c26:	f001 f868 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	486b      	ldr	r0, [pc, #428]	; (8000ddc <display7SEG+0x31c>)
 8000c30:	f001 f863 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000c34:	2200      	movs	r2, #0
 8000c36:	2104      	movs	r1, #4
 8000c38:	4868      	ldr	r0, [pc, #416]	; (8000ddc <display7SEG+0x31c>)
 8000c3a:	f001 f85e 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2108      	movs	r1, #8
 8000c42:	4866      	ldr	r0, [pc, #408]	; (8000ddc <display7SEG+0x31c>)
 8000c44:	f001 f859 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	4863      	ldr	r0, [pc, #396]	; (8000ddc <display7SEG+0x31c>)
 8000c4e:	f001 f854 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000c52:	2200      	movs	r2, #0
 8000c54:	2120      	movs	r1, #32
 8000c56:	4861      	ldr	r0, [pc, #388]	; (8000ddc <display7SEG+0x31c>)
 8000c58:	f001 f84f 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	485e      	ldr	r0, [pc, #376]	; (8000ddc <display7SEG+0x31c>)
 8000c62:	f001 f84a 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000c66:	e0b4      	b.n	8000dd2 <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	485b      	ldr	r0, [pc, #364]	; (8000ddc <display7SEG+0x31c>)
 8000c6e:	f001 f844 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000c72:	2201      	movs	r2, #1
 8000c74:	2102      	movs	r1, #2
 8000c76:	4859      	ldr	r0, [pc, #356]	; (8000ddc <display7SEG+0x31c>)
 8000c78:	f001 f83f 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2104      	movs	r1, #4
 8000c80:	4856      	ldr	r0, [pc, #344]	; (8000ddc <display7SEG+0x31c>)
 8000c82:	f001 f83a 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000c86:	2200      	movs	r2, #0
 8000c88:	2108      	movs	r1, #8
 8000c8a:	4854      	ldr	r0, [pc, #336]	; (8000ddc <display7SEG+0x31c>)
 8000c8c:	f001 f835 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000c90:	2201      	movs	r2, #1
 8000c92:	2110      	movs	r1, #16
 8000c94:	4851      	ldr	r0, [pc, #324]	; (8000ddc <display7SEG+0x31c>)
 8000c96:	f001 f830 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	484f      	ldr	r0, [pc, #316]	; (8000ddc <display7SEG+0x31c>)
 8000ca0:	f001 f82b 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	484c      	ldr	r0, [pc, #304]	; (8000ddc <display7SEG+0x31c>)
 8000caa:	f001 f826 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000cae:	e090      	b.n	8000dd2 <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4849      	ldr	r0, [pc, #292]	; (8000ddc <display7SEG+0x31c>)
 8000cb6:	f001 f820 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4847      	ldr	r0, [pc, #284]	; (8000ddc <display7SEG+0x31c>)
 8000cc0:	f001 f81b 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	4844      	ldr	r0, [pc, #272]	; (8000ddc <display7SEG+0x31c>)
 8000cca:	f001 f816 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	4842      	ldr	r0, [pc, #264]	; (8000ddc <display7SEG+0x31c>)
 8000cd4:	f001 f811 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2110      	movs	r1, #16
 8000cdc:	483f      	ldr	r0, [pc, #252]	; (8000ddc <display7SEG+0x31c>)
 8000cde:	f001 f80c 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	483d      	ldr	r0, [pc, #244]	; (8000ddc <display7SEG+0x31c>)
 8000ce8:	f001 f807 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000cec:	2200      	movs	r2, #0
 8000cee:	2140      	movs	r1, #64	; 0x40
 8000cf0:	483a      	ldr	r0, [pc, #232]	; (8000ddc <display7SEG+0x31c>)
 8000cf2:	f001 f802 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000cf6:	e06c      	b.n	8000dd2 <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4837      	ldr	r0, [pc, #220]	; (8000ddc <display7SEG+0x31c>)
 8000cfe:	f000 fffc 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000d02:	2200      	movs	r2, #0
 8000d04:	2102      	movs	r1, #2
 8000d06:	4835      	ldr	r0, [pc, #212]	; (8000ddc <display7SEG+0x31c>)
 8000d08:	f000 fff7 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2104      	movs	r1, #4
 8000d10:	4832      	ldr	r0, [pc, #200]	; (8000ddc <display7SEG+0x31c>)
 8000d12:	f000 fff2 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000d16:	2201      	movs	r2, #1
 8000d18:	2108      	movs	r1, #8
 8000d1a:	4830      	ldr	r0, [pc, #192]	; (8000ddc <display7SEG+0x31c>)
 8000d1c:	f000 ffed 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000d20:	2201      	movs	r2, #1
 8000d22:	2110      	movs	r1, #16
 8000d24:	482d      	ldr	r0, [pc, #180]	; (8000ddc <display7SEG+0x31c>)
 8000d26:	f000 ffe8 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	482b      	ldr	r0, [pc, #172]	; (8000ddc <display7SEG+0x31c>)
 8000d30:	f000 ffe3 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	4828      	ldr	r0, [pc, #160]	; (8000ddc <display7SEG+0x31c>)
 8000d3a:	f000 ffde 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000d3e:	e048      	b.n	8000dd2 <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000d40:	2200      	movs	r2, #0
 8000d42:	2101      	movs	r1, #1
 8000d44:	4825      	ldr	r0, [pc, #148]	; (8000ddc <display7SEG+0x31c>)
 8000d46:	f000 ffd8 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4823      	ldr	r0, [pc, #140]	; (8000ddc <display7SEG+0x31c>)
 8000d50:	f000 ffd3 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000d54:	2200      	movs	r2, #0
 8000d56:	2104      	movs	r1, #4
 8000d58:	4820      	ldr	r0, [pc, #128]	; (8000ddc <display7SEG+0x31c>)
 8000d5a:	f000 ffce 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2108      	movs	r1, #8
 8000d62:	481e      	ldr	r0, [pc, #120]	; (8000ddc <display7SEG+0x31c>)
 8000d64:	f000 ffc9 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	481b      	ldr	r0, [pc, #108]	; (8000ddc <display7SEG+0x31c>)
 8000d6e:	f000 ffc4 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000d72:	2200      	movs	r2, #0
 8000d74:	2120      	movs	r1, #32
 8000d76:	4819      	ldr	r0, [pc, #100]	; (8000ddc <display7SEG+0x31c>)
 8000d78:	f000 ffbf 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	4816      	ldr	r0, [pc, #88]	; (8000ddc <display7SEG+0x31c>)
 8000d82:	f000 ffba 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000d86:	e024      	b.n	8000dd2 <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <display7SEG+0x31c>)
 8000d8e:	f000 ffb4 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000d92:	2200      	movs	r2, #0
 8000d94:	2102      	movs	r1, #2
 8000d96:	4811      	ldr	r0, [pc, #68]	; (8000ddc <display7SEG+0x31c>)
 8000d98:	f000 ffaf 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2104      	movs	r1, #4
 8000da0:	480e      	ldr	r0, [pc, #56]	; (8000ddc <display7SEG+0x31c>)
 8000da2:	f000 ffaa 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000da6:	2200      	movs	r2, #0
 8000da8:	2108      	movs	r1, #8
 8000daa:	480c      	ldr	r0, [pc, #48]	; (8000ddc <display7SEG+0x31c>)
 8000dac:	f000 ffa5 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	2110      	movs	r1, #16
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <display7SEG+0x31c>)
 8000db6:	f000 ffa0 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	4807      	ldr	r0, [pc, #28]	; (8000ddc <display7SEG+0x31c>)
 8000dc0:	f000 ff9b 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2140      	movs	r1, #64	; 0x40
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <display7SEG+0x31c>)
 8000dca:	f000 ff96 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000dce:	e000      	b.n	8000dd2 <display7SEG+0x312>
	default:
		break;
 8000dd0:	bf00      	nop
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <display7SEG0>:
void display7SEG0(int num){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	switch(num){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b09      	cmp	r3, #9
 8000dec:	f200 81bc 	bhi.w	8001168 <display7SEG0+0x388>
 8000df0:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <display7SEG0+0x18>)
 8000df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df6:	bf00      	nop
 8000df8:	08000e21 	.word	0x08000e21
 8000dfc:	08000e75 	.word	0x08000e75
 8000e00:	08000ec9 	.word	0x08000ec9
 8000e04:	08000f1d 	.word	0x08000f1d
 8000e08:	08000f71 	.word	0x08000f71
 8000e0c:	08000fc5 	.word	0x08000fc5
 8000e10:	08001019 	.word	0x08001019
 8000e14:	0800106d 	.word	0x0800106d
 8000e18:	080010c1 	.word	0x080010c1
 8000e1c:	08001115 	.word	0x08001115
	case 0:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000e20:	2200      	movs	r2, #0
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	48d3      	ldr	r0, [pc, #844]	; (8001174 <display7SEG0+0x394>)
 8000e26:	f000 ff68 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e30:	48d0      	ldr	r0, [pc, #832]	; (8001174 <display7SEG0+0x394>)
 8000e32:	f000 ff62 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e3c:	48cd      	ldr	r0, [pc, #820]	; (8001174 <display7SEG0+0x394>)
 8000e3e:	f000 ff5c 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e48:	48ca      	ldr	r0, [pc, #808]	; (8001174 <display7SEG0+0x394>)
 8000e4a:	f000 ff56 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e54:	48c7      	ldr	r0, [pc, #796]	; (8001174 <display7SEG0+0x394>)
 8000e56:	f000 ff50 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e60:	48c4      	ldr	r0, [pc, #784]	; (8001174 <display7SEG0+0x394>)
 8000e62:	f000 ff4a 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6c:	48c1      	ldr	r0, [pc, #772]	; (8001174 <display7SEG0+0x394>)
 8000e6e:	f000 ff44 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000e72:	e17a      	b.n	800116a <display7SEG0+0x38a>
	case 1:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	2180      	movs	r1, #128	; 0x80
 8000e78:	48be      	ldr	r0, [pc, #760]	; (8001174 <display7SEG0+0x394>)
 8000e7a:	f000 ff3e 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e84:	48bb      	ldr	r0, [pc, #748]	; (8001174 <display7SEG0+0x394>)
 8000e86:	f000 ff38 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e90:	48b8      	ldr	r0, [pc, #736]	; (8001174 <display7SEG0+0x394>)
 8000e92:	f000 ff32 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9c:	48b5      	ldr	r0, [pc, #724]	; (8001174 <display7SEG0+0x394>)
 8000e9e:	f000 ff2c 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea8:	48b2      	ldr	r0, [pc, #712]	; (8001174 <display7SEG0+0x394>)
 8000eaa:	f000 ff26 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb4:	48af      	ldr	r0, [pc, #700]	; (8001174 <display7SEG0+0x394>)
 8000eb6:	f000 ff20 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec0:	48ac      	ldr	r0, [pc, #688]	; (8001174 <display7SEG0+0x394>)
 8000ec2:	f000 ff1a 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000ec6:	e150      	b.n	800116a <display7SEG0+0x38a>
	case 2:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	48a9      	ldr	r0, [pc, #676]	; (8001174 <display7SEG0+0x394>)
 8000ece:	f000 ff14 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed8:	48a6      	ldr	r0, [pc, #664]	; (8001174 <display7SEG0+0x394>)
 8000eda:	f000 ff0e 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_SET ) ;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee4:	48a3      	ldr	r0, [pc, #652]	; (8001174 <display7SEG0+0x394>)
 8000ee6:	f000 ff08 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef0:	48a0      	ldr	r0, [pc, #640]	; (8001174 <display7SEG0+0x394>)
 8000ef2:	f000 ff02 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efc:	489d      	ldr	r0, [pc, #628]	; (8001174 <display7SEG0+0x394>)
 8000efe:	f000 fefc 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f08:	489a      	ldr	r0, [pc, #616]	; (8001174 <display7SEG0+0x394>)
 8000f0a:	f000 fef6 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f14:	4897      	ldr	r0, [pc, #604]	; (8001174 <display7SEG0+0x394>)
 8000f16:	f000 fef0 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000f1a:	e126      	b.n	800116a <display7SEG0+0x38a>
	case 3:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	4894      	ldr	r0, [pc, #592]	; (8001174 <display7SEG0+0x394>)
 8000f22:	f000 feea 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2c:	4891      	ldr	r0, [pc, #580]	; (8001174 <display7SEG0+0x394>)
 8000f2e:	f000 fee4 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	488e      	ldr	r0, [pc, #568]	; (8001174 <display7SEG0+0x394>)
 8000f3a:	f000 fede 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f44:	488b      	ldr	r0, [pc, #556]	; (8001174 <display7SEG0+0x394>)
 8000f46:	f000 fed8 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f50:	4888      	ldr	r0, [pc, #544]	; (8001174 <display7SEG0+0x394>)
 8000f52:	f000 fed2 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5c:	4885      	ldr	r0, [pc, #532]	; (8001174 <display7SEG0+0x394>)
 8000f5e:	f000 fecc 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f68:	4882      	ldr	r0, [pc, #520]	; (8001174 <display7SEG0+0x394>)
 8000f6a:	f000 fec6 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000f6e:	e0fc      	b.n	800116a <display7SEG0+0x38a>
	case 4:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	487f      	ldr	r0, [pc, #508]	; (8001174 <display7SEG0+0x394>)
 8000f76:	f000 fec0 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f80:	487c      	ldr	r0, [pc, #496]	; (8001174 <display7SEG0+0x394>)
 8000f82:	f000 feba 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8c:	4879      	ldr	r0, [pc, #484]	; (8001174 <display7SEG0+0x394>)
 8000f8e:	f000 feb4 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f98:	4876      	ldr	r0, [pc, #472]	; (8001174 <display7SEG0+0x394>)
 8000f9a:	f000 feae 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	4873      	ldr	r0, [pc, #460]	; (8001174 <display7SEG0+0x394>)
 8000fa6:	f000 fea8 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb0:	4870      	ldr	r0, [pc, #448]	; (8001174 <display7SEG0+0x394>)
 8000fb2:	f000 fea2 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbc:	486d      	ldr	r0, [pc, #436]	; (8001174 <display7SEG0+0x394>)
 8000fbe:	f000 fe9c 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8000fc2:	e0d2      	b.n	800116a <display7SEG0+0x38a>
	case 5:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	486a      	ldr	r0, [pc, #424]	; (8001174 <display7SEG0+0x394>)
 8000fca:	f000 fe96 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd4:	4867      	ldr	r0, [pc, #412]	; (8001174 <display7SEG0+0x394>)
 8000fd6:	f000 fe90 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe0:	4864      	ldr	r0, [pc, #400]	; (8001174 <display7SEG0+0x394>)
 8000fe2:	f000 fe8a 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fec:	4861      	ldr	r0, [pc, #388]	; (8001174 <display7SEG0+0x394>)
 8000fee:	f000 fe84 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff8:	485e      	ldr	r0, [pc, #376]	; (8001174 <display7SEG0+0x394>)
 8000ffa:	f000 fe7e 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001004:	485b      	ldr	r0, [pc, #364]	; (8001174 <display7SEG0+0x394>)
 8001006:	f000 fe78 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001010:	4858      	ldr	r0, [pc, #352]	; (8001174 <display7SEG0+0x394>)
 8001012:	f000 fe72 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8001016:	e0a8      	b.n	800116a <display7SEG0+0x38a>
	case 6:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001018:	2200      	movs	r2, #0
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	4855      	ldr	r0, [pc, #340]	; (8001174 <display7SEG0+0x394>)
 800101e:	f000 fe6c 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001028:	4852      	ldr	r0, [pc, #328]	; (8001174 <display7SEG0+0x394>)
 800102a:	f000 fe66 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001034:	484f      	ldr	r0, [pc, #316]	; (8001174 <display7SEG0+0x394>)
 8001036:	f000 fe60 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001040:	484c      	ldr	r0, [pc, #304]	; (8001174 <display7SEG0+0x394>)
 8001042:	f000 fe5a 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800104c:	4849      	ldr	r0, [pc, #292]	; (8001174 <display7SEG0+0x394>)
 800104e:	f000 fe54 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001058:	4846      	ldr	r0, [pc, #280]	; (8001174 <display7SEG0+0x394>)
 800105a:	f000 fe4e 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001064:	4843      	ldr	r0, [pc, #268]	; (8001174 <display7SEG0+0x394>)
 8001066:	f000 fe48 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 800106a:	e07e      	b.n	800116a <display7SEG0+0x38a>
	case 7:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 800106c:	2200      	movs	r2, #0
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	4840      	ldr	r0, [pc, #256]	; (8001174 <display7SEG0+0x394>)
 8001072:	f000 fe42 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107c:	483d      	ldr	r0, [pc, #244]	; (8001174 <display7SEG0+0x394>)
 800107e:	f000 fe3c 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001088:	483a      	ldr	r0, [pc, #232]	; (8001174 <display7SEG0+0x394>)
 800108a:	f000 fe36 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001094:	4837      	ldr	r0, [pc, #220]	; (8001174 <display7SEG0+0x394>)
 8001096:	f000 fe30 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a0:	4834      	ldr	r0, [pc, #208]	; (8001174 <display7SEG0+0x394>)
 80010a2:	f000 fe2a 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ac:	4831      	ldr	r0, [pc, #196]	; (8001174 <display7SEG0+0x394>)
 80010ae:	f000 fe24 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b8:	482e      	ldr	r0, [pc, #184]	; (8001174 <display7SEG0+0x394>)
 80010ba:	f000 fe1e 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 80010be:	e054      	b.n	800116a <display7SEG0+0x38a>
	case 8:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	482b      	ldr	r0, [pc, #172]	; (8001174 <display7SEG0+0x394>)
 80010c6:	f000 fe18 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d0:	4828      	ldr	r0, [pc, #160]	; (8001174 <display7SEG0+0x394>)
 80010d2:	f000 fe12 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010dc:	4825      	ldr	r0, [pc, #148]	; (8001174 <display7SEG0+0x394>)
 80010de:	f000 fe0c 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e8:	4822      	ldr	r0, [pc, #136]	; (8001174 <display7SEG0+0x394>)
 80010ea:	f000 fe06 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f4:	481f      	ldr	r0, [pc, #124]	; (8001174 <display7SEG0+0x394>)
 80010f6:	f000 fe00 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001100:	481c      	ldr	r0, [pc, #112]	; (8001174 <display7SEG0+0x394>)
 8001102:	f000 fdfa 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110c:	4819      	ldr	r0, [pc, #100]	; (8001174 <display7SEG0+0x394>)
 800110e:	f000 fdf4 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8001112:	e02a      	b.n	800116a <display7SEG0+0x38a>
	case 9:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001114:	2200      	movs	r2, #0
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	4816      	ldr	r0, [pc, #88]	; (8001174 <display7SEG0+0x394>)
 800111a:	f000 fdee 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <display7SEG0+0x394>)
 8001126:	f000 fde8 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001130:	4810      	ldr	r0, [pc, #64]	; (8001174 <display7SEG0+0x394>)
 8001132:	f000 fde2 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <display7SEG0+0x394>)
 800113e:	f000 fddc 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001148:	480a      	ldr	r0, [pc, #40]	; (8001174 <display7SEG0+0x394>)
 800114a:	f000 fdd6 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <display7SEG0+0x394>)
 8001156:	f000 fdd0 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <display7SEG0+0x394>)
 8001162:	f000 fdca 	bl	8001cfa <HAL_GPIO_WritePin>
		break;
 8001166:	e000      	b.n	800116a <display7SEG0+0x38a>
	default:
		break;
 8001168:	bf00      	nop
	}
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40010c00 	.word	0x40010c00

08001178 <updateClockBuffer>:
int timeYELLOW = 2;

int led_buffer[4] = {0, 0, 0, 0};


void updateClockBuffer(int num0, int num1, int num2, int num3) {
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
	led_buffer[0] = num0;
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <updateClockBuffer+0x30>)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1;
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <updateClockBuffer+0x30>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	6053      	str	r3, [r2, #4]
	led_buffer[2] = num2;
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <updateClockBuffer+0x30>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num3;
 8001198:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <updateClockBuffer+0x30>)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	60d3      	str	r3, [r2, #12]
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	200000a4 	.word	0x200000a4

080011ac <update7SEG>:

void update7SEG(int index) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	switch (index) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <update7SEG+0x16>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d017      	beq.n	80011f0 <update7SEG+0x44>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
		display7SEG(led_buffer[2]);
		display7SEG0(led_buffer[3]);
		break;
	default:
		break;
 80011c0:	e02d      	b.n	800121e <update7SEG+0x72>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c8:	4817      	ldr	r0, [pc, #92]	; (8001228 <update7SEG+0x7c>)
 80011ca:	f000 fd96 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d4:	4814      	ldr	r0, [pc, #80]	; (8001228 <update7SEG+0x7c>)
 80011d6:	f000 fd90 	bl	8001cfa <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <update7SEG+0x80>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fc6e 	bl	8000ac0 <display7SEG>
		display7SEG0(led_buffer[1]);
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <update7SEG+0x80>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fdf9 	bl	8000de0 <display7SEG0>
		break;
 80011ee:	e016      	b.n	800121e <update7SEG+0x72>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <update7SEG+0x7c>)
 80011f8:	f000 fd7f 	bl	8001cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001202:	4809      	ldr	r0, [pc, #36]	; (8001228 <update7SEG+0x7c>)
 8001204:	f000 fd79 	bl	8001cfa <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <update7SEG+0x80>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fc57 	bl	8000ac0 <display7SEG>
		display7SEG0(led_buffer[3]);
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <update7SEG+0x80>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fde2 	bl	8000de0 <display7SEG0>
		break;
 800121c:	bf00      	nop
	}
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40010c00 	.word	0x40010c00
 800122c:	200000a4 	.word	0x200000a4

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001236:	f000 fa5d 	bl	80016f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123a:	f000 f82b 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123e:	f000 f8b1 	bl	80013a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001242:	f000 f863 	bl	800130c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001246:	4810      	ldr	r0, [pc, #64]	; (8001288 <main+0x58>)
 8001248:	f001 f9c0 	bl	80025cc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = 0;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <main+0x5c>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
  int index = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  setTimer0(10);
 8001256:	200a      	movs	r0, #10
 8001258:	f000 f918 	bl	800148c <setTimer0>
  while (1)
  {

	  if (timer0_flag == 1) {
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <main+0x60>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d10e      	bne.n	8001282 <main+0x52>
		  update7SEG(index);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ffa1 	bl	80011ac <update7SEG>
		  index++;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3301      	adds	r3, #1
 800126e:	607b      	str	r3, [r7, #4]
		  if (index == 2) index = 0;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d101      	bne.n	800127a <main+0x4a>
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
		  setTimer0(500);
 800127a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800127e:	f000 f905 	bl	800148c <setTimer0>
	  }
	  fsm_run();
 8001282:	f7ff f869 	bl	8000358 <fsm_run>
	  if (timer0_flag == 1) {
 8001286:	e7e9      	b.n	800125c <main+0x2c>
 8001288:	200000b4 	.word	0x200000b4
 800128c:	200000a0 	.word	0x200000a0
 8001290:	20000100 	.word	0x20000100

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b090      	sub	sp, #64	; 0x40
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0318 	add.w	r3, r7, #24
 800129e:	2228      	movs	r2, #40	; 0x28
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fd4a 	bl	8002d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ba:	2301      	movs	r3, #1
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012be:	2310      	movs	r3, #16
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fd46 	bl	8001d5c <HAL_RCC_OscConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012d6:	f000 f8d3 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 ffb4 	bl	8002260 <HAL_RCC_ClockConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012fe:	f000 f8bf 	bl	8001480 <Error_Handler>
  }
}
 8001302:	bf00      	nop
 8001304:	3740      	adds	r7, #64	; 0x40
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_TIM2_Init+0x94>)
 800132a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_TIM2_Init+0x94>)
 8001332:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001336:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_TIM2_Init+0x94>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_TIM2_Init+0x94>)
 8001340:	2209      	movs	r2, #9
 8001342:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_TIM2_Init+0x94>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_TIM2_Init+0x94>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <MX_TIM2_Init+0x94>)
 8001352:	f001 f8eb 	bl	800252c <HAL_TIM_Base_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800135c:	f000 f890 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001364:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <MX_TIM2_Init+0x94>)
 800136e:	f001 fa81 	bl	8002874 <HAL_TIM_ConfigClockSource>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001378:	f000 f882 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001384:	463b      	mov	r3, r7
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_TIM2_Init+0x94>)
 800138a:	f001 fc49 	bl	8002c20 <HAL_TIMEx_MasterConfigSynchronization>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001394:	f000 f874 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200000b4 	.word	0x200000b4

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <MX_GPIO_Init+0xb8>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a27      	ldr	r2, [pc, #156]	; (800145c <MX_GPIO_Init+0xb8>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <MX_GPIO_Init+0xb8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <MX_GPIO_Init+0xb8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a21      	ldr	r2, [pc, #132]	; (800145c <MX_GPIO_Init+0xb8>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <MX_GPIO_Init+0xb8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80013ee:	481c      	ldr	r0, [pc, #112]	; (8001460 <MX_GPIO_Init+0xbc>)
 80013f0:	f000 fc83 	bl	8001cfa <HAL_GPIO_WritePin>
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D0_Pin
 80013f4:	2200      	movs	r2, #0
 80013f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013fa:	481a      	ldr	r0, [pc, #104]	; (8001464 <MX_GPIO_Init+0xc0>)
 80013fc:	f000 fc7d 	bl	8001cfa <HAL_GPIO_WritePin>
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin;
 8001400:	230e      	movs	r3, #14
 8001402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001408:	2301      	movs	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4619      	mov	r1, r3
 8001412:	4813      	ldr	r0, [pc, #76]	; (8001460 <MX_GPIO_Init+0xbc>)
 8001414:	f000 fade 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_0_Pin
                           LED_YELLOW_0_Pin LED_GREEN_0_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 8001418:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800141c:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2302      	movs	r3, #2
 8001428:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	4619      	mov	r1, r3
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <MX_GPIO_Init+0xbc>)
 8001432:	f000 facf 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin EN1_Pin
                           EN2_Pin D_Pin E_Pin F_Pin
                           G_Pin A0_Pin B0_Pin C0_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D0_Pin
 8001436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800143a:	60bb      	str	r3, [r7, #8]
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	4619      	mov	r1, r3
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_GPIO_Init+0xc0>)
 8001450:	f000 fac0 	bl	80019d4 <HAL_GPIO_Init>

}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000
 8001460:	40010800 	.word	0x40010800
 8001464:	40010c00 	.word	0x40010c00

08001468 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	timer_run();
 8001470:	f000 f85a 	bl	8001528 <timer_run>
	getKeyInput();
 8001474:	f7fe fec4 	bl	8000200 <getKeyInput>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x8>
	...

0800148c <setTimer0>:
int timer1_counter = 0;
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0(int duration){
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/ TIMER_CYCLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <setTimer0+0x28>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	fb92 f3f3 	sdiv	r3, r2, r3
 800149e:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <setTimer0+0x2c>)
 80014a0:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <setTimer0+0x30>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000048 	.word	0x20000048
 80014b8:	200000fc 	.word	0x200000fc
 80014bc:	20000100 	.word	0x20000100

080014c0 <setTimer1>:

void setTimer1(int duration){
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/ TIMER_CYCLE;
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <setTimer1+0x28>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80014d2:	4a06      	ldr	r2, [pc, #24]	; (80014ec <setTimer1+0x2c>)
 80014d4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <setTimer1+0x30>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000048 	.word	0x20000048
 80014ec:	20000104 	.word	0x20000104
 80014f0:	20000108 	.word	0x20000108

080014f4 <setTimer2>:

void setTimer2(int duration){
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/ TIMER_CYCLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <setTimer2+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	fb92 f3f3 	sdiv	r3, r2, r3
 8001506:	4a06      	ldr	r2, [pc, #24]	; (8001520 <setTimer2+0x2c>)
 8001508:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <setTimer2+0x30>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000048 	.word	0x20000048
 8001520:	2000010c 	.word	0x2000010c
 8001524:	20000110 	.word	0x20000110

08001528 <timer_run>:

void timer_run(){
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <timer_run+0x6c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	dd0b      	ble.n	800154c <timer_run+0x24>
		timer0_counter--;
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <timer_run+0x6c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3b01      	subs	r3, #1
 800153a:	4a16      	ldr	r2, [pc, #88]	; (8001594 <timer_run+0x6c>)
 800153c:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0) timer0_flag = 1;
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <timer_run+0x6c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <timer_run+0x24>
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <timer_run+0x70>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
	}

	if(timer1_counter > 0){
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <timer_run+0x74>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	dd0b      	ble.n	800156c <timer_run+0x44>
		timer1_counter--;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <timer_run+0x74>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3b01      	subs	r3, #1
 800155a:	4a10      	ldr	r2, [pc, #64]	; (800159c <timer_run+0x74>)
 800155c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <timer_run+0x74>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <timer_run+0x44>
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <timer_run+0x78>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <timer_run+0x7c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dd0b      	ble.n	800158c <timer_run+0x64>
			timer2_counter--;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <timer_run+0x7c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <timer_run+0x7c>)
 800157c:	6013      	str	r3, [r2, #0]
			if(timer2_counter == 0) timer2_flag = 1;
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <timer_run+0x7c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <timer_run+0x64>
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <timer_run+0x80>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]
		}
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	200000fc 	.word	0x200000fc
 8001598:	20000100 	.word	0x20000100
 800159c:	20000104 	.word	0x20000104
 80015a0:	20000108 	.word	0x20000108
 80015a4:	2000010c 	.word	0x2000010c
 80015a8:	20000110 	.word	0x20000110

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_MspInit+0x40>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <HAL_MspInit+0x40>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_MspInit+0x40>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_MspInit+0x40>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_MspInit+0x40>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_MspInit+0x40>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001600:	d113      	bne.n	800162a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_TIM_Base_MspInit+0x44>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_TIM_Base_MspInit+0x44>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_TIM_Base_MspInit+0x44>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	201c      	movs	r0, #28
 8001620:	f000 f9a1 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001624:	201c      	movs	r0, #28
 8001626:	f000 f9ba 	bl	800199e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800163c:	e7fe      	b.n	800163c <NMI_Handler+0x4>

0800163e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <MemManage_Handler+0x4>

0800164a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <UsageFault_Handler+0x4>

08001656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167e:	f000 f87f 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <TIM2_IRQHandler+0x10>)
 800168e:	f000 ffe9 	bl	8002664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000b4 	.word	0x200000b4

0800169c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016aa:	490d      	ldr	r1, [pc, #52]	; (80016e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c0:	4c0a      	ldr	r4, [pc, #40]	; (80016ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ce:	f7ff ffe5 	bl	800169c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d2:	f001 fb0f 	bl	8002cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016d6:	f7ff fdab 	bl	8001230 <main>
  bx lr
 80016da:	4770      	bx	lr
  ldr r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80016e4:	08002d8c 	.word	0x08002d8c
  ldr r2, =_sbss
 80016e8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80016ec:	20000118 	.word	0x20000118

080016f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <ADC1_2_IRQHandler>
	...

080016f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_Init+0x28>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_Init+0x28>)
 80016fe:	f043 0310 	orr.w	r3, r3, #16
 8001702:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f000 f923 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170a:	200f      	movs	r0, #15
 800170c:	f000 f808 	bl	8001720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff ff4c 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40022000 	.word	0x40022000

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x54>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x58>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001736:	fbb3 f3f1 	udiv	r3, r3, r1
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f93b 	bl	80019ba <HAL_SYSTICK_Config>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e00e      	b.n	800176c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d80a      	bhi.n	800176a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	2200      	movs	r2, #0
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f000 f903 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4a06      	ldr	r2, [pc, #24]	; (800177c <HAL_InitTick+0x5c>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000004c 	.word	0x2000004c
 8001778:	20000054 	.word	0x20000054
 800177c:	20000050 	.word	0x20000050

08001780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_IncTick+0x1c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_IncTick+0x20>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <HAL_IncTick+0x20>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	20000054 	.word	0x20000054
 80017a0:	20000114 	.word	0x20000114

080017a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <HAL_GetTick+0x10>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	20000114 	.word	0x20000114

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4906      	ldr	r1, [pc, #24]	; (8001850 <__NVIC_EnableIRQ+0x34>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	; (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
         );
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff90 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff2d 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff42 	bl	8001800 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff90 	bl	80018a8 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5f 	bl	8001854 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff35 	bl	800181c <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa2 	bl	800190c <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b08b      	sub	sp, #44	; 0x2c
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e6:	e161      	b.n	8001cac <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019e8:	2201      	movs	r2, #1
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f040 8150 	bne.w	8001ca6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a97      	ldr	r2, [pc, #604]	; (8001c68 <HAL_GPIO_Init+0x294>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d05e      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
 8001a10:	4a95      	ldr	r2, [pc, #596]	; (8001c68 <HAL_GPIO_Init+0x294>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d875      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a16:	4a95      	ldr	r2, [pc, #596]	; (8001c6c <HAL_GPIO_Init+0x298>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d058      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
 8001a1c:	4a93      	ldr	r2, [pc, #588]	; (8001c6c <HAL_GPIO_Init+0x298>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d86f      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a22:	4a93      	ldr	r2, [pc, #588]	; (8001c70 <HAL_GPIO_Init+0x29c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d052      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
 8001a28:	4a91      	ldr	r2, [pc, #580]	; (8001c70 <HAL_GPIO_Init+0x29c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d869      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a2e:	4a91      	ldr	r2, [pc, #580]	; (8001c74 <HAL_GPIO_Init+0x2a0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d04c      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
 8001a34:	4a8f      	ldr	r2, [pc, #572]	; (8001c74 <HAL_GPIO_Init+0x2a0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d863      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a3a:	4a8f      	ldr	r2, [pc, #572]	; (8001c78 <HAL_GPIO_Init+0x2a4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d046      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
 8001a40:	4a8d      	ldr	r2, [pc, #564]	; (8001c78 <HAL_GPIO_Init+0x2a4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d85d      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a46:	2b12      	cmp	r3, #18
 8001a48:	d82a      	bhi.n	8001aa0 <HAL_GPIO_Init+0xcc>
 8001a4a:	2b12      	cmp	r3, #18
 8001a4c:	d859      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a4e:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <HAL_GPIO_Init+0x80>)
 8001a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a54:	08001acf 	.word	0x08001acf
 8001a58:	08001aa9 	.word	0x08001aa9
 8001a5c:	08001abb 	.word	0x08001abb
 8001a60:	08001afd 	.word	0x08001afd
 8001a64:	08001b03 	.word	0x08001b03
 8001a68:	08001b03 	.word	0x08001b03
 8001a6c:	08001b03 	.word	0x08001b03
 8001a70:	08001b03 	.word	0x08001b03
 8001a74:	08001b03 	.word	0x08001b03
 8001a78:	08001b03 	.word	0x08001b03
 8001a7c:	08001b03 	.word	0x08001b03
 8001a80:	08001b03 	.word	0x08001b03
 8001a84:	08001b03 	.word	0x08001b03
 8001a88:	08001b03 	.word	0x08001b03
 8001a8c:	08001b03 	.word	0x08001b03
 8001a90:	08001b03 	.word	0x08001b03
 8001a94:	08001b03 	.word	0x08001b03
 8001a98:	08001ab1 	.word	0x08001ab1
 8001a9c:	08001ac5 	.word	0x08001ac5
 8001aa0:	4a76      	ldr	r2, [pc, #472]	; (8001c7c <HAL_GPIO_Init+0x2a8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aa6:	e02c      	b.n	8001b02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e029      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	e024      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	3308      	adds	r3, #8
 8001ac0:	623b      	str	r3, [r7, #32]
          break;
 8001ac2:	e01f      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	330c      	adds	r3, #12
 8001aca:	623b      	str	r3, [r7, #32]
          break;
 8001acc:	e01a      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	623b      	str	r3, [r7, #32]
          break;
 8001ada:	e013      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	611a      	str	r2, [r3, #16]
          break;
 8001aee:	e009      	b.n	8001b04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af0:	2308      	movs	r3, #8
 8001af2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	615a      	str	r2, [r3, #20]
          break;
 8001afa:	e003      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
          break;
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          break;
 8001b02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2bff      	cmp	r3, #255	; 0xff
 8001b08:	d801      	bhi.n	8001b0e <HAL_GPIO_Init+0x13a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	e001      	b.n	8001b12 <HAL_GPIO_Init+0x13e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3304      	adds	r3, #4
 8001b12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2bff      	cmp	r3, #255	; 0xff
 8001b18:	d802      	bhi.n	8001b20 <HAL_GPIO_Init+0x14c>
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	e002      	b.n	8001b26 <HAL_GPIO_Init+0x152>
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	3b08      	subs	r3, #8
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	401a      	ands	r2, r3
 8001b38:	6a39      	ldr	r1, [r7, #32]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	431a      	orrs	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80a9 	beq.w	8001ca6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b54:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <HAL_GPIO_Init+0x2ac>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4a49      	ldr	r2, [pc, #292]	; (8001c80 <HAL_GPIO_Init+0x2ac>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6193      	str	r3, [r2, #24]
 8001b60:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_GPIO_Init+0x2ac>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b6c:	4a45      	ldr	r2, [pc, #276]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a3d      	ldr	r2, [pc, #244]	; (8001c88 <HAL_GPIO_Init+0x2b4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00d      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e0>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a3c      	ldr	r2, [pc, #240]	; (8001c8c <HAL_GPIO_Init+0x2b8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d007      	beq.n	8001bb0 <HAL_GPIO_Init+0x1dc>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a3b      	ldr	r2, [pc, #236]	; (8001c90 <HAL_GPIO_Init+0x2bc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_GPIO_Init+0x1d8>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e004      	b.n	8001bb6 <HAL_GPIO_Init+0x1e2>
 8001bac:	2303      	movs	r3, #3
 8001bae:	e002      	b.n	8001bb6 <HAL_GPIO_Init+0x1e2>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_GPIO_Init+0x1e2>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb8:	f002 0203 	and.w	r2, r2, #3
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	4093      	lsls	r3, r2
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bc6:	492f      	ldr	r1, [pc, #188]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be0:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	492b      	ldr	r1, [pc, #172]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	4927      	ldr	r1, [pc, #156]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4921      	ldr	r1, [pc, #132]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	491d      	ldr	r1, [pc, #116]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4917      	ldr	r1, [pc, #92]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4913      	ldr	r1, [pc, #76]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01f      	beq.n	8001c98 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	490d      	ldr	r1, [pc, #52]	; (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
 8001c64:	e01f      	b.n	8001ca6 <HAL_GPIO_Init+0x2d2>
 8001c66:	bf00      	nop
 8001c68:	10320000 	.word	0x10320000
 8001c6c:	10310000 	.word	0x10310000
 8001c70:	10220000 	.word	0x10220000
 8001c74:	10210000 	.word	0x10210000
 8001c78:	10120000 	.word	0x10120000
 8001c7c:	10110000 	.word	0x10110000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40010000 	.word	0x40010000
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	40010c00 	.word	0x40010c00
 8001c90:	40011000 	.word	0x40011000
 8001c94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_GPIO_Init+0x2f4>)
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	4909      	ldr	r1, [pc, #36]	; (8001cc8 <HAL_GPIO_Init+0x2f4>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	3301      	adds	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f47f ae96 	bne.w	80019e8 <HAL_GPIO_Init+0x14>
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	372c      	adds	r7, #44	; 0x2c
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40010400 	.word	0x40010400

08001ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	887b      	ldrh	r3, [r7, #2]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e001      	b.n	8001cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	807b      	strh	r3, [r7, #2]
 8001d06:	4613      	mov	r3, r2
 8001d08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d0a:	787b      	ldrb	r3, [r7, #1]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d10:	887a      	ldrh	r2, [r7, #2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d16:	e003      	b.n	8001d20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d18:	887b      	ldrh	r3, [r7, #2]
 8001d1a:	041a      	lsls	r2, r3, #16
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	611a      	str	r2, [r3, #16]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d3c:	887a      	ldrh	r2, [r7, #2]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4013      	ands	r3, r2
 8001d42:	041a      	lsls	r2, r3, #16
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	400b      	ands	r3, r1
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	611a      	str	r2, [r3, #16]
}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e272      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8087 	beq.w	8001e8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d7c:	4b92      	ldr	r3, [pc, #584]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d00c      	beq.n	8001da2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d88:	4b8f      	ldr	r3, [pc, #572]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d112      	bne.n	8001dba <HAL_RCC_OscConfig+0x5e>
 8001d94:	4b8c      	ldr	r3, [pc, #560]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da0:	d10b      	bne.n	8001dba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da2:	4b89      	ldr	r3, [pc, #548]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d06c      	beq.n	8001e88 <HAL_RCC_OscConfig+0x12c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d168      	bne.n	8001e88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e24c      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x76>
 8001dc4:	4b80      	ldr	r3, [pc, #512]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a7f      	ldr	r2, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	e02e      	b.n	8001e30 <HAL_RCC_OscConfig+0xd4>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x98>
 8001dda:	4b7b      	ldr	r3, [pc, #492]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a7a      	ldr	r2, [pc, #488]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b78      	ldr	r3, [pc, #480]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a77      	ldr	r2, [pc, #476]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e01d      	b.n	8001e30 <HAL_RCC_OscConfig+0xd4>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0xbc>
 8001dfe:	4b72      	ldr	r3, [pc, #456]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a71      	ldr	r2, [pc, #452]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a6e      	ldr	r2, [pc, #440]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e00b      	b.n	8001e30 <HAL_RCC_OscConfig+0xd4>
 8001e18:	4b6b      	ldr	r3, [pc, #428]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a6a      	ldr	r2, [pc, #424]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a67      	ldr	r2, [pc, #412]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fcb4 	bl	80017a4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fcb0 	bl	80017a4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e200      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	4b5d      	ldr	r3, [pc, #372]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0xe4>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fca0 	bl	80017a4 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff fc9c 	bl	80017a4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e1ec      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x10c>
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d063      	beq.n	8001f5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e96:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ea2:	4b49      	ldr	r3, [pc, #292]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d11c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x18c>
 8001eae:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d116      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eba:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x176>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e1c0      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4939      	ldr	r1, [pc, #228]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	e03a      	b.n	8001f5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d020      	beq.n	8001f32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef0:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <HAL_RCC_OscConfig+0x270>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff fc55 	bl	80017a4 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efe:	f7ff fc51 	bl	80017a4 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e1a1      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4927      	ldr	r1, [pc, #156]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]
 8001f30:	e015      	b.n	8001f5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_RCC_OscConfig+0x270>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fc34 	bl	80017a4 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff fc30 	bl	80017a4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e180      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d03a      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d019      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_RCC_OscConfig+0x274>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f78:	f7ff fc14 	bl	80017a4 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f80:	f7ff fc10 	bl	80017a4 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e160      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f000 faa6 	bl	80024f0 <RCC_Delay>
 8001fa4:	e01c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fac:	f7ff fbfa 	bl	80017a4 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb2:	e00f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb4:	f7ff fbf6 	bl	80017a4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d908      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e146      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	42420000 	.word	0x42420000
 8001fd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd4:	4b92      	ldr	r3, [pc, #584]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e9      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80a6 	beq.w	800213a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff2:	4b8b      	ldr	r3, [pc, #556]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10d      	bne.n	800201a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b88      	ldr	r3, [pc, #544]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a87      	ldr	r2, [pc, #540]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b85      	ldr	r3, [pc, #532]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002016:	2301      	movs	r3, #1
 8002018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b82      	ldr	r3, [pc, #520]	; (8002224 <HAL_RCC_OscConfig+0x4c8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002026:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <HAL_RCC_OscConfig+0x4c8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a7e      	ldr	r2, [pc, #504]	; (8002224 <HAL_RCC_OscConfig+0x4c8>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002032:	f7ff fbb7 	bl	80017a4 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7ff fbb3 	bl	80017a4 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b64      	cmp	r3, #100	; 0x64
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e103      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b75      	ldr	r3, [pc, #468]	; (8002224 <HAL_RCC_OscConfig+0x4c8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x312>
 8002060:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a6e      	ldr	r2, [pc, #440]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	e02d      	b.n	80020ca <HAL_RCC_OscConfig+0x36e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x334>
 8002076:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a69      	ldr	r2, [pc, #420]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a66      	ldr	r2, [pc, #408]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	f023 0304 	bic.w	r3, r3, #4
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	e01c      	b.n	80020ca <HAL_RCC_OscConfig+0x36e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b05      	cmp	r3, #5
 8002096:	d10c      	bne.n	80020b2 <HAL_RCC_OscConfig+0x356>
 8002098:	4b61      	ldr	r3, [pc, #388]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a60      	ldr	r2, [pc, #384]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6213      	str	r3, [r2, #32]
 80020a4:	4b5e      	ldr	r3, [pc, #376]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4a5d      	ldr	r2, [pc, #372]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6213      	str	r3, [r2, #32]
 80020b0:	e00b      	b.n	80020ca <HAL_RCC_OscConfig+0x36e>
 80020b2:	4b5b      	ldr	r3, [pc, #364]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a5a      	ldr	r2, [pc, #360]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6213      	str	r3, [r2, #32]
 80020be:	4b58      	ldr	r3, [pc, #352]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a57      	ldr	r2, [pc, #348]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	f023 0304 	bic.w	r3, r3, #4
 80020c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d015      	beq.n	80020fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7ff fb67 	bl	80017a4 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff fb63 	bl	80017a4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0b1      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f0:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ee      	beq.n	80020da <HAL_RCC_OscConfig+0x37e>
 80020fc:	e014      	b.n	8002128 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff fb51 	bl	80017a4 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7ff fb4d 	bl	80017a4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e09b      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211c:	4b40      	ldr	r3, [pc, #256]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1ee      	bne.n	8002106 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212e:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4a3b      	ldr	r2, [pc, #236]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002138:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8087 	beq.w	8002252 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002144:	4b36      	ldr	r3, [pc, #216]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d061      	beq.n	8002214 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d146      	bne.n	80021e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7ff fb21 	bl	80017a4 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002166:	f7ff fb1d 	bl	80017a4 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e06d      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f0      	bne.n	8002166 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218c:	d108      	bne.n	80021a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	4921      	ldr	r1, [pc, #132]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a19      	ldr	r1, [r3, #32]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	430b      	orrs	r3, r1
 80021b2:	491b      	ldr	r1, [pc, #108]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7ff faf1 	bl	80017a4 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7ff faed 	bl	80017a4 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e03d      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x46a>
 80021e4:	e035      	b.n	8002252 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7ff fada 	bl	80017a4 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff fad6 	bl	80017a4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e026      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x498>
 8002212:	e01e      	b.n	8002252 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d107      	bne.n	800222c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e019      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
 8002220:	40021000 	.word	0x40021000
 8002224:	40007000 	.word	0x40007000
 8002228:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_OscConfig+0x500>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	429a      	cmp	r2, r3
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000

08002260 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0d0      	b.n	8002416 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002274:	4b6a      	ldr	r3, [pc, #424]	; (8002420 <HAL_RCC_ClockConfig+0x1c0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d910      	bls.n	80022a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b67      	ldr	r3, [pc, #412]	; (8002420 <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 0207 	bic.w	r2, r3, #7
 800228a:	4965      	ldr	r1, [pc, #404]	; (8002420 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <HAL_RCC_ClockConfig+0x1c0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0b8      	b.n	8002416 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022bc:	4b59      	ldr	r3, [pc, #356]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4a58      	ldr	r2, [pc, #352]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d4:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4a52      	ldr	r2, [pc, #328]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b50      	ldr	r3, [pc, #320]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	494d      	ldr	r1, [pc, #308]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d040      	beq.n	8002380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d115      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e07f      	b.n	8002416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231e:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e073      	b.n	8002416 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06b      	b.n	8002416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233e:	4b39      	ldr	r3, [pc, #228]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f023 0203 	bic.w	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4936      	ldr	r1, [pc, #216]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002350:	f7ff fa28 	bl	80017a4 <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	e00a      	b.n	800236e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002358:	f7ff fa24 	bl	80017a4 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f241 3288 	movw	r2, #5000	; 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e053      	b.n	8002416 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 020c 	and.w	r2, r3, #12
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	429a      	cmp	r2, r3
 800237e:	d1eb      	bne.n	8002358 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_RCC_ClockConfig+0x1c0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d210      	bcs.n	80023b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 0207 	bic.w	r2, r3, #7
 8002396:	4922      	ldr	r1, [pc, #136]	; (8002420 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e032      	b.n	8002416 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4916      	ldr	r1, [pc, #88]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	490e      	ldr	r1, [pc, #56]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ee:	f000 f821 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80023f2:	4602      	mov	r2, r0
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	490a      	ldr	r1, [pc, #40]	; (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 8002400:	5ccb      	ldrb	r3, [r1, r3]
 8002402:	fa22 f303 	lsr.w	r3, r2, r3
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <HAL_RCC_ClockConfig+0x1cc>)
 8002408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_RCC_ClockConfig+0x1d0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff f986 	bl	8001720 <HAL_InitTick>

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40022000 	.word	0x40022000
 8002424:	40021000 	.word	0x40021000
 8002428:	08002d74 	.word	0x08002d74
 800242c:	2000004c 	.word	0x2000004c
 8002430:	20000050 	.word	0x20000050

08002434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002434:	b490      	push	{r4, r7}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800243a:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800243c:	1d3c      	adds	r4, r7, #4
 800243e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002444:	f240 2301 	movw	r3, #513	; 0x201
 8002448:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800245e:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b04      	cmp	r3, #4
 800246c:	d002      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x40>
 800246e:	2b08      	cmp	r3, #8
 8002470:	d003      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0x46>
 8002472:	e02b      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002476:	623b      	str	r3, [r7, #32]
      break;
 8002478:	e02b      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	0c9b      	lsrs	r3, r3, #18
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3328      	adds	r3, #40	; 0x28
 8002484:	443b      	add	r3, r7
 8002486:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800248a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d012      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	0c5b      	lsrs	r3, r3, #17
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	3328      	adds	r3, #40	; 0x28
 80024a2:	443b      	add	r3, r7
 80024a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ae:	fb03 f202 	mul.w	r2, r3, r2
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ba:	e004      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	4a0b      	ldr	r2, [pc, #44]	; (80024ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c0:	fb02 f303 	mul.w	r3, r2, r3
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	623b      	str	r3, [r7, #32]
      break;
 80024ca:	e002      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ce:	623b      	str	r3, [r7, #32]
      break;
 80024d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d2:	6a3b      	ldr	r3, [r7, #32]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3728      	adds	r7, #40	; 0x28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc90      	pop	{r4, r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	08002d64 	.word	0x08002d64
 80024e4:	40021000 	.word	0x40021000
 80024e8:	007a1200 	.word	0x007a1200
 80024ec:	003d0900 	.word	0x003d0900

080024f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <RCC_Delay+0x34>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <RCC_Delay+0x38>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	0a5b      	lsrs	r3, r3, #9
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800250c:	bf00      	nop
  }
  while (Delay --);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	60fa      	str	r2, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f9      	bne.n	800250c <RCC_Delay+0x1c>
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	2000004c 	.word	0x2000004c
 8002528:	10624dd3 	.word	0x10624dd3

0800252c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e041      	b.n	80025c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff f84c 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3304      	adds	r3, #4
 8002568:	4619      	mov	r1, r3
 800256a:	4610      	mov	r0, r2
 800256c:	f000 fa6a 	bl	8002a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d001      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e035      	b.n	8002650 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a16      	ldr	r2, [pc, #88]	; (800265c <HAL_TIM_Base_Start_IT+0x90>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_TIM_Base_Start_IT+0x4e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260e:	d004      	beq.n	800261a <HAL_TIM_Base_Start_IT+0x4e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a12      	ldr	r2, [pc, #72]	; (8002660 <HAL_TIM_Base_Start_IT+0x94>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d111      	bne.n	800263e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b06      	cmp	r3, #6
 800262a:	d010      	beq.n	800264e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263c:	e007      	b.n	800264e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400

08002664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b02      	cmp	r3, #2
 8002678:	d122      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b02      	cmp	r3, #2
 8002686:	d11b      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0202 	mvn.w	r2, #2
 8002690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f9b1 	bl	8002a0e <HAL_TIM_IC_CaptureCallback>
 80026ac:	e005      	b.n	80026ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f9a4 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f9b3 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d122      	bne.n	8002714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d11b      	bne.n	8002714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0204 	mvn.w	r2, #4
 80026e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f987 	bl	8002a0e <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f97a 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f989 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b08      	cmp	r3, #8
 8002720:	d122      	bne.n	8002768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b08      	cmp	r3, #8
 800272e:	d11b      	bne.n	8002768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0208 	mvn.w	r2, #8
 8002738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2204      	movs	r2, #4
 800273e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f95d 	bl	8002a0e <HAL_TIM_IC_CaptureCallback>
 8002754:	e005      	b.n	8002762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f950 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f95f 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b10      	cmp	r3, #16
 8002774:	d122      	bne.n	80027bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b10      	cmp	r3, #16
 8002782:	d11b      	bne.n	80027bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0210 	mvn.w	r2, #16
 800278c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2208      	movs	r2, #8
 8002792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f933 	bl	8002a0e <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f926 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f935 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d10e      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d107      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0201 	mvn.w	r2, #1
 80027e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe fe40 	bl	8001468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f2:	2b80      	cmp	r3, #128	; 0x80
 80027f4:	d10e      	bne.n	8002814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	d107      	bne.n	8002814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa67 	bl	8002ce2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	d10e      	bne.n	8002840 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	d107      	bne.n	8002840 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f8f9 	bl	8002a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b20      	cmp	r3, #32
 800284c:	d10e      	bne.n	800286c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b20      	cmp	r3, #32
 800285a:	d107      	bne.n	800286c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0220 	mvn.w	r2, #32
 8002864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fa32 	bl	8002cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_TIM_ConfigClockSource+0x18>
 8002888:	2302      	movs	r3, #2
 800288a:	e0b3      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x180>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c4:	d03e      	beq.n	8002944 <HAL_TIM_ConfigClockSource+0xd0>
 80028c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ca:	f200 8087 	bhi.w	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d2:	f000 8085 	beq.w	80029e0 <HAL_TIM_ConfigClockSource+0x16c>
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028da:	d87f      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028dc:	2b70      	cmp	r3, #112	; 0x70
 80028de:	d01a      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0xa2>
 80028e0:	2b70      	cmp	r3, #112	; 0x70
 80028e2:	d87b      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028e4:	2b60      	cmp	r3, #96	; 0x60
 80028e6:	d050      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x116>
 80028e8:	2b60      	cmp	r3, #96	; 0x60
 80028ea:	d877      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028ec:	2b50      	cmp	r3, #80	; 0x50
 80028ee:	d03c      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xf6>
 80028f0:	2b50      	cmp	r3, #80	; 0x50
 80028f2:	d873      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028f4:	2b40      	cmp	r3, #64	; 0x40
 80028f6:	d058      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x136>
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d86f      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028fc:	2b30      	cmp	r3, #48	; 0x30
 80028fe:	d064      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x156>
 8002900:	2b30      	cmp	r3, #48	; 0x30
 8002902:	d86b      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 8002904:	2b20      	cmp	r3, #32
 8002906:	d060      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x156>
 8002908:	2b20      	cmp	r3, #32
 800290a:	d867      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 800290c:	2b00      	cmp	r3, #0
 800290e:	d05c      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x156>
 8002910:	2b10      	cmp	r3, #16
 8002912:	d05a      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002914:	e062      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6899      	ldr	r1, [r3, #8]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f000 f95c 	bl	8002be2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002938:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	609a      	str	r2, [r3, #8]
      break;
 8002942:	e04e      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6899      	ldr	r1, [r3, #8]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f000 f945 	bl	8002be2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002966:	609a      	str	r2, [r3, #8]
      break;
 8002968:	e03b      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6859      	ldr	r1, [r3, #4]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	461a      	mov	r2, r3
 8002978:	f000 f8bc 	bl	8002af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2150      	movs	r1, #80	; 0x50
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f913 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 8002988:	e02b      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6859      	ldr	r1, [r3, #4]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	461a      	mov	r2, r3
 8002998:	f000 f8da 	bl	8002b50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2160      	movs	r1, #96	; 0x60
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f903 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 80029a8:	e01b      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f000 f89c 	bl	8002af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2140      	movs	r1, #64	; 0x40
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f8f3 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 80029c8:	e00b      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f000 f8ea 	bl	8002bae <TIM_ITRx_SetConfig>
        break;
 80029da:	e002      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029dc:	bf00      	nop
 80029de:	e000      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a25      	ldr	r2, [pc, #148]	; (8002aec <TIM_Base_SetConfig+0xa8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <TIM_Base_SetConfig+0x28>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a62:	d003      	beq.n	8002a6c <TIM_Base_SetConfig+0x28>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <TIM_Base_SetConfig+0xac>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d108      	bne.n	8002a7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <TIM_Base_SetConfig+0xa8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <TIM_Base_SetConfig+0x52>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d003      	beq.n	8002a96 <TIM_Base_SetConfig+0x52>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <TIM_Base_SetConfig+0xac>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d108      	bne.n	8002aa8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a07      	ldr	r2, [pc, #28]	; (8002aec <TIM_Base_SetConfig+0xa8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d103      	bne.n	8002adc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	615a      	str	r2, [r3, #20]
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40000400 	.word	0x40000400

08002af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f023 0201 	bic.w	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f023 030a 	bic.w	r3, r3, #10
 8002b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	621a      	str	r2, [r3, #32]
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f023 0210 	bic.w	r2, r3, #16
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	031b      	lsls	r3, r3, #12
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	621a      	str	r2, [r3, #32]
}
 8002ba4:	bf00      	nop
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f043 0307 	orr.w	r3, r3, #7
 8002bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	609a      	str	r2, [r3, #8]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b087      	sub	sp, #28
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	021a      	lsls	r2, r3, #8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	609a      	str	r2, [r3, #8]
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e041      	b.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d004      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10c      	bne.n	8002caa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	40000400 	.word	0x40000400

08002cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <__libc_init_array>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	2600      	movs	r6, #0
 8002cf8:	4d0c      	ldr	r5, [pc, #48]	; (8002d2c <__libc_init_array+0x38>)
 8002cfa:	4c0d      	ldr	r4, [pc, #52]	; (8002d30 <__libc_init_array+0x3c>)
 8002cfc:	1b64      	subs	r4, r4, r5
 8002cfe:	10a4      	asrs	r4, r4, #2
 8002d00:	42a6      	cmp	r6, r4
 8002d02:	d109      	bne.n	8002d18 <__libc_init_array+0x24>
 8002d04:	f000 f822 	bl	8002d4c <_init>
 8002d08:	2600      	movs	r6, #0
 8002d0a:	4d0a      	ldr	r5, [pc, #40]	; (8002d34 <__libc_init_array+0x40>)
 8002d0c:	4c0a      	ldr	r4, [pc, #40]	; (8002d38 <__libc_init_array+0x44>)
 8002d0e:	1b64      	subs	r4, r4, r5
 8002d10:	10a4      	asrs	r4, r4, #2
 8002d12:	42a6      	cmp	r6, r4
 8002d14:	d105      	bne.n	8002d22 <__libc_init_array+0x2e>
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d1c:	4798      	blx	r3
 8002d1e:	3601      	adds	r6, #1
 8002d20:	e7ee      	b.n	8002d00 <__libc_init_array+0xc>
 8002d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d26:	4798      	blx	r3
 8002d28:	3601      	adds	r6, #1
 8002d2a:	e7f2      	b.n	8002d12 <__libc_init_array+0x1e>
 8002d2c:	08002d84 	.word	0x08002d84
 8002d30:	08002d84 	.word	0x08002d84
 8002d34:	08002d84 	.word	0x08002d84
 8002d38:	08002d88 	.word	0x08002d88

08002d3c <memset>:
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4402      	add	r2, r0
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d100      	bne.n	8002d46 <memset+0xa>
 8002d44:	4770      	bx	lr
 8002d46:	f803 1b01 	strb.w	r1, [r3], #1
 8002d4a:	e7f9      	b.n	8002d40 <memset+0x4>

08002d4c <_init>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr

08002d58 <_fini>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	bf00      	nop
 8002d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5e:	bc08      	pop	{r3}
 8002d60:	469e      	mov	lr, r3
 8002d62:	4770      	bx	lr
