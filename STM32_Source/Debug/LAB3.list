
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d2c  08002d2c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002d2c  08002d2c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d2c  08002d2c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000060  08002d94  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002d94  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008875  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ee  00000000  00000000  000288fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002acf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a44  00000000  00000000  0002b608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0ee  00000000  00000000  0004204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820d9  00000000  00000000  0004d13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf213  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002810  00000000  00000000  000cf264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cf4 	.word	0x08002cf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002cf4 	.word	0x08002cf4

0800014c <isButton1Pressed>:
int TimeOutForNoKeyPress = 1000;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000007c 	.word	0x2000007c

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000080 	.word	0x20000080

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000084 	.word	0x20000084

080001b8 <subKeyProcess>:

void subKeyProcess(int i){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d103      	bne.n	80001ce <subKeyProcess+0x16>
		button1_flag = 1;
 80001c6:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <subKeyProcess+0x3c>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
	else if(i == 1)
		button2_flag = 1;
	else if(i == 2)
		button3_flag = 1;
}
 80001cc:	e00c      	b.n	80001e8 <subKeyProcess+0x30>
	else if(i == 1)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d103      	bne.n	80001dc <subKeyProcess+0x24>
		button2_flag = 1;
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <subKeyProcess+0x40>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	e005      	b.n	80001e8 <subKeyProcess+0x30>
	else if(i == 2)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b02      	cmp	r3, #2
 80001e0:	d102      	bne.n	80001e8 <subKeyProcess+0x30>
		button3_flag = 1;
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <subKeyProcess+0x44>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	601a      	str	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	2000007c 	.word	0x2000007c
 80001f8:	20000080 	.word	0x20000080
 80001fc:	20000084 	.word	0x20000084

08000200 <getKeyInput>:

void getKeyInput(){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++){
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e08f      	b.n	800032c <getKeyInput+0x12c>
		KeyReg2[i] = KeyReg1[i];
 800020c:	4a4c      	ldr	r2, [pc, #304]	; (8000340 <getKeyInput+0x140>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	494b      	ldr	r1, [pc, #300]	; (8000344 <getKeyInput+0x144>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800021c:	4a4a      	ldr	r2, [pc, #296]	; (8000348 <getKeyInput+0x148>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4946      	ldr	r1, [pc, #280]	; (8000340 <getKeyInput+0x140>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ( i == 0) {
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d10a      	bne.n	8000248 <getKeyInput+0x48>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin);
 8000232:	2102      	movs	r1, #2
 8000234:	4845      	ldr	r0, [pc, #276]	; (800034c <getKeyInput+0x14c>)
 8000236:	f001 fd1d 	bl	8001c74 <HAL_GPIO_ReadPin>
 800023a:	4603      	mov	r3, r0
 800023c:	4619      	mov	r1, r3
 800023e:	4a42      	ldr	r2, [pc, #264]	; (8000348 <getKeyInput+0x148>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000246:	e01a      	b.n	800027e <getKeyInput+0x7e>
		}
		else if ( i == 1) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d10a      	bne.n	8000264 <getKeyInput+0x64>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUT2_GPIO_Port, BUT2_Pin);
 800024e:	2104      	movs	r1, #4
 8000250:	483e      	ldr	r0, [pc, #248]	; (800034c <getKeyInput+0x14c>)
 8000252:	f001 fd0f 	bl	8001c74 <HAL_GPIO_ReadPin>
 8000256:	4603      	mov	r3, r0
 8000258:	4619      	mov	r1, r3
 800025a:	4a3b      	ldr	r2, [pc, #236]	; (8000348 <getKeyInput+0x148>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000262:	e00c      	b.n	800027e <getKeyInput+0x7e>
		}
		else if ( i == 2) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b02      	cmp	r3, #2
 8000268:	d109      	bne.n	800027e <getKeyInput+0x7e>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUT3_GPIO_Port, BUT3_Pin);
 800026a:	2108      	movs	r1, #8
 800026c:	4837      	ldr	r0, [pc, #220]	; (800034c <getKeyInput+0x14c>)
 800026e:	f001 fd01 	bl	8001c74 <HAL_GPIO_ReadPin>
 8000272:	4603      	mov	r3, r0
 8000274:	4619      	mov	r1, r3
 8000276:	4a34      	ldr	r2, [pc, #208]	; (8000348 <getKeyInput+0x148>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800027e:	4a30      	ldr	r2, [pc, #192]	; (8000340 <getKeyInput+0x140>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000286:	4930      	ldr	r1, [pc, #192]	; (8000348 <getKeyInput+0x148>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028e:	429a      	cmp	r2, r3
 8000290:	d149      	bne.n	8000326 <getKeyInput+0x126>
 8000292:	4a2b      	ldr	r2, [pc, #172]	; (8000340 <getKeyInput+0x140>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029a:	492a      	ldr	r1, [pc, #168]	; (8000344 <getKeyInput+0x144>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d13f      	bne.n	8000326 <getKeyInput+0x126>
			if (KeyReg2[i] != KeyReg3[i]){
 80002a6:	4a27      	ldr	r2, [pc, #156]	; (8000344 <getKeyInput+0x144>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ae:	4928      	ldr	r1, [pc, #160]	; (8000350 <getKeyInput+0x150>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d017      	beq.n	80002ea <getKeyInput+0xea>
			  KeyReg3[i] = KeyReg2[i];
 80002ba:	4a22      	ldr	r2, [pc, #136]	; (8000344 <getKeyInput+0x144>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c2:	4923      	ldr	r1, [pc, #140]	; (8000350 <getKeyInput+0x150>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			  if (KeyReg2[i] == PRESSED_STATE){
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <getKeyInput+0x144>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d127      	bne.n	8000326 <getKeyInput+0x126>

				subKeyProcess(i);
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f7ff ff6e 	bl	80001b8 <subKeyProcess>

				TimeOutForKeyPress[i] = 300; // note: not need for step 1
 80002dc:	4a1d      	ldr	r2, [pc, #116]	; (8000354 <getKeyInput+0x154>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002e8:	e01d      	b.n	8000326 <getKeyInput+0x126>
				//One pressed
			  }
			}else{
			   TimeOutForKeyPress[i] --;
 80002ea:	4a1a      	ldr	r2, [pc, #104]	; (8000354 <getKeyInput+0x154>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f2:	1e5a      	subs	r2, r3, #1
 80002f4:	4917      	ldr	r1, [pc, #92]	; (8000354 <getKeyInput+0x154>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 80002fc:	4a15      	ldr	r2, [pc, #84]	; (8000354 <getKeyInput+0x154>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d10e      	bne.n	8000326 <getKeyInput+0x126>
				  if (KeyReg2[i] == PRESSED_STATE){
 8000308:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <getKeyInput+0x144>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <getKeyInput+0x11a>
					  subKeyProcess(i);
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f7ff ff4f 	bl	80001b8 <subKeyProcess>
				  }
				  //Long pressed

				  TimeOutForKeyPress[i] = 300;
 800031a:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <getKeyInput+0x154>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3301      	adds	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b02      	cmp	r3, #2
 8000330:	f77f af6c 	ble.w	800020c <getKeyInput+0xc>
				}
		    }
		}
	}
}
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000000c 	.word	0x2000000c
 8000344:	20000018 	.word	0x20000018
 8000348:	20000000 	.word	0x20000000
 800034c:	40010800 	.word	0x40010800
 8000350:	20000024 	.word	0x20000024
 8000354:	20000030 	.word	0x20000030

08000358 <fsm_run>:
int tempYELLOW = 0;
int tempGREEN = 0;
int dis1 = 10;
int dis2 = 10;

void fsm_run() {
 8000358:	b5b0      	push	{r4, r5, r7, lr}
 800035a:	af00      	add	r7, sp, #0
	switch (state) {
 800035c:	4ba4      	ldr	r3, [pc, #656]	; (80005f0 <fsm_run+0x298>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b04      	cmp	r3, #4
 8000362:	f200 8345 	bhi.w	80009f0 <fsm_run+0x698>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <fsm_run+0x14>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	08000381 	.word	0x08000381
 8000370:	080003fd 	.word	0x080003fd
 8000374:	08000705 	.word	0x08000705
 8000378:	080007ed 	.word	0x080007ed
 800037c:	08000909 	.word	0x08000909
	case RESET:
		setTimer0(1000);
 8000380:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000384:	f001 f856 	bl	8001434 <setTimer0>
		setTimer1(1000);
 8000388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038c:	f001 f86c 	bl	8001468 <setTimer1>

		tempRED = timeRED;
 8000390:	4b98      	ldr	r3, [pc, #608]	; (80005f4 <fsm_run+0x29c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a98      	ldr	r2, [pc, #608]	; (80005f8 <fsm_run+0x2a0>)
 8000396:	6013      	str	r3, [r2, #0]
		tempYELLOW = timeYELLOW;
 8000398:	4b98      	ldr	r3, [pc, #608]	; (80005fc <fsm_run+0x2a4>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a98      	ldr	r2, [pc, #608]	; (8000600 <fsm_run+0x2a8>)
 800039e:	6013      	str	r3, [r2, #0]
		tempGREEN = timeGREEN;
 80003a0:	4b98      	ldr	r3, [pc, #608]	; (8000604 <fsm_run+0x2ac>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a98      	ldr	r2, [pc, #608]	; (8000608 <fsm_run+0x2b0>)
 80003a6:	6013      	str	r3, [r2, #0]

		counter1 = 0;
 80003a8:	4b98      	ldr	r3, [pc, #608]	; (800060c <fsm_run+0x2b4>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
		counter2 = 0;
 80003ae:	4b98      	ldr	r3, [pc, #608]	; (8000610 <fsm_run+0x2b8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	2110      	movs	r1, #16
 80003b8:	4896      	ldr	r0, [pc, #600]	; (8000614 <fsm_run+0x2bc>)
 80003ba:	f001 fc72 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80003be:	2201      	movs	r2, #1
 80003c0:	2140      	movs	r1, #64	; 0x40
 80003c2:	4894      	ldr	r0, [pc, #592]	; (8000614 <fsm_run+0x2bc>)
 80003c4:	f001 fc6d 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2120      	movs	r1, #32
 80003cc:	4891      	ldr	r0, [pc, #580]	; (8000614 <fsm_run+0x2bc>)
 80003ce:	f001 fc68 	bl	8001ca2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	488f      	ldr	r0, [pc, #572]	; (8000614 <fsm_run+0x2bc>)
 80003d8:	f001 fc63 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e2:	488c      	ldr	r0, [pc, #560]	; (8000614 <fsm_run+0x2bc>)
 80003e4:	f001 fc5d 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ee:	4889      	ldr	r0, [pc, #548]	; (8000614 <fsm_run+0x2bc>)
 80003f0:	f001 fc57 	bl	8001ca2 <HAL_GPIO_WritePin>

		state = MODE_1;
 80003f4:	4b7e      	ldr	r3, [pc, #504]	; (80005f0 <fsm_run+0x298>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	601a      	str	r2, [r3, #0]
		break;
 80003fa:	e302      	b.n	8000a02 <fsm_run+0x6aa>
	case MODE_1:

		setTimer1(1000);
 80003fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000400:	f001 f832 	bl	8001468 <setTimer1>
		updateClockBuffer(dis1/10, dis1%10, dis2/10, dis2%10);
 8000404:	4b84      	ldr	r3, [pc, #528]	; (8000618 <fsm_run+0x2c0>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a84      	ldr	r2, [pc, #528]	; (800061c <fsm_run+0x2c4>)
 800040a:	fb82 1203 	smull	r1, r2, r2, r3
 800040e:	1092      	asrs	r2, r2, #2
 8000410:	17db      	asrs	r3, r3, #31
 8000412:	1ad4      	subs	r4, r2, r3
 8000414:	4b80      	ldr	r3, [pc, #512]	; (8000618 <fsm_run+0x2c0>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b80      	ldr	r3, [pc, #512]	; (800061c <fsm_run+0x2c4>)
 800041a:	fb83 1302 	smull	r1, r3, r3, r2
 800041e:	1099      	asrs	r1, r3, #2
 8000420:	17d3      	asrs	r3, r2, #31
 8000422:	1ac9      	subs	r1, r1, r3
 8000424:	460b      	mov	r3, r1
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	440b      	add	r3, r1
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	1ad1      	subs	r1, r2, r3
 800042e:	4b7c      	ldr	r3, [pc, #496]	; (8000620 <fsm_run+0x2c8>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a7a      	ldr	r2, [pc, #488]	; (800061c <fsm_run+0x2c4>)
 8000434:	fb82 0203 	smull	r0, r2, r2, r3
 8000438:	1092      	asrs	r2, r2, #2
 800043a:	17db      	asrs	r3, r3, #31
 800043c:	1ad5      	subs	r5, r2, r3
 800043e:	4b78      	ldr	r3, [pc, #480]	; (8000620 <fsm_run+0x2c8>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	4b76      	ldr	r3, [pc, #472]	; (800061c <fsm_run+0x2c4>)
 8000444:	fb83 0302 	smull	r0, r3, r3, r2
 8000448:	1098      	asrs	r0, r3, #2
 800044a:	17d3      	asrs	r3, r2, #31
 800044c:	1ac0      	subs	r0, r0, r3
 800044e:	4603      	mov	r3, r0
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4403      	add	r3, r0
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	1ad0      	subs	r0, r2, r3
 8000458:	4603      	mov	r3, r0
 800045a:	462a      	mov	r2, r5
 800045c:	4620      	mov	r0, r4
 800045e:	f000 fe39 	bl	80010d4 <updateClockBuffer>

		if(timer1_flag == 1){
 8000462:	4b70      	ldr	r3, [pc, #448]	; (8000624 <fsm_run+0x2cc>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b01      	cmp	r3, #1
 8000468:	f040 8119 	bne.w	800069e <fsm_run+0x346>
			counter1++;
 800046c:	4b67      	ldr	r3, [pc, #412]	; (800060c <fsm_run+0x2b4>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	3301      	adds	r3, #1
 8000472:	4a66      	ldr	r2, [pc, #408]	; (800060c <fsm_run+0x2b4>)
 8000474:	6013      	str	r3, [r2, #0]
			counter2++;
 8000476:	4b66      	ldr	r3, [pc, #408]	; (8000610 <fsm_run+0x2b8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3301      	adds	r3, #1
 800047c:	4a64      	ldr	r2, [pc, #400]	; (8000610 <fsm_run+0x2b8>)
 800047e:	6013      	str	r3, [r2, #0]

			if(counter1 <= timeRED){
 8000480:	4b62      	ldr	r3, [pc, #392]	; (800060c <fsm_run+0x2b4>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	4b5b      	ldr	r3, [pc, #364]	; (80005f4 <fsm_run+0x29c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	429a      	cmp	r2, r3
 800048a:	dc16      	bgt.n	80004ba <fsm_run+0x162>
				dis1 = timeRED - counter1;
 800048c:	4b59      	ldr	r3, [pc, #356]	; (80005f4 <fsm_run+0x29c>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	4b5e      	ldr	r3, [pc, #376]	; (800060c <fsm_run+0x2b4>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	4a60      	ldr	r2, [pc, #384]	; (8000618 <fsm_run+0x2c0>)
 8000498:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2110      	movs	r1, #16
 800049e:	485d      	ldr	r0, [pc, #372]	; (8000614 <fsm_run+0x2bc>)
 80004a0:	f001 fbff 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2140      	movs	r1, #64	; 0x40
 80004a8:	485a      	ldr	r0, [pc, #360]	; (8000614 <fsm_run+0x2bc>)
 80004aa:	f001 fbfa 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2120      	movs	r1, #32
 80004b2:	4858      	ldr	r0, [pc, #352]	; (8000614 <fsm_run+0x2bc>)
 80004b4:	f001 fbf5 	bl	8001ca2 <HAL_GPIO_WritePin>
 80004b8:	e04a      	b.n	8000550 <fsm_run+0x1f8>
			}
			else if(counter1 <= timeRED + timeYELLOW){
 80004ba:	4b4e      	ldr	r3, [pc, #312]	; (80005f4 <fsm_run+0x29c>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	4b4f      	ldr	r3, [pc, #316]	; (80005fc <fsm_run+0x2a4>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	441a      	add	r2, r3
 80004c4:	4b51      	ldr	r3, [pc, #324]	; (800060c <fsm_run+0x2b4>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	db19      	blt.n	8000500 <fsm_run+0x1a8>
				dis1 = timeRED + timeYELLOW - counter1;
 80004cc:	4b49      	ldr	r3, [pc, #292]	; (80005f4 <fsm_run+0x29c>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b4a      	ldr	r3, [pc, #296]	; (80005fc <fsm_run+0x2a4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	441a      	add	r2, r3
 80004d6:	4b4d      	ldr	r3, [pc, #308]	; (800060c <fsm_run+0x2b4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	4a4e      	ldr	r2, [pc, #312]	; (8000618 <fsm_run+0x2c0>)
 80004de:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	484b      	ldr	r0, [pc, #300]	; (8000614 <fsm_run+0x2bc>)
 80004e6:	f001 fbdc 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2140      	movs	r1, #64	; 0x40
 80004ee:	4849      	ldr	r0, [pc, #292]	; (8000614 <fsm_run+0x2bc>)
 80004f0:	f001 fbd7 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2120      	movs	r1, #32
 80004f8:	4846      	ldr	r0, [pc, #280]	; (8000614 <fsm_run+0x2bc>)
 80004fa:	f001 fbd2 	bl	8001ca2 <HAL_GPIO_WritePin>
 80004fe:	e027      	b.n	8000550 <fsm_run+0x1f8>
			}
			else if(counter1 <= timeRED + timeYELLOW + timeGREEN){
 8000500:	4b3c      	ldr	r3, [pc, #240]	; (80005f4 <fsm_run+0x29c>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <fsm_run+0x2a4>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	441a      	add	r2, r3
 800050a:	4b3e      	ldr	r3, [pc, #248]	; (8000604 <fsm_run+0x2ac>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	441a      	add	r2, r3
 8000510:	4b3e      	ldr	r3, [pc, #248]	; (800060c <fsm_run+0x2b4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	429a      	cmp	r2, r3
 8000516:	db1b      	blt.n	8000550 <fsm_run+0x1f8>
				dis1 = timeRED + timeYELLOW + timeGREEN - counter1;
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <fsm_run+0x29c>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b37      	ldr	r3, [pc, #220]	; (80005fc <fsm_run+0x2a4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	441a      	add	r2, r3
 8000522:	4b38      	ldr	r3, [pc, #224]	; (8000604 <fsm_run+0x2ac>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	441a      	add	r2, r3
 8000528:	4b38      	ldr	r3, [pc, #224]	; (800060c <fsm_run+0x2b4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	4a3a      	ldr	r2, [pc, #232]	; (8000618 <fsm_run+0x2c0>)
 8000530:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000532:	2201      	movs	r2, #1
 8000534:	2110      	movs	r1, #16
 8000536:	4837      	ldr	r0, [pc, #220]	; (8000614 <fsm_run+0x2bc>)
 8000538:	f001 fbb3 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	4834      	ldr	r0, [pc, #208]	; (8000614 <fsm_run+0x2bc>)
 8000542:	f001 fbae 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	4832      	ldr	r0, [pc, #200]	; (8000614 <fsm_run+0x2bc>)
 800054c:	f001 fba9 	bl	8001ca2 <HAL_GPIO_WritePin>
			}
			if(counter1 >= timeRED + timeYELLOW + timeGREEN) counter1 = 0;
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <fsm_run+0x29c>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b29      	ldr	r3, [pc, #164]	; (80005fc <fsm_run+0x2a4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	441a      	add	r2, r3
 800055a:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <fsm_run+0x2ac>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	441a      	add	r2, r3
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <fsm_run+0x2b4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	429a      	cmp	r2, r3
 8000566:	dc02      	bgt.n	800056e <fsm_run+0x216>
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <fsm_run+0x2b4>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]

			if(counter2 <= timeYELLOW){
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <fsm_run+0x2b8>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <fsm_run+0x2a4>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	429a      	cmp	r2, r3
 8000578:	dc16      	bgt.n	80005a8 <fsm_run+0x250>
				dis2 = timeYELLOW - counter2;
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <fsm_run+0x2a4>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b24      	ldr	r3, [pc, #144]	; (8000610 <fsm_run+0x2b8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	4a26      	ldr	r2, [pc, #152]	; (8000620 <fsm_run+0x2c8>)
 8000586:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2110      	movs	r1, #16
 800058c:	4821      	ldr	r0, [pc, #132]	; (8000614 <fsm_run+0x2bc>)
 800058e:	f001 fb88 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	481f      	ldr	r0, [pc, #124]	; (8000614 <fsm_run+0x2bc>)
 8000598:	f001 fb83 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	481c      	ldr	r0, [pc, #112]	; (8000614 <fsm_run+0x2bc>)
 80005a2:	f001 fb7e 	bl	8001ca2 <HAL_GPIO_WritePin>
 80005a6:	e067      	b.n	8000678 <fsm_run+0x320>
			}
			else if(counter2 <= timeGREEN + timeYELLOW){
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <fsm_run+0x2ac>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <fsm_run+0x2a4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	441a      	add	r2, r3
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <fsm_run+0x2b8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	db36      	blt.n	8000628 <fsm_run+0x2d0>
				dis2 = timeGREEN + timeYELLOW - counter2;
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <fsm_run+0x2ac>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <fsm_run+0x2a4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	441a      	add	r2, r3
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <fsm_run+0x2b8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <fsm_run+0x2c8>)
 80005cc:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2110      	movs	r1, #16
 80005d2:	4810      	ldr	r0, [pc, #64]	; (8000614 <fsm_run+0x2bc>)
 80005d4:	f001 fb65 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2140      	movs	r1, #64	; 0x40
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <fsm_run+0x2bc>)
 80005de:	f001 fb60 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <fsm_run+0x2bc>)
 80005e8:	f001 fb5b 	bl	8001ca2 <HAL_GPIO_WritePin>
 80005ec:	e044      	b.n	8000678 <fsm_run+0x320>
 80005ee:	bf00      	nop
 80005f0:	2000009c 	.word	0x2000009c
 80005f4:	20000044 	.word	0x20000044
 80005f8:	20000090 	.word	0x20000090
 80005fc:	2000004c 	.word	0x2000004c
 8000600:	20000094 	.word	0x20000094
 8000604:	20000048 	.word	0x20000048
 8000608:	20000098 	.word	0x20000098
 800060c:	20000088 	.word	0x20000088
 8000610:	2000008c 	.word	0x2000008c
 8000614:	40010800 	.word	0x40010800
 8000618:	2000003c 	.word	0x2000003c
 800061c:	66666667 	.word	0x66666667
 8000620:	20000040 	.word	0x20000040
 8000624:	20000104 	.word	0x20000104
			}
			else if(counter2 <= timeRED + timeYELLOW + timeGREEN){
 8000628:	4bab      	ldr	r3, [pc, #684]	; (80008d8 <fsm_run+0x580>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4bab      	ldr	r3, [pc, #684]	; (80008dc <fsm_run+0x584>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	441a      	add	r2, r3
 8000632:	4bab      	ldr	r3, [pc, #684]	; (80008e0 <fsm_run+0x588>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	441a      	add	r2, r3
 8000638:	4baa      	ldr	r3, [pc, #680]	; (80008e4 <fsm_run+0x58c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	429a      	cmp	r2, r3
 800063e:	db1b      	blt.n	8000678 <fsm_run+0x320>
				dis2 = timeRED + timeYELLOW + timeGREEN - counter2;
 8000640:	4ba5      	ldr	r3, [pc, #660]	; (80008d8 <fsm_run+0x580>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4ba5      	ldr	r3, [pc, #660]	; (80008dc <fsm_run+0x584>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	441a      	add	r2, r3
 800064a:	4ba5      	ldr	r3, [pc, #660]	; (80008e0 <fsm_run+0x588>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	441a      	add	r2, r3
 8000650:	4ba4      	ldr	r3, [pc, #656]	; (80008e4 <fsm_run+0x58c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	4aa4      	ldr	r2, [pc, #656]	; (80008e8 <fsm_run+0x590>)
 8000658:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2110      	movs	r1, #16
 800065e:	48a3      	ldr	r0, [pc, #652]	; (80008ec <fsm_run+0x594>)
 8000660:	f001 fb1f 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	48a0      	ldr	r0, [pc, #640]	; (80008ec <fsm_run+0x594>)
 800066a:	f001 fb1a 	bl	8001ca2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2120      	movs	r1, #32
 8000672:	489e      	ldr	r0, [pc, #632]	; (80008ec <fsm_run+0x594>)
 8000674:	f001 fb15 	bl	8001ca2 <HAL_GPIO_WritePin>
			}
			if(counter2 >= timeRED + timeYELLOW + timeGREEN) counter2 = 0;
 8000678:	4b97      	ldr	r3, [pc, #604]	; (80008d8 <fsm_run+0x580>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b97      	ldr	r3, [pc, #604]	; (80008dc <fsm_run+0x584>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	441a      	add	r2, r3
 8000682:	4b97      	ldr	r3, [pc, #604]	; (80008e0 <fsm_run+0x588>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	441a      	add	r2, r3
 8000688:	4b96      	ldr	r3, [pc, #600]	; (80008e4 <fsm_run+0x58c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	dc02      	bgt.n	8000696 <fsm_run+0x33e>
 8000690:	4b94      	ldr	r3, [pc, #592]	; (80008e4 <fsm_run+0x58c>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069a:	f000 fee5 	bl	8001468 <setTimer1>
		}

		if (isButton1Pressed() == 1) {
 800069e:	f7ff fd55 	bl	800014c <isButton1Pressed>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	f040 81a5 	bne.w	80009f4 <fsm_run+0x69c>
			setTimer2(250);
 80006aa:	20fa      	movs	r0, #250	; 0xfa
 80006ac:	f000 fef6 	bl	800149c <setTimer2>

			counter1 = 0;
 80006b0:	4b8f      	ldr	r3, [pc, #572]	; (80008f0 <fsm_run+0x598>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
			counter2 = 0;
 80006b6:	4b8b      	ldr	r3, [pc, #556]	; (80008e4 <fsm_run+0x58c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]

			state = MODE_2;
 80006bc:	4b8d      	ldr	r3, [pc, #564]	; (80008f4 <fsm_run+0x59c>)
 80006be:	2202      	movs	r2, #2
 80006c0:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2110      	movs	r1, #16
 80006c6:	4889      	ldr	r0, [pc, #548]	; (80008ec <fsm_run+0x594>)
 80006c8:	f001 faeb 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4886      	ldr	r0, [pc, #536]	; (80008ec <fsm_run+0x594>)
 80006d2:	f001 fae6 	bl	8001ca2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2120      	movs	r1, #32
 80006da:	4884      	ldr	r0, [pc, #528]	; (80008ec <fsm_run+0x594>)
 80006dc:	f001 fae1 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e6:	4881      	ldr	r0, [pc, #516]	; (80008ec <fsm_run+0x594>)
 80006e8:	f001 fadb 	bl	8001ca2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2140      	movs	r1, #64	; 0x40
 80006f0:	487e      	ldr	r0, [pc, #504]	; (80008ec <fsm_run+0x594>)
 80006f2:	f001 fad6 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fc:	487b      	ldr	r0, [pc, #492]	; (80008ec <fsm_run+0x594>)
 80006fe:	f001 fad0 	bl	8001ca2 <HAL_GPIO_WritePin>
		}
		break;
 8000702:	e177      	b.n	80009f4 <fsm_run+0x69c>
	case MODE_2:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 8000704:	4b7c      	ldr	r3, [pc, #496]	; (80008f8 <fsm_run+0x5a0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a7c      	ldr	r2, [pc, #496]	; (80008fc <fsm_run+0x5a4>)
 800070a:	fb82 1203 	smull	r1, r2, r2, r3
 800070e:	1092      	asrs	r2, r2, #2
 8000710:	17db      	asrs	r3, r3, #31
 8000712:	1ad0      	subs	r0, r2, r3
 8000714:	4b78      	ldr	r3, [pc, #480]	; (80008f8 <fsm_run+0x5a0>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b78      	ldr	r3, [pc, #480]	; (80008fc <fsm_run+0x5a4>)
 800071a:	fb83 1302 	smull	r1, r3, r3, r2
 800071e:	1099      	asrs	r1, r3, #2
 8000720:	17d3      	asrs	r3, r2, #31
 8000722:	1ac9      	subs	r1, r1, r3
 8000724:	460b      	mov	r3, r1
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	440b      	add	r3, r1
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	1ad1      	subs	r1, r2, r3
 800072e:	460b      	mov	r3, r1
 8000730:	4602      	mov	r2, r0
 8000732:	2102      	movs	r1, #2
 8000734:	2000      	movs	r0, #0
 8000736:	f000 fccd 	bl	80010d4 <updateClockBuffer>

		if (timer2_flag == 1) {
 800073a:	4b71      	ldr	r3, [pc, #452]	; (8000900 <fsm_run+0x5a8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d10a      	bne.n	8000758 <fsm_run+0x400>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000742:	2110      	movs	r1, #16
 8000744:	4869      	ldr	r0, [pc, #420]	; (80008ec <fsm_run+0x594>)
 8000746:	f001 fac4 	bl	8001cd2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	4867      	ldr	r0, [pc, #412]	; (80008ec <fsm_run+0x594>)
 800074e:	f001 fac0 	bl	8001cd2 <HAL_GPIO_TogglePin>
			setTimer2(250);
 8000752:	20fa      	movs	r0, #250	; 0xfa
 8000754:	f000 fea2 	bl	800149c <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000758:	f7ff fcf8 	bl	800014c <isButton1Pressed>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d125      	bne.n	80007ae <fsm_run+0x456>
			setTimer2(250);
 8000762:	20fa      	movs	r0, #250	; 0xfa
 8000764:	f000 fe9a 	bl	800149c <setTimer2>

			state = MODE_3;
 8000768:	4b62      	ldr	r3, [pc, #392]	; (80008f4 <fsm_run+0x59c>)
 800076a:	2203      	movs	r2, #3
 800076c:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	2110      	movs	r1, #16
 8000772:	485e      	ldr	r0, [pc, #376]	; (80008ec <fsm_run+0x594>)
 8000774:	f001 fa95 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	485b      	ldr	r0, [pc, #364]	; (80008ec <fsm_run+0x594>)
 800077e:	f001 fa90 	bl	8001ca2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2120      	movs	r1, #32
 8000786:	4859      	ldr	r0, [pc, #356]	; (80008ec <fsm_run+0x594>)
 8000788:	f001 fa8b 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000792:	4856      	ldr	r0, [pc, #344]	; (80008ec <fsm_run+0x594>)
 8000794:	f001 fa85 	bl	8001ca2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2140      	movs	r1, #64	; 0x40
 800079c:	4853      	ldr	r0, [pc, #332]	; (80008ec <fsm_run+0x594>)
 800079e:	f001 fa80 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a8:	4850      	ldr	r0, [pc, #320]	; (80008ec <fsm_run+0x594>)
 80007aa:	f001 fa7a 	bl	8001ca2 <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 80007ae:	f7ff fcdf 	bl	8000170 <isButton2Pressed>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d10e      	bne.n	80007d6 <fsm_run+0x47e>
			setTimer2(250);
 80007b8:	20fa      	movs	r0, #250	; 0xfa
 80007ba:	f000 fe6f 	bl	800149c <setTimer2>
			tempRED++;
 80007be:	4b4e      	ldr	r3, [pc, #312]	; (80008f8 <fsm_run+0x5a0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a4c      	ldr	r2, [pc, #304]	; (80008f8 <fsm_run+0x5a0>)
 80007c6:	6013      	str	r3, [r2, #0]
			if (tempRED >= 100) tempRED = 0;
 80007c8:	4b4b      	ldr	r3, [pc, #300]	; (80008f8 <fsm_run+0x5a0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b63      	cmp	r3, #99	; 0x63
 80007ce:	dd02      	ble.n	80007d6 <fsm_run+0x47e>
 80007d0:	4b49      	ldr	r3, [pc, #292]	; (80008f8 <fsm_run+0x5a0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 80007d6:	f7ff fcdd 	bl	8000194 <isButton3Pressed>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	f040 810b 	bne.w	80009f8 <fsm_run+0x6a0>
			timeRED = tempRED;
 80007e2:	4b45      	ldr	r3, [pc, #276]	; (80008f8 <fsm_run+0x5a0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a3c      	ldr	r2, [pc, #240]	; (80008d8 <fsm_run+0x580>)
 80007e8:	6013      	str	r3, [r2, #0]
		}
		break;
 80007ea:	e105      	b.n	80009f8 <fsm_run+0x6a0>
	case MODE_3:
		updateClockBuffer(0, 3, tempYELLOW/10, tempYELLOW%10);
 80007ec:	4b45      	ldr	r3, [pc, #276]	; (8000904 <fsm_run+0x5ac>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a42      	ldr	r2, [pc, #264]	; (80008fc <fsm_run+0x5a4>)
 80007f2:	fb82 1203 	smull	r1, r2, r2, r3
 80007f6:	1092      	asrs	r2, r2, #2
 80007f8:	17db      	asrs	r3, r3, #31
 80007fa:	1ad0      	subs	r0, r2, r3
 80007fc:	4b41      	ldr	r3, [pc, #260]	; (8000904 <fsm_run+0x5ac>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <fsm_run+0x5a4>)
 8000802:	fb83 1302 	smull	r1, r3, r3, r2
 8000806:	1099      	asrs	r1, r3, #2
 8000808:	17d3      	asrs	r3, r2, #31
 800080a:	1ac9      	subs	r1, r1, r3
 800080c:	460b      	mov	r3, r1
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	440b      	add	r3, r1
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	1ad1      	subs	r1, r2, r3
 8000816:	460b      	mov	r3, r1
 8000818:	4602      	mov	r2, r0
 800081a:	2103      	movs	r1, #3
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fc59 	bl	80010d4 <updateClockBuffer>

		if (timer2_flag == 1) {
 8000822:	4b37      	ldr	r3, [pc, #220]	; (8000900 <fsm_run+0x5a8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d10b      	bne.n	8000842 <fsm_run+0x4ea>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800082a:	2120      	movs	r1, #32
 800082c:	482f      	ldr	r0, [pc, #188]	; (80008ec <fsm_run+0x594>)
 800082e:	f001 fa50 	bl	8001cd2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 8000832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000836:	482d      	ldr	r0, [pc, #180]	; (80008ec <fsm_run+0x594>)
 8000838:	f001 fa4b 	bl	8001cd2 <HAL_GPIO_TogglePin>
			setTimer2(250);
 800083c:	20fa      	movs	r0, #250	; 0xfa
 800083e:	f000 fe2d 	bl	800149c <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000842:	f7ff fc83 	bl	800014c <isButton1Pressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d125      	bne.n	8000898 <fsm_run+0x540>
			setTimer2(250);
 800084c:	20fa      	movs	r0, #250	; 0xfa
 800084e:	f000 fe25 	bl	800149c <setTimer2>

			state = MODE_4;
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <fsm_run+0x59c>)
 8000854:	2204      	movs	r2, #4
 8000856:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2110      	movs	r1, #16
 800085c:	4823      	ldr	r0, [pc, #140]	; (80008ec <fsm_run+0x594>)
 800085e:	f001 fa20 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	4821      	ldr	r0, [pc, #132]	; (80008ec <fsm_run+0x594>)
 8000868:	f001 fa1b 	bl	8001ca2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2120      	movs	r1, #32
 8000870:	481e      	ldr	r0, [pc, #120]	; (80008ec <fsm_run+0x594>)
 8000872:	f001 fa16 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087c:	481b      	ldr	r0, [pc, #108]	; (80008ec <fsm_run+0x594>)
 800087e:	f001 fa10 	bl	8001ca2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	4819      	ldr	r0, [pc, #100]	; (80008ec <fsm_run+0x594>)
 8000888:	f001 fa0b 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000892:	4816      	ldr	r0, [pc, #88]	; (80008ec <fsm_run+0x594>)
 8000894:	f001 fa05 	bl	8001ca2 <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 8000898:	f7ff fc6a 	bl	8000170 <isButton2Pressed>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d10e      	bne.n	80008c0 <fsm_run+0x568>
			setTimer2(250);
 80008a2:	20fa      	movs	r0, #250	; 0xfa
 80008a4:	f000 fdfa 	bl	800149c <setTimer2>
			tempYELLOW++;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <fsm_run+0x5ac>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <fsm_run+0x5ac>)
 80008b0:	6013      	str	r3, [r2, #0]
			if (tempYELLOW >= 100) tempYELLOW = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <fsm_run+0x5ac>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b63      	cmp	r3, #99	; 0x63
 80008b8:	dd02      	ble.n	80008c0 <fsm_run+0x568>
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <fsm_run+0x5ac>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 80008c0:	f7ff fc68 	bl	8000194 <isButton3Pressed>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	f040 8098 	bne.w	80009fc <fsm_run+0x6a4>
			tempYELLOW = tempYELLOW;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <fsm_run+0x5ac>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <fsm_run+0x5ac>)
 80008d2:	6013      	str	r3, [r2, #0]
		}
		break;
 80008d4:	e092      	b.n	80009fc <fsm_run+0x6a4>
 80008d6:	bf00      	nop
 80008d8:	20000044 	.word	0x20000044
 80008dc:	2000004c 	.word	0x2000004c
 80008e0:	20000048 	.word	0x20000048
 80008e4:	2000008c 	.word	0x2000008c
 80008e8:	20000040 	.word	0x20000040
 80008ec:	40010800 	.word	0x40010800
 80008f0:	20000088 	.word	0x20000088
 80008f4:	2000009c 	.word	0x2000009c
 80008f8:	20000090 	.word	0x20000090
 80008fc:	66666667 	.word	0x66666667
 8000900:	2000010c 	.word	0x2000010c
 8000904:	20000094 	.word	0x20000094
	case MODE_4:
		updateClockBuffer(0, 4, tempGREEN/10, tempGREEN%10);
 8000908:	4b3f      	ldr	r3, [pc, #252]	; (8000a08 <fsm_run+0x6b0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a3f      	ldr	r2, [pc, #252]	; (8000a0c <fsm_run+0x6b4>)
 800090e:	fb82 1203 	smull	r1, r2, r2, r3
 8000912:	1092      	asrs	r2, r2, #2
 8000914:	17db      	asrs	r3, r3, #31
 8000916:	1ad0      	subs	r0, r2, r3
 8000918:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <fsm_run+0x6b0>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b3b      	ldr	r3, [pc, #236]	; (8000a0c <fsm_run+0x6b4>)
 800091e:	fb83 1302 	smull	r1, r3, r3, r2
 8000922:	1099      	asrs	r1, r3, #2
 8000924:	17d3      	asrs	r3, r2, #31
 8000926:	1ac9      	subs	r1, r1, r3
 8000928:	460b      	mov	r3, r1
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	440b      	add	r3, r1
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	1ad1      	subs	r1, r2, r3
 8000932:	460b      	mov	r3, r1
 8000934:	4602      	mov	r2, r0
 8000936:	2104      	movs	r1, #4
 8000938:	2000      	movs	r0, #0
 800093a:	f000 fbcb 	bl	80010d4 <updateClockBuffer>

		if (timer2_flag == 1) {
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <fsm_run+0x6b8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d10b      	bne.n	800095e <fsm_run+0x606>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000946:	2140      	movs	r1, #64	; 0x40
 8000948:	4832      	ldr	r0, [pc, #200]	; (8000a14 <fsm_run+0x6bc>)
 800094a:	f001 f9c2 	bl	8001cd2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 800094e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000952:	4830      	ldr	r0, [pc, #192]	; (8000a14 <fsm_run+0x6bc>)
 8000954:	f001 f9bd 	bl	8001cd2 <HAL_GPIO_TogglePin>
			setTimer2(250);
 8000958:	20fa      	movs	r0, #250	; 0xfa
 800095a:	f000 fd9f 	bl	800149c <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 800095e:	f7ff fbf5 	bl	800014c <isButton1Pressed>
 8000962:	4603      	mov	r3, r0
 8000964:	2b01      	cmp	r3, #1
 8000966:	d125      	bne.n	80009b4 <fsm_run+0x65c>
			setTimer2(250);
 8000968:	20fa      	movs	r0, #250	; 0xfa
 800096a:	f000 fd97 	bl	800149c <setTimer2>

			state = RESET;
 800096e:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <fsm_run+0x6c0>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2110      	movs	r1, #16
 8000978:	4826      	ldr	r0, [pc, #152]	; (8000a14 <fsm_run+0x6bc>)
 800097a:	f001 f992 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	4824      	ldr	r0, [pc, #144]	; (8000a14 <fsm_run+0x6bc>)
 8000984:	f001 f98d 	bl	8001ca2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2120      	movs	r1, #32
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <fsm_run+0x6bc>)
 800098e:	f001 f988 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000998:	481e      	ldr	r0, [pc, #120]	; (8000a14 <fsm_run+0x6bc>)
 800099a:	f001 f982 	bl	8001ca2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	481c      	ldr	r0, [pc, #112]	; (8000a14 <fsm_run+0x6bc>)
 80009a4:	f001 f97d 	bl	8001ca2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ae:	4819      	ldr	r0, [pc, #100]	; (8000a14 <fsm_run+0x6bc>)
 80009b0:	f001 f977 	bl	8001ca2 <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 80009b4:	f7ff fbdc 	bl	8000170 <isButton2Pressed>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d10e      	bne.n	80009dc <fsm_run+0x684>
			setTimer2(250);
 80009be:	20fa      	movs	r0, #250	; 0xfa
 80009c0:	f000 fd6c 	bl	800149c <setTimer2>
			tempGREEN++;
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <fsm_run+0x6b0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <fsm_run+0x6b0>)
 80009cc:	6013      	str	r3, [r2, #0]
			if (tempGREEN >= 100) tempGREEN = 0;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <fsm_run+0x6b0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b63      	cmp	r3, #99	; 0x63
 80009d4:	dd02      	ble.n	80009dc <fsm_run+0x684>
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <fsm_run+0x6b0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 80009dc:	f7ff fbda 	bl	8000194 <isButton3Pressed>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d10c      	bne.n	8000a00 <fsm_run+0x6a8>
			tempGREEN = tempGREEN;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <fsm_run+0x6b0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <fsm_run+0x6b0>)
 80009ec:	6013      	str	r3, [r2, #0]
		}
		break;
 80009ee:	e007      	b.n	8000a00 <fsm_run+0x6a8>
	default:
		break;
 80009f0:	bf00      	nop
 80009f2:	e006      	b.n	8000a02 <fsm_run+0x6aa>
		break;
 80009f4:	bf00      	nop
 80009f6:	e004      	b.n	8000a02 <fsm_run+0x6aa>
		break;
 80009f8:	bf00      	nop
 80009fa:	e002      	b.n	8000a02 <fsm_run+0x6aa>
		break;
 80009fc:	bf00      	nop
 80009fe:	e000      	b.n	8000a02 <fsm_run+0x6aa>
		break;
 8000a00:	bf00      	nop
	}
}
 8000a02:	bf00      	nop
 8000a04:	bdb0      	pop	{r4, r5, r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000098 	.word	0x20000098
 8000a0c:	66666667 	.word	0x66666667
 8000a10:	2000010c 	.word	0x2000010c
 8000a14:	40010800 	.word	0x40010800
 8000a18:	2000009c 	.word	0x2000009c

08000a1c <display7SEG>:
 *      Author: Admin
 */

#include "global.h"

void display7SEG(int num){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	switch(num){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b09      	cmp	r3, #9
 8000a28:	f200 8180 	bhi.w	8000d2c <display7SEG+0x310>
 8000a2c:	a201      	add	r2, pc, #4	; (adr r2, 8000a34 <display7SEG+0x18>)
 8000a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a32:	bf00      	nop
 8000a34:	08000a5d 	.word	0x08000a5d
 8000a38:	08000aa5 	.word	0x08000aa5
 8000a3c:	08000aed 	.word	0x08000aed
 8000a40:	08000b35 	.word	0x08000b35
 8000a44:	08000b7d 	.word	0x08000b7d
 8000a48:	08000bc5 	.word	0x08000bc5
 8000a4c:	08000c0d 	.word	0x08000c0d
 8000a50:	08000c55 	.word	0x08000c55
 8000a54:	08000c9d 	.word	0x08000c9d
 8000a58:	08000ce5 	.word	0x08000ce5
	case 0:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2101      	movs	r1, #1
 8000a60:	48b5      	ldr	r0, [pc, #724]	; (8000d38 <display7SEG+0x31c>)
 8000a62:	f001 f91e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000a66:	2200      	movs	r2, #0
 8000a68:	2102      	movs	r1, #2
 8000a6a:	48b3      	ldr	r0, [pc, #716]	; (8000d38 <display7SEG+0x31c>)
 8000a6c:	f001 f919 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000a70:	2200      	movs	r2, #0
 8000a72:	2104      	movs	r1, #4
 8000a74:	48b0      	ldr	r0, [pc, #704]	; (8000d38 <display7SEG+0x31c>)
 8000a76:	f001 f914 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	48ae      	ldr	r0, [pc, #696]	; (8000d38 <display7SEG+0x31c>)
 8000a80:	f001 f90f 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000a84:	2200      	movs	r2, #0
 8000a86:	2110      	movs	r1, #16
 8000a88:	48ab      	ldr	r0, [pc, #684]	; (8000d38 <display7SEG+0x31c>)
 8000a8a:	f001 f90a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	48a9      	ldr	r0, [pc, #676]	; (8000d38 <display7SEG+0x31c>)
 8000a94:	f001 f905 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2140      	movs	r1, #64	; 0x40
 8000a9c:	48a6      	ldr	r0, [pc, #664]	; (8000d38 <display7SEG+0x31c>)
 8000a9e:	f001 f900 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000aa2:	e144      	b.n	8000d2e <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	48a3      	ldr	r0, [pc, #652]	; (8000d38 <display7SEG+0x31c>)
 8000aaa:	f001 f8fa 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	48a1      	ldr	r0, [pc, #644]	; (8000d38 <display7SEG+0x31c>)
 8000ab4:	f001 f8f5 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2104      	movs	r1, #4
 8000abc:	489e      	ldr	r0, [pc, #632]	; (8000d38 <display7SEG+0x31c>)
 8000abe:	f001 f8f0 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	489c      	ldr	r0, [pc, #624]	; (8000d38 <display7SEG+0x31c>)
 8000ac8:	f001 f8eb 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000acc:	2201      	movs	r2, #1
 8000ace:	2110      	movs	r1, #16
 8000ad0:	4899      	ldr	r0, [pc, #612]	; (8000d38 <display7SEG+0x31c>)
 8000ad2:	f001 f8e6 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2120      	movs	r1, #32
 8000ada:	4897      	ldr	r0, [pc, #604]	; (8000d38 <display7SEG+0x31c>)
 8000adc:	f001 f8e1 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2140      	movs	r1, #64	; 0x40
 8000ae4:	4894      	ldr	r0, [pc, #592]	; (8000d38 <display7SEG+0x31c>)
 8000ae6:	f001 f8dc 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000aea:	e120      	b.n	8000d2e <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000aec:	2200      	movs	r2, #0
 8000aee:	2101      	movs	r1, #1
 8000af0:	4891      	ldr	r0, [pc, #580]	; (8000d38 <display7SEG+0x31c>)
 8000af2:	f001 f8d6 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000af6:	2200      	movs	r2, #0
 8000af8:	2102      	movs	r1, #2
 8000afa:	488f      	ldr	r0, [pc, #572]	; (8000d38 <display7SEG+0x31c>)
 8000afc:	f001 f8d1 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_SET ) ;
 8000b00:	2201      	movs	r2, #1
 8000b02:	2104      	movs	r1, #4
 8000b04:	488c      	ldr	r0, [pc, #560]	; (8000d38 <display7SEG+0x31c>)
 8000b06:	f001 f8cc 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	488a      	ldr	r0, [pc, #552]	; (8000d38 <display7SEG+0x31c>)
 8000b10:	f001 f8c7 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000b14:	2200      	movs	r2, #0
 8000b16:	2110      	movs	r1, #16
 8000b18:	4887      	ldr	r0, [pc, #540]	; (8000d38 <display7SEG+0x31c>)
 8000b1a:	f001 f8c2 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2120      	movs	r1, #32
 8000b22:	4885      	ldr	r0, [pc, #532]	; (8000d38 <display7SEG+0x31c>)
 8000b24:	f001 f8bd 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2140      	movs	r1, #64	; 0x40
 8000b2c:	4882      	ldr	r0, [pc, #520]	; (8000d38 <display7SEG+0x31c>)
 8000b2e:	f001 f8b8 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000b32:	e0fc      	b.n	8000d2e <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	487f      	ldr	r0, [pc, #508]	; (8000d38 <display7SEG+0x31c>)
 8000b3a:	f001 f8b2 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2102      	movs	r1, #2
 8000b42:	487d      	ldr	r0, [pc, #500]	; (8000d38 <display7SEG+0x31c>)
 8000b44:	f001 f8ad 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	487a      	ldr	r0, [pc, #488]	; (8000d38 <display7SEG+0x31c>)
 8000b4e:	f001 f8a8 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000b52:	2200      	movs	r2, #0
 8000b54:	2108      	movs	r1, #8
 8000b56:	4878      	ldr	r0, [pc, #480]	; (8000d38 <display7SEG+0x31c>)
 8000b58:	f001 f8a3 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4875      	ldr	r0, [pc, #468]	; (8000d38 <display7SEG+0x31c>)
 8000b62:	f001 f89e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000b66:	2201      	movs	r2, #1
 8000b68:	2120      	movs	r1, #32
 8000b6a:	4873      	ldr	r0, [pc, #460]	; (8000d38 <display7SEG+0x31c>)
 8000b6c:	f001 f899 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000b70:	2200      	movs	r2, #0
 8000b72:	2140      	movs	r1, #64	; 0x40
 8000b74:	4870      	ldr	r0, [pc, #448]	; (8000d38 <display7SEG+0x31c>)
 8000b76:	f001 f894 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000b7a:	e0d8      	b.n	8000d2e <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2101      	movs	r1, #1
 8000b80:	486d      	ldr	r0, [pc, #436]	; (8000d38 <display7SEG+0x31c>)
 8000b82:	f001 f88e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000b86:	2200      	movs	r2, #0
 8000b88:	2102      	movs	r1, #2
 8000b8a:	486b      	ldr	r0, [pc, #428]	; (8000d38 <display7SEG+0x31c>)
 8000b8c:	f001 f889 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000b90:	2200      	movs	r2, #0
 8000b92:	2104      	movs	r1, #4
 8000b94:	4868      	ldr	r0, [pc, #416]	; (8000d38 <display7SEG+0x31c>)
 8000b96:	f001 f884 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4866      	ldr	r0, [pc, #408]	; (8000d38 <display7SEG+0x31c>)
 8000ba0:	f001 f87f 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	4863      	ldr	r0, [pc, #396]	; (8000d38 <display7SEG+0x31c>)
 8000baa:	f001 f87a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	4861      	ldr	r0, [pc, #388]	; (8000d38 <display7SEG+0x31c>)
 8000bb4:	f001 f875 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	485e      	ldr	r0, [pc, #376]	; (8000d38 <display7SEG+0x31c>)
 8000bbe:	f001 f870 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000bc2:	e0b4      	b.n	8000d2e <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	485b      	ldr	r0, [pc, #364]	; (8000d38 <display7SEG+0x31c>)
 8000bca:	f001 f86a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4859      	ldr	r0, [pc, #356]	; (8000d38 <display7SEG+0x31c>)
 8000bd4:	f001 f865 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2104      	movs	r1, #4
 8000bdc:	4856      	ldr	r0, [pc, #344]	; (8000d38 <display7SEG+0x31c>)
 8000bde:	f001 f860 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000be2:	2200      	movs	r2, #0
 8000be4:	2108      	movs	r1, #8
 8000be6:	4854      	ldr	r0, [pc, #336]	; (8000d38 <display7SEG+0x31c>)
 8000be8:	f001 f85b 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000bec:	2201      	movs	r2, #1
 8000bee:	2110      	movs	r1, #16
 8000bf0:	4851      	ldr	r0, [pc, #324]	; (8000d38 <display7SEG+0x31c>)
 8000bf2:	f001 f856 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	484f      	ldr	r0, [pc, #316]	; (8000d38 <display7SEG+0x31c>)
 8000bfc:	f001 f851 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000c00:	2200      	movs	r2, #0
 8000c02:	2140      	movs	r1, #64	; 0x40
 8000c04:	484c      	ldr	r0, [pc, #304]	; (8000d38 <display7SEG+0x31c>)
 8000c06:	f001 f84c 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000c0a:	e090      	b.n	8000d2e <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4849      	ldr	r0, [pc, #292]	; (8000d38 <display7SEG+0x31c>)
 8000c12:	f001 f846 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000c16:	2201      	movs	r2, #1
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4847      	ldr	r0, [pc, #284]	; (8000d38 <display7SEG+0x31c>)
 8000c1c:	f001 f841 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000c20:	2200      	movs	r2, #0
 8000c22:	2104      	movs	r1, #4
 8000c24:	4844      	ldr	r0, [pc, #272]	; (8000d38 <display7SEG+0x31c>)
 8000c26:	f001 f83c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	4842      	ldr	r0, [pc, #264]	; (8000d38 <display7SEG+0x31c>)
 8000c30:	f001 f837 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000c34:	2200      	movs	r2, #0
 8000c36:	2110      	movs	r1, #16
 8000c38:	483f      	ldr	r0, [pc, #252]	; (8000d38 <display7SEG+0x31c>)
 8000c3a:	f001 f832 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	483d      	ldr	r0, [pc, #244]	; (8000d38 <display7SEG+0x31c>)
 8000c44:	f001 f82d 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2140      	movs	r1, #64	; 0x40
 8000c4c:	483a      	ldr	r0, [pc, #232]	; (8000d38 <display7SEG+0x31c>)
 8000c4e:	f001 f828 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000c52:	e06c      	b.n	8000d2e <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000c54:	2200      	movs	r2, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	4837      	ldr	r0, [pc, #220]	; (8000d38 <display7SEG+0x31c>)
 8000c5a:	f001 f822 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2102      	movs	r1, #2
 8000c62:	4835      	ldr	r0, [pc, #212]	; (8000d38 <display7SEG+0x31c>)
 8000c64:	f001 f81d 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	4832      	ldr	r0, [pc, #200]	; (8000d38 <display7SEG+0x31c>)
 8000c6e:	f001 f818 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000c72:	2201      	movs	r2, #1
 8000c74:	2108      	movs	r1, #8
 8000c76:	4830      	ldr	r0, [pc, #192]	; (8000d38 <display7SEG+0x31c>)
 8000c78:	f001 f813 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2110      	movs	r1, #16
 8000c80:	482d      	ldr	r0, [pc, #180]	; (8000d38 <display7SEG+0x31c>)
 8000c82:	f001 f80e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000c86:	2201      	movs	r2, #1
 8000c88:	2120      	movs	r1, #32
 8000c8a:	482b      	ldr	r0, [pc, #172]	; (8000d38 <display7SEG+0x31c>)
 8000c8c:	f001 f809 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000c90:	2201      	movs	r2, #1
 8000c92:	2140      	movs	r1, #64	; 0x40
 8000c94:	4828      	ldr	r0, [pc, #160]	; (8000d38 <display7SEG+0x31c>)
 8000c96:	f001 f804 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000c9a:	e048      	b.n	8000d2e <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4825      	ldr	r0, [pc, #148]	; (8000d38 <display7SEG+0x31c>)
 8000ca2:	f000 fffe 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4823      	ldr	r0, [pc, #140]	; (8000d38 <display7SEG+0x31c>)
 8000cac:	f000 fff9 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	4820      	ldr	r0, [pc, #128]	; (8000d38 <display7SEG+0x31c>)
 8000cb6:	f000 fff4 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <display7SEG+0x31c>)
 8000cc0:	f000 ffef 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	481b      	ldr	r0, [pc, #108]	; (8000d38 <display7SEG+0x31c>)
 8000cca:	f000 ffea 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2120      	movs	r1, #32
 8000cd2:	4819      	ldr	r0, [pc, #100]	; (8000d38 <display7SEG+0x31c>)
 8000cd4:	f000 ffe5 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	4816      	ldr	r0, [pc, #88]	; (8000d38 <display7SEG+0x31c>)
 8000cde:	f000 ffe0 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000ce2:	e024      	b.n	8000d2e <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4813      	ldr	r0, [pc, #76]	; (8000d38 <display7SEG+0x31c>)
 8000cea:	f000 ffda 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <display7SEG+0x31c>)
 8000cf4:	f000 ffd5 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	480e      	ldr	r0, [pc, #56]	; (8000d38 <display7SEG+0x31c>)
 8000cfe:	f000 ffd0 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000d02:	2200      	movs	r2, #0
 8000d04:	2108      	movs	r1, #8
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <display7SEG+0x31c>)
 8000d08:	f000 ffcb 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2110      	movs	r1, #16
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <display7SEG+0x31c>)
 8000d12:	f000 ffc6 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000d16:	2200      	movs	r2, #0
 8000d18:	2120      	movs	r1, #32
 8000d1a:	4807      	ldr	r0, [pc, #28]	; (8000d38 <display7SEG+0x31c>)
 8000d1c:	f000 ffc1 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000d20:	2200      	movs	r2, #0
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <display7SEG+0x31c>)
 8000d26:	f000 ffbc 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000d2a:	e000      	b.n	8000d2e <display7SEG+0x312>
	default:
		break;
 8000d2c:	bf00      	nop
	}
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40010c00 	.word	0x40010c00

08000d3c <display7SEG0>:
void display7SEG0(int num){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	switch(num){
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b09      	cmp	r3, #9
 8000d48:	f200 81bc 	bhi.w	80010c4 <display7SEG0+0x388>
 8000d4c:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <display7SEG0+0x18>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000d7d 	.word	0x08000d7d
 8000d58:	08000dd1 	.word	0x08000dd1
 8000d5c:	08000e25 	.word	0x08000e25
 8000d60:	08000e79 	.word	0x08000e79
 8000d64:	08000ecd 	.word	0x08000ecd
 8000d68:	08000f21 	.word	0x08000f21
 8000d6c:	08000f75 	.word	0x08000f75
 8000d70:	08000fc9 	.word	0x08000fc9
 8000d74:	0800101d 	.word	0x0800101d
 8000d78:	08001071 	.word	0x08001071
	case 0:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	48d3      	ldr	r0, [pc, #844]	; (80010d0 <display7SEG0+0x394>)
 8000d82:	f000 ff8e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8c:	48d0      	ldr	r0, [pc, #832]	; (80010d0 <display7SEG0+0x394>)
 8000d8e:	f000 ff88 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d98:	48cd      	ldr	r0, [pc, #820]	; (80010d0 <display7SEG0+0x394>)
 8000d9a:	f000 ff82 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da4:	48ca      	ldr	r0, [pc, #808]	; (80010d0 <display7SEG0+0x394>)
 8000da6:	f000 ff7c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db0:	48c7      	ldr	r0, [pc, #796]	; (80010d0 <display7SEG0+0x394>)
 8000db2:	f000 ff76 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbc:	48c4      	ldr	r0, [pc, #784]	; (80010d0 <display7SEG0+0x394>)
 8000dbe:	f000 ff70 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc8:	48c1      	ldr	r0, [pc, #772]	; (80010d0 <display7SEG0+0x394>)
 8000dca:	f000 ff6a 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000dce:	e17a      	b.n	80010c6 <display7SEG0+0x38a>
	case 1:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2180      	movs	r1, #128	; 0x80
 8000dd4:	48be      	ldr	r0, [pc, #760]	; (80010d0 <display7SEG0+0x394>)
 8000dd6:	f000 ff64 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de0:	48bb      	ldr	r0, [pc, #748]	; (80010d0 <display7SEG0+0x394>)
 8000de2:	f000 ff5e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dec:	48b8      	ldr	r0, [pc, #736]	; (80010d0 <display7SEG0+0x394>)
 8000dee:	f000 ff58 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df8:	48b5      	ldr	r0, [pc, #724]	; (80010d0 <display7SEG0+0x394>)
 8000dfa:	f000 ff52 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e04:	48b2      	ldr	r0, [pc, #712]	; (80010d0 <display7SEG0+0x394>)
 8000e06:	f000 ff4c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e10:	48af      	ldr	r0, [pc, #700]	; (80010d0 <display7SEG0+0x394>)
 8000e12:	f000 ff46 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1c:	48ac      	ldr	r0, [pc, #688]	; (80010d0 <display7SEG0+0x394>)
 8000e1e:	f000 ff40 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000e22:	e150      	b.n	80010c6 <display7SEG0+0x38a>
	case 2:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000e24:	2200      	movs	r2, #0
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	48a9      	ldr	r0, [pc, #676]	; (80010d0 <display7SEG0+0x394>)
 8000e2a:	f000 ff3a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e34:	48a6      	ldr	r0, [pc, #664]	; (80010d0 <display7SEG0+0x394>)
 8000e36:	f000 ff34 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_SET ) ;
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e40:	48a3      	ldr	r0, [pc, #652]	; (80010d0 <display7SEG0+0x394>)
 8000e42:	f000 ff2e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4c:	48a0      	ldr	r0, [pc, #640]	; (80010d0 <display7SEG0+0x394>)
 8000e4e:	f000 ff28 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e58:	489d      	ldr	r0, [pc, #628]	; (80010d0 <display7SEG0+0x394>)
 8000e5a:	f000 ff22 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e64:	489a      	ldr	r0, [pc, #616]	; (80010d0 <display7SEG0+0x394>)
 8000e66:	f000 ff1c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e70:	4897      	ldr	r0, [pc, #604]	; (80010d0 <display7SEG0+0x394>)
 8000e72:	f000 ff16 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000e76:	e126      	b.n	80010c6 <display7SEG0+0x38a>
	case 3:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	4894      	ldr	r0, [pc, #592]	; (80010d0 <display7SEG0+0x394>)
 8000e7e:	f000 ff10 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e88:	4891      	ldr	r0, [pc, #580]	; (80010d0 <display7SEG0+0x394>)
 8000e8a:	f000 ff0a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e94:	488e      	ldr	r0, [pc, #568]	; (80010d0 <display7SEG0+0x394>)
 8000e96:	f000 ff04 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea0:	488b      	ldr	r0, [pc, #556]	; (80010d0 <display7SEG0+0x394>)
 8000ea2:	f000 fefe 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eac:	4888      	ldr	r0, [pc, #544]	; (80010d0 <display7SEG0+0x394>)
 8000eae:	f000 fef8 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb8:	4885      	ldr	r0, [pc, #532]	; (80010d0 <display7SEG0+0x394>)
 8000eba:	f000 fef2 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec4:	4882      	ldr	r0, [pc, #520]	; (80010d0 <display7SEG0+0x394>)
 8000ec6:	f000 feec 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000eca:	e0fc      	b.n	80010c6 <display7SEG0+0x38a>
	case 4:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	487f      	ldr	r0, [pc, #508]	; (80010d0 <display7SEG0+0x394>)
 8000ed2:	f000 fee6 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000edc:	487c      	ldr	r0, [pc, #496]	; (80010d0 <display7SEG0+0x394>)
 8000ede:	f000 fee0 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee8:	4879      	ldr	r0, [pc, #484]	; (80010d0 <display7SEG0+0x394>)
 8000eea:	f000 feda 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef4:	4876      	ldr	r0, [pc, #472]	; (80010d0 <display7SEG0+0x394>)
 8000ef6:	f000 fed4 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f00:	4873      	ldr	r0, [pc, #460]	; (80010d0 <display7SEG0+0x394>)
 8000f02:	f000 fece 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0c:	4870      	ldr	r0, [pc, #448]	; (80010d0 <display7SEG0+0x394>)
 8000f0e:	f000 fec8 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f18:	486d      	ldr	r0, [pc, #436]	; (80010d0 <display7SEG0+0x394>)
 8000f1a:	f000 fec2 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000f1e:	e0d2      	b.n	80010c6 <display7SEG0+0x38a>
	case 5:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000f20:	2200      	movs	r2, #0
 8000f22:	2180      	movs	r1, #128	; 0x80
 8000f24:	486a      	ldr	r0, [pc, #424]	; (80010d0 <display7SEG0+0x394>)
 8000f26:	f000 febc 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f30:	4867      	ldr	r0, [pc, #412]	; (80010d0 <display7SEG0+0x394>)
 8000f32:	f000 feb6 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3c:	4864      	ldr	r0, [pc, #400]	; (80010d0 <display7SEG0+0x394>)
 8000f3e:	f000 feb0 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f48:	4861      	ldr	r0, [pc, #388]	; (80010d0 <display7SEG0+0x394>)
 8000f4a:	f000 feaa 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f54:	485e      	ldr	r0, [pc, #376]	; (80010d0 <display7SEG0+0x394>)
 8000f56:	f000 fea4 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f60:	485b      	ldr	r0, [pc, #364]	; (80010d0 <display7SEG0+0x394>)
 8000f62:	f000 fe9e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6c:	4858      	ldr	r0, [pc, #352]	; (80010d0 <display7SEG0+0x394>)
 8000f6e:	f000 fe98 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000f72:	e0a8      	b.n	80010c6 <display7SEG0+0x38a>
	case 6:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000f74:	2200      	movs	r2, #0
 8000f76:	2180      	movs	r1, #128	; 0x80
 8000f78:	4855      	ldr	r0, [pc, #340]	; (80010d0 <display7SEG0+0x394>)
 8000f7a:	f000 fe92 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f84:	4852      	ldr	r0, [pc, #328]	; (80010d0 <display7SEG0+0x394>)
 8000f86:	f000 fe8c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f90:	484f      	ldr	r0, [pc, #316]	; (80010d0 <display7SEG0+0x394>)
 8000f92:	f000 fe86 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9c:	484c      	ldr	r0, [pc, #304]	; (80010d0 <display7SEG0+0x394>)
 8000f9e:	f000 fe80 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa8:	4849      	ldr	r0, [pc, #292]	; (80010d0 <display7SEG0+0x394>)
 8000faa:	f000 fe7a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb4:	4846      	ldr	r0, [pc, #280]	; (80010d0 <display7SEG0+0x394>)
 8000fb6:	f000 fe74 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc0:	4843      	ldr	r0, [pc, #268]	; (80010d0 <display7SEG0+0x394>)
 8000fc2:	f000 fe6e 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000fc6:	e07e      	b.n	80010c6 <display7SEG0+0x38a>
	case 7:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	4840      	ldr	r0, [pc, #256]	; (80010d0 <display7SEG0+0x394>)
 8000fce:	f000 fe68 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd8:	483d      	ldr	r0, [pc, #244]	; (80010d0 <display7SEG0+0x394>)
 8000fda:	f000 fe62 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe4:	483a      	ldr	r0, [pc, #232]	; (80010d0 <display7SEG0+0x394>)
 8000fe6:	f000 fe5c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff0:	4837      	ldr	r0, [pc, #220]	; (80010d0 <display7SEG0+0x394>)
 8000ff2:	f000 fe56 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffc:	4834      	ldr	r0, [pc, #208]	; (80010d0 <display7SEG0+0x394>)
 8000ffe:	f000 fe50 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001008:	4831      	ldr	r0, [pc, #196]	; (80010d0 <display7SEG0+0x394>)
 800100a:	f000 fe4a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001014:	482e      	ldr	r0, [pc, #184]	; (80010d0 <display7SEG0+0x394>)
 8001016:	f000 fe44 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 800101a:	e054      	b.n	80010c6 <display7SEG0+0x38a>
	case 8:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	482b      	ldr	r0, [pc, #172]	; (80010d0 <display7SEG0+0x394>)
 8001022:	f000 fe3e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102c:	4828      	ldr	r0, [pc, #160]	; (80010d0 <display7SEG0+0x394>)
 800102e:	f000 fe38 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001038:	4825      	ldr	r0, [pc, #148]	; (80010d0 <display7SEG0+0x394>)
 800103a:	f000 fe32 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001044:	4822      	ldr	r0, [pc, #136]	; (80010d0 <display7SEG0+0x394>)
 8001046:	f000 fe2c 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001050:	481f      	ldr	r0, [pc, #124]	; (80010d0 <display7SEG0+0x394>)
 8001052:	f000 fe26 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105c:	481c      	ldr	r0, [pc, #112]	; (80010d0 <display7SEG0+0x394>)
 800105e:	f000 fe20 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001068:	4819      	ldr	r0, [pc, #100]	; (80010d0 <display7SEG0+0x394>)
 800106a:	f000 fe1a 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 800106e:	e02a      	b.n	80010c6 <display7SEG0+0x38a>
	case 9:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001070:	2200      	movs	r2, #0
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	4816      	ldr	r0, [pc, #88]	; (80010d0 <display7SEG0+0x394>)
 8001076:	f000 fe14 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001080:	4813      	ldr	r0, [pc, #76]	; (80010d0 <display7SEG0+0x394>)
 8001082:	f000 fe0e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108c:	4810      	ldr	r0, [pc, #64]	; (80010d0 <display7SEG0+0x394>)
 800108e:	f000 fe08 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <display7SEG0+0x394>)
 800109a:	f000 fe02 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 800109e:	2201      	movs	r2, #1
 80010a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a4:	480a      	ldr	r0, [pc, #40]	; (80010d0 <display7SEG0+0x394>)
 80010a6:	f000 fdfc 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <display7SEG0+0x394>)
 80010b2:	f000 fdf6 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <display7SEG0+0x394>)
 80010be:	f000 fdf0 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 80010c2:	e000      	b.n	80010c6 <display7SEG0+0x38a>
	default:
		break;
 80010c4:	bf00      	nop
	}
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40010c00 	.word	0x40010c00

080010d4 <updateClockBuffer>:
int timeYELLOW = 2;

int led_buffer[4] = {0, 0, 0, 0};


void updateClockBuffer(int num0, int num1, int num2, int num3) {
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	603b      	str	r3, [r7, #0]
	led_buffer[0] = num0;
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <updateClockBuffer+0x30>)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <updateClockBuffer+0x30>)
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	6053      	str	r3, [r2, #4]
	led_buffer[2] = num2;
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <updateClockBuffer+0x30>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num3;
 80010f4:	4a03      	ldr	r2, [pc, #12]	; (8001104 <updateClockBuffer+0x30>)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	60d3      	str	r3, [r2, #12]
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	200000a0 	.word	0x200000a0

08001108 <update7SEG>:

void update7SEG(int index) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	switch (index) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d003      	beq.n	800111e <update7SEG+0x16>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d017      	beq.n	800114c <update7SEG+0x44>
		display7SEG0(led_buffer[3]);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 800111c:	e02d      	b.n	800117a <update7SEG+0x72>
		display7SEG(led_buffer[0]);
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <update7SEG+0x7c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fc7a 	bl	8000a1c <display7SEG>
		display7SEG0(led_buffer[1]);
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <update7SEG+0x7c>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fe05 	bl	8000d3c <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <update7SEG+0x80>)
 800113a:	f000 fdb2 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001144:	4810      	ldr	r0, [pc, #64]	; (8001188 <update7SEG+0x80>)
 8001146:	f000 fdac 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 800114a:	e016      	b.n	800117a <update7SEG+0x72>
		display7SEG(led_buffer[2]);
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <update7SEG+0x7c>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fc63 	bl	8000a1c <display7SEG>
		display7SEG0(led_buffer[3]);
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <update7SEG+0x7c>)
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fdee 	bl	8000d3c <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001166:	4808      	ldr	r0, [pc, #32]	; (8001188 <update7SEG+0x80>)
 8001168:	f000 fd9b 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <update7SEG+0x80>)
 8001174:	f000 fd95 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8001178:	bf00      	nop
	}
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200000a0 	.word	0x200000a0
 8001188:	40010c00 	.word	0x40010c00

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001192:	f000 fa83 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001196:	f000 f851 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119a:	f000 f8d7 	bl	800134c <MX_GPIO_Init>
  MX_TIM2_Init();
 800119e:	f000 f889 	bl	80012b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <main+0xa4>)
 80011a4:	f001 f9e6 	bl	8002574 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = 0;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <main+0xa8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
  int led_idx = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
  int index = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
  setTimer0(1000);
 80011b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ba:	f000 f93b 	bl	8001434 <setTimer0>
  //setTimer1(250);
  while (1)
  {

	  if (timer0_flag == 1) {
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <main+0xac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d12e      	bne.n	8001224 <main+0x98>
		  switch (led_idx) {
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d82d      	bhi.n	8001228 <main+0x9c>
 80011cc:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <main+0x48>)
 80011ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d2:	bf00      	nop
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	080011ed 	.word	0x080011ed
 80011dc:	08001205 	.word	0x08001205
 80011e0:	0800120d 	.word	0x0800120d
			  case 0:
				led_idx++;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3301      	adds	r3, #1
 80011e8:	607b      	str	r3, [r7, #4]
			    break;
 80011ea:	e01e      	b.n	800122a <main+0x9e>
		  	  case 1:
		  		index = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	603b      	str	r3, [r7, #0]
		  		update7SEG(index);
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	f7ff ff89 	bl	8001108 <update7SEG>
		  		setTimer0(500);
 80011f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011fa:	f000 f91b 	bl	8001434 <setTimer0>
		  		led_idx = 2;
 80011fe:	2302      	movs	r3, #2
 8001200:	607b      	str	r3, [r7, #4]
		  		break;
 8001202:	e012      	b.n	800122a <main+0x9e>
		  	  case 2:
		  		led_idx++;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3301      	adds	r3, #1
 8001208:	607b      	str	r3, [r7, #4]
		  		break;
 800120a:	e00e      	b.n	800122a <main+0x9e>
		  	  case 3:
		  		index = 2;
 800120c:	2302      	movs	r3, #2
 800120e:	603b      	str	r3, [r7, #0]
				update7SEG(index);
 8001210:	6838      	ldr	r0, [r7, #0]
 8001212:	f7ff ff79 	bl	8001108 <update7SEG>
				setTimer0(500);
 8001216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121a:	f000 f90b 	bl	8001434 <setTimer0>
				led_idx = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
				break;
 8001222:	e002      	b.n	800122a <main+0x9e>
	//	  if (index == 2) {
	//		  update7SEG(index);
	//		  index = 1;
	//		  setTimer0(1000);
	//	  }
	  }
 8001224:	bf00      	nop
 8001226:	e000      	b.n	800122a <main+0x9e>
		  		break;
 8001228:	bf00      	nop
	  fsm_run();
 800122a:	f7ff f895 	bl	8000358 <fsm_run>
	  if (timer0_flag == 1) {
 800122e:	e7c6      	b.n	80011be <main+0x32>
 8001230:	200000b0 	.word	0x200000b0
 8001234:	2000009c 	.word	0x2000009c
 8001238:	200000fc 	.word	0x200000fc

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b090      	sub	sp, #64	; 0x40
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	2228      	movs	r2, #40	; 0x28
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fd4a 	bl	8002ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001262:	2301      	movs	r3, #1
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001266:	2310      	movs	r3, #16
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fd46 	bl	8001d04 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800127e:	f000 f8d3 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f000 ffb4 	bl	8002208 <HAL_RCC_ClockConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012a6:	f000 f8bf 	bl	8001428 <Error_Handler>
  }
}
 80012aa:	bf00      	nop
 80012ac:	3740      	adds	r7, #64	; 0x40
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_TIM2_Init+0x94>)
 80012d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_TIM2_Init+0x94>)
 80012da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_TIM2_Init+0x94>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_TIM2_Init+0x94>)
 80012e8:	2209      	movs	r2, #9
 80012ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_TIM2_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_TIM2_Init+0x94>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f8:	4813      	ldr	r0, [pc, #76]	; (8001348 <MX_TIM2_Init+0x94>)
 80012fa:	f001 f8eb 	bl	80024d4 <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001304:	f000 f890 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <MX_TIM2_Init+0x94>)
 8001316:	f001 fa81 	bl	800281c <HAL_TIM_ConfigClockSource>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001320:	f000 f882 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_TIM2_Init+0x94>)
 8001332:	f001 fc49 	bl	8002bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800133c:	f000 f874 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200000b0 	.word	0x200000b0

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b28      	ldr	r3, [pc, #160]	; (8001404 <MX_GPIO_Init+0xb8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <MX_GPIO_Init+0xb8>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <MX_GPIO_Init+0xb8>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <MX_GPIO_Init+0xb8>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a21      	ldr	r2, [pc, #132]	; (8001404 <MX_GPIO_Init+0xb8>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_GPIO_Init+0xb8>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001396:	481c      	ldr	r0, [pc, #112]	; (8001408 <MX_GPIO_Init+0xbc>)
 8001398:	f000 fc83 	bl	8001ca2 <HAL_GPIO_WritePin>
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D0_Pin
 800139c:	2200      	movs	r2, #0
 800139e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013a2:	481a      	ldr	r0, [pc, #104]	; (800140c <MX_GPIO_Init+0xc0>)
 80013a4:	f000 fc7d 	bl	8001ca2 <HAL_GPIO_WritePin>
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin;
 80013a8:	230e      	movs	r3, #14
 80013aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4619      	mov	r1, r3
 80013ba:	4813      	ldr	r0, [pc, #76]	; (8001408 <MX_GPIO_Init+0xbc>)
 80013bc:	f000 fade 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_0_Pin
                           LED_YELLOW_0_Pin LED_GREEN_0_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 80013c0:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80013c4:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2302      	movs	r3, #2
 80013d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4619      	mov	r1, r3
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <MX_GPIO_Init+0xbc>)
 80013da:	f000 facf 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin EN1_Pin
                           EN2_Pin D_Pin E_Pin F_Pin
                           G_Pin A0_Pin B0_Pin C0_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D0_Pin
 80013de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e2:	60bb      	str	r3, [r7, #8]
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2302      	movs	r3, #2
 80013ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_GPIO_Init+0xc0>)
 80013f8:	f000 fac0 	bl	800197c <HAL_GPIO_Init>

}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000
 8001408:	40010800 	.word	0x40010800
 800140c:	40010c00 	.word	0x40010c00

08001410 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	timer_run();
 8001418:	f000 f85a 	bl	80014d0 <timer_run>
	getKeyInput();
 800141c:	f7fe fef0 	bl	8000200 <getKeyInput>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <setTimer0>:
int timer1_counter = 0;
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0(int duration){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/ TIMER_CYCLE;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <setTimer0+0x28>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	fb92 f3f3 	sdiv	r3, r2, r3
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <setTimer0+0x2c>)
 8001448:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <setTimer0+0x30>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000050 	.word	0x20000050
 8001460:	200000f8 	.word	0x200000f8
 8001464:	200000fc 	.word	0x200000fc

08001468 <setTimer1>:

void setTimer1(int duration){
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/ TIMER_CYCLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <setTimer1+0x28>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	fb92 f3f3 	sdiv	r3, r2, r3
 800147a:	4a06      	ldr	r2, [pc, #24]	; (8001494 <setTimer1+0x2c>)
 800147c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <setTimer1+0x30>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000050 	.word	0x20000050
 8001494:	20000100 	.word	0x20000100
 8001498:	20000104 	.word	0x20000104

0800149c <setTimer2>:

void setTimer2(int duration){
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/ TIMER_CYCLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <setTimer2+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <setTimer2+0x2c>)
 80014b0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <setTimer2+0x30>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000050 	.word	0x20000050
 80014c8:	20000108 	.word	0x20000108
 80014cc:	2000010c 	.word	0x2000010c

080014d0 <timer_run>:

void timer_run(){
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <timer_run+0x6c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	dd0b      	ble.n	80014f4 <timer_run+0x24>
		timer0_counter--;
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <timer_run+0x6c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	4a16      	ldr	r2, [pc, #88]	; (800153c <timer_run+0x6c>)
 80014e4:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0) timer0_flag = 1;
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <timer_run+0x6c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <timer_run+0x24>
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <timer_run+0x70>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
	}

	if(timer1_counter > 0){
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <timer_run+0x74>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	dd0b      	ble.n	8001514 <timer_run+0x44>
		timer1_counter--;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <timer_run+0x74>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3b01      	subs	r3, #1
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <timer_run+0x74>)
 8001504:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <timer_run+0x74>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <timer_run+0x44>
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <timer_run+0x78>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <timer_run+0x7c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	dd0b      	ble.n	8001534 <timer_run+0x64>
		timer2_counter--;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <timer_run+0x7c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <timer_run+0x7c>)
 8001524:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <timer_run+0x7c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <timer_run+0x64>
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <timer_run+0x80>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
	}
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	200000f8 	.word	0x200000f8
 8001540:	200000fc 	.word	0x200000fc
 8001544:	20000100 	.word	0x20000100
 8001548:	20000104 	.word	0x20000104
 800154c:	20000108 	.word	0x20000108
 8001550:	2000010c 	.word	0x2000010c

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_MspInit+0x40>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_MspInit+0x40>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6193      	str	r3, [r2, #24]
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_MspInit+0x40>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_MspInit+0x40>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_MspInit+0x40>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_MspInit+0x40>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a8:	d113      	bne.n	80015d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_TIM_Base_MspInit+0x44>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_TIM_Base_MspInit+0x44>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_TIM_Base_MspInit+0x44>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	201c      	movs	r0, #28
 80015c8:	f000 f9a1 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015cc:	201c      	movs	r0, #28
 80015ce:	f000 f9ba 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001626:	f000 f87f 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <TIM2_IRQHandler+0x10>)
 8001636:	f000 ffe9 	bl	800260c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000b0 	.word	0x200000b0

08001644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	; (8001688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	; (8001694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001676:	f7ff ffe5 	bl	8001644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167a:	f001 fb0f 	bl	8002c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800167e:	f7ff fd85 	bl	800118c <main>
  bx lr
 8001682:	4770      	bx	lr
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800168c:	08002d34 	.word	0x08002d34
  ldr r2, =_sbss
 8001690:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001694:	20000114 	.word	0x20000114

08001698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x28>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x28>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f923 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	200f      	movs	r0, #15
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff ff4c 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f93b 	bl	8001962 <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 f903 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000054 	.word	0x20000054
 8001720:	2000005c 	.word	0x2000005c
 8001724:	20000058 	.word	0x20000058

08001728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_IncTick+0x1c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x20>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_IncTick+0x20>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	2000005c 	.word	0x2000005c
 8001748:	20000110 	.word	0x20000110

0800174c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <HAL_GetTick+0x10>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20000110 	.word	0x20000110

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4906      	ldr	r1, [pc, #24]	; (80017f8 <__NVIC_EnableIRQ+0x34>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff90 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff2d 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff42 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff90 	bl	8001850 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5f 	bl	80017fc <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff35 	bl	80017c4 <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b08b      	sub	sp, #44	; 0x2c
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	e161      	b.n	8001c54 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001990:	2201      	movs	r2, #1
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f040 8150 	bne.w	8001c4e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4a97      	ldr	r2, [pc, #604]	; (8001c10 <HAL_GPIO_Init+0x294>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d05e      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019b8:	4a95      	ldr	r2, [pc, #596]	; (8001c10 <HAL_GPIO_Init+0x294>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d875      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019be:	4a95      	ldr	r2, [pc, #596]	; (8001c14 <HAL_GPIO_Init+0x298>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d058      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019c4:	4a93      	ldr	r2, [pc, #588]	; (8001c14 <HAL_GPIO_Init+0x298>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d86f      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019ca:	4a93      	ldr	r2, [pc, #588]	; (8001c18 <HAL_GPIO_Init+0x29c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d052      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019d0:	4a91      	ldr	r2, [pc, #580]	; (8001c18 <HAL_GPIO_Init+0x29c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d869      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019d6:	4a91      	ldr	r2, [pc, #580]	; (8001c1c <HAL_GPIO_Init+0x2a0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d04c      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019dc:	4a8f      	ldr	r2, [pc, #572]	; (8001c1c <HAL_GPIO_Init+0x2a0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d863      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019e2:	4a8f      	ldr	r2, [pc, #572]	; (8001c20 <HAL_GPIO_Init+0x2a4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d046      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019e8:	4a8d      	ldr	r2, [pc, #564]	; (8001c20 <HAL_GPIO_Init+0x2a4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d85d      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019ee:	2b12      	cmp	r3, #18
 80019f0:	d82a      	bhi.n	8001a48 <HAL_GPIO_Init+0xcc>
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d859      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019f6:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <HAL_GPIO_Init+0x80>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a77 	.word	0x08001a77
 8001a00:	08001a51 	.word	0x08001a51
 8001a04:	08001a63 	.word	0x08001a63
 8001a08:	08001aa5 	.word	0x08001aa5
 8001a0c:	08001aab 	.word	0x08001aab
 8001a10:	08001aab 	.word	0x08001aab
 8001a14:	08001aab 	.word	0x08001aab
 8001a18:	08001aab 	.word	0x08001aab
 8001a1c:	08001aab 	.word	0x08001aab
 8001a20:	08001aab 	.word	0x08001aab
 8001a24:	08001aab 	.word	0x08001aab
 8001a28:	08001aab 	.word	0x08001aab
 8001a2c:	08001aab 	.word	0x08001aab
 8001a30:	08001aab 	.word	0x08001aab
 8001a34:	08001aab 	.word	0x08001aab
 8001a38:	08001aab 	.word	0x08001aab
 8001a3c:	08001aab 	.word	0x08001aab
 8001a40:	08001a59 	.word	0x08001a59
 8001a44:	08001a6d 	.word	0x08001a6d
 8001a48:	4a76      	ldr	r2, [pc, #472]	; (8001c24 <HAL_GPIO_Init+0x2a8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a4e:	e02c      	b.n	8001aaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e029      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	623b      	str	r3, [r7, #32]
          break;
 8001a60:	e024      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	3308      	adds	r3, #8
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e01f      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	330c      	adds	r3, #12
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e01a      	b.n	8001aac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e013      	b.n	8001aac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	611a      	str	r2, [r3, #16]
          break;
 8001a96:	e009      	b.n	8001aac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	615a      	str	r2, [r3, #20]
          break;
 8001aa2:	e003      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
          break;
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x130>
          break;
 8001aaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2bff      	cmp	r3, #255	; 0xff
 8001ab0:	d801      	bhi.n	8001ab6 <HAL_GPIO_Init+0x13a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	e001      	b.n	8001aba <HAL_GPIO_Init+0x13e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2bff      	cmp	r3, #255	; 0xff
 8001ac0:	d802      	bhi.n	8001ac8 <HAL_GPIO_Init+0x14c>
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	e002      	b.n	8001ace <HAL_GPIO_Init+0x152>
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	3b08      	subs	r3, #8
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	210f      	movs	r1, #15
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	6a39      	ldr	r1, [r7, #32]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 80a9 	beq.w	8001c4e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001afc:	4b4a      	ldr	r3, [pc, #296]	; (8001c28 <HAL_GPIO_Init+0x2ac>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <HAL_GPIO_Init+0x2ac>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_GPIO_Init+0x2ac>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b14:	4a45      	ldr	r2, [pc, #276]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3d      	ldr	r2, [pc, #244]	; (8001c30 <HAL_GPIO_Init+0x2b4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00d      	beq.n	8001b5c <HAL_GPIO_Init+0x1e0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a3c      	ldr	r2, [pc, #240]	; (8001c34 <HAL_GPIO_Init+0x2b8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d007      	beq.n	8001b58 <HAL_GPIO_Init+0x1dc>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3b      	ldr	r2, [pc, #236]	; (8001c38 <HAL_GPIO_Init+0x2bc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d101      	bne.n	8001b54 <HAL_GPIO_Init+0x1d8>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e004      	b.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b54:	2303      	movs	r3, #3
 8001b56:	e002      	b.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b60:	f002 0203 	and.w	r2, r2, #3
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	4093      	lsls	r3, r2
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b6e:	492f      	ldr	r1, [pc, #188]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b88:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	492b      	ldr	r1, [pc, #172]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4927      	ldr	r1, [pc, #156]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4921      	ldr	r1, [pc, #132]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	491d      	ldr	r1, [pc, #116]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	4917      	ldr	r1, [pc, #92]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	4913      	ldr	r1, [pc, #76]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01f      	beq.n	8001c40 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	490d      	ldr	r1, [pc, #52]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
 8001c0c:	e01f      	b.n	8001c4e <HAL_GPIO_Init+0x2d2>
 8001c0e:	bf00      	nop
 8001c10:	10320000 	.word	0x10320000
 8001c14:	10310000 	.word	0x10310000
 8001c18:	10220000 	.word	0x10220000
 8001c1c:	10210000 	.word	0x10210000
 8001c20:	10120000 	.word	0x10120000
 8001c24:	10110000 	.word	0x10110000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40010800 	.word	0x40010800
 8001c34:	40010c00 	.word	0x40010c00
 8001c38:	40011000 	.word	0x40011000
 8001c3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_GPIO_Init+0x2f4>)
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	4909      	ldr	r1, [pc, #36]	; (8001c70 <HAL_GPIO_Init+0x2f4>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3301      	adds	r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f47f ae96 	bne.w	8001990 <HAL_GPIO_Init+0x14>
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	372c      	adds	r7, #44	; 0x2c
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e001      	b.n	8001c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	807b      	strh	r3, [r7, #2]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb2:	787b      	ldrb	r3, [r7, #1]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cbe:	e003      	b.n	8001cc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	041a      	lsls	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	611a      	str	r2, [r3, #16]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ce4:	887a      	ldrh	r2, [r7, #2]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	041a      	lsls	r2, r3, #16
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e272      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8087 	beq.w	8001e32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d24:	4b92      	ldr	r3, [pc, #584]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d00c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d30:	4b8f      	ldr	r3, [pc, #572]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d112      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
 8001d3c:	4b8c      	ldr	r3, [pc, #560]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d10b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	4b89      	ldr	r3, [pc, #548]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d06c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x12c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d168      	bne.n	8001e30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e24c      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x76>
 8001d6c:	4b80      	ldr	r3, [pc, #512]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a7f      	ldr	r2, [pc, #508]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e02e      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x98>
 8001d82:	4b7b      	ldr	r3, [pc, #492]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7a      	ldr	r2, [pc, #488]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a77      	ldr	r2, [pc, #476]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xbc>
 8001da6:	4b72      	ldr	r3, [pc, #456]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a71      	ldr	r2, [pc, #452]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001dc0:	4b6b      	ldr	r3, [pc, #428]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6a      	ldr	r2, [pc, #424]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a67      	ldr	r2, [pc, #412]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fcb4 	bl	800174c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fcb0 	bl	800174c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e200      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b5d      	ldr	r3, [pc, #372]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0xe4>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fca0 	bl	800174c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fc9c 	bl	800174c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1ec      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x10c>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d063      	beq.n	8001f06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3e:	4b4c      	ldr	r3, [pc, #304]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00b      	beq.n	8001e62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d11c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x18c>
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d116      	bne.n	8001e90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x176>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e1c0      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4939      	ldr	r1, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	e03a      	b.n	8001f06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e98:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fc55 	bl	800174c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fc51 	bl	800174c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1a1      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4927      	ldr	r1, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
 8001ed8:	e015      	b.n	8001f06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fc34 	bl	800174c <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fc30 	bl	800174c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e180      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d03a      	beq.n	8001f88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d019      	beq.n	8001f4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fc14 	bl	800174c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff fc10 	bl	800174c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e160      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f000 faa6 	bl	8002498 <RCC_Delay>
 8001f4c:	e01c      	b.n	8001f88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_RCC_OscConfig+0x274>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f54:	f7ff fbfa 	bl	800174c <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5a:	e00f      	b.n	8001f7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fbf6 	bl	800174c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d908      	bls.n	8001f7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e146      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	42420000 	.word	0x42420000
 8001f78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	4b92      	ldr	r3, [pc, #584]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1e9      	bne.n	8001f5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a6 	beq.w	80020e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9a:	4b8b      	ldr	r3, [pc, #556]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b88      	ldr	r3, [pc, #544]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a87      	ldr	r2, [pc, #540]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	61d3      	str	r3, [r2, #28]
 8001fb2:	4b85      	ldr	r3, [pc, #532]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b82      	ldr	r3, [pc, #520]	; (80021cc <HAL_RCC_OscConfig+0x4c8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d118      	bne.n	8002000 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fce:	4b7f      	ldr	r3, [pc, #508]	; (80021cc <HAL_RCC_OscConfig+0x4c8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a7e      	ldr	r2, [pc, #504]	; (80021cc <HAL_RCC_OscConfig+0x4c8>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fda:	f7ff fbb7 	bl	800174c <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7ff fbb3 	bl	800174c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b64      	cmp	r3, #100	; 0x64
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e103      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	4b75      	ldr	r3, [pc, #468]	; (80021cc <HAL_RCC_OscConfig+0x4c8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x312>
 8002008:	4b6f      	ldr	r3, [pc, #444]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a6e      	ldr	r2, [pc, #440]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	e02d      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x334>
 800201e:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a69      	ldr	r2, [pc, #420]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a66      	ldr	r2, [pc, #408]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	e01c      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b05      	cmp	r3, #5
 800203e:	d10c      	bne.n	800205a <HAL_RCC_OscConfig+0x356>
 8002040:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a60      	ldr	r2, [pc, #384]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a5d      	ldr	r2, [pc, #372]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e00b      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 800205a:	4b5b      	ldr	r3, [pc, #364]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a5a      	ldr	r2, [pc, #360]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	4b58      	ldr	r3, [pc, #352]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a57      	ldr	r2, [pc, #348]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d015      	beq.n	80020a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7ff fb67 	bl	800174c <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7ff fb63 	bl	800174c <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0b1      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ee      	beq.n	8002082 <HAL_RCC_OscConfig+0x37e>
 80020a4:	e014      	b.n	80020d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fb51 	bl	800174c <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff fb4d 	bl	800174c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e09b      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c4:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ee      	bne.n	80020ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d105      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d6:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a3b      	ldr	r2, [pc, #236]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8087 	beq.w	80021fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ec:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d061      	beq.n	80021bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d146      	bne.n	800218e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002100:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <HAL_RCC_OscConfig+0x4cc>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fb21 	bl	800174c <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210e:	f7ff fb1d 	bl	800174c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e06d      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f0      	bne.n	800210e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002134:	d108      	bne.n	8002148 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4921      	ldr	r1, [pc, #132]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002148:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a19      	ldr	r1, [r3, #32]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	430b      	orrs	r3, r1
 800215a:	491b      	ldr	r1, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x4cc>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff faf1 	bl	800174c <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff faed 	bl	800174c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e03d      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x46a>
 800218c:	e035      	b.n	80021fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_RCC_OscConfig+0x4cc>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fada 	bl	800174c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff fad6 	bl	800174c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e026      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x498>
 80021ba:	e01e      	b.n	80021fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e019      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d001      	beq.n	80021fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0d0      	b.n	80023be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800221c:	4b6a      	ldr	r3, [pc, #424]	; (80023c8 <HAL_RCC_ClockConfig+0x1c0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d910      	bls.n	800224c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b67      	ldr	r3, [pc, #412]	; (80023c8 <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 0207 	bic.w	r2, r3, #7
 8002232:	4965      	ldr	r1, [pc, #404]	; (80023c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0b8      	b.n	80023be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002264:	4b59      	ldr	r3, [pc, #356]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800226e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002286:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b50      	ldr	r3, [pc, #320]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	494d      	ldr	r1, [pc, #308]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d040      	beq.n	8002328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d115      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e07f      	b.n	80023be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e073      	b.n	80023be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d6:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06b      	b.n	80023be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e6:	4b39      	ldr	r3, [pc, #228]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f023 0203 	bic.w	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4936      	ldr	r1, [pc, #216]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f8:	f7ff fa28 	bl	800174c <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002300:	f7ff fa24 	bl	800174c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	; 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e053      	b.n	80023be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 020c 	and.w	r2, r3, #12
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	429a      	cmp	r2, r3
 8002326:	d1eb      	bne.n	8002300 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002328:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <HAL_RCC_ClockConfig+0x1c0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d210      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 0207 	bic.w	r2, r3, #7
 800233e:	4922      	ldr	r1, [pc, #136]	; (80023c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e032      	b.n	80023be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4916      	ldr	r1, [pc, #88]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	490e      	ldr	r1, [pc, #56]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002396:	f000 f821 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 800239a:	4602      	mov	r2, r0
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	490a      	ldr	r1, [pc, #40]	; (80023d0 <HAL_RCC_ClockConfig+0x1c8>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1cc>)
 80023b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_ClockConfig+0x1d0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f986 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40022000 	.word	0x40022000
 80023cc:	40021000 	.word	0x40021000
 80023d0:	08002d1c 	.word	0x08002d1c
 80023d4:	20000054 	.word	0x20000054
 80023d8:	20000058 	.word	0x20000058

080023dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	b490      	push	{r4, r7}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_RCC_GetSysClockFreq+0xac>)
 80023e4:	1d3c      	adds	r4, r7, #4
 80023e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023ec:	f240 2301 	movw	r3, #513	; 0x201
 80023f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b04      	cmp	r3, #4
 8002414:	d002      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x40>
 8002416:	2b08      	cmp	r3, #8
 8002418:	d003      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x46>
 800241a:	e02b      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800241c:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <HAL_RCC_GetSysClockFreq+0xb4>)
 800241e:	623b      	str	r3, [r7, #32]
      break;
 8002420:	e02b      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	0c9b      	lsrs	r3, r3, #18
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3328      	adds	r3, #40	; 0x28
 800242c:	443b      	add	r3, r7
 800242e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002432:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d012      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0c5b      	lsrs	r3, r3, #17
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	3328      	adds	r3, #40	; 0x28
 800244a:	443b      	add	r3, r7
 800244c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002450:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002456:	fb03 f202 	mul.w	r2, r3, r2
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	e004      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	623b      	str	r3, [r7, #32]
      break;
 8002472:	e002      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002476:	623b      	str	r3, [r7, #32]
      break;
 8002478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247a:	6a3b      	ldr	r3, [r7, #32]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3728      	adds	r7, #40	; 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bc90      	pop	{r4, r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	08002d0c 	.word	0x08002d0c
 800248c:	40021000 	.word	0x40021000
 8002490:	007a1200 	.word	0x007a1200
 8002494:	003d0900 	.word	0x003d0900

08002498 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <RCC_Delay+0x34>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <RCC_Delay+0x38>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0a5b      	lsrs	r3, r3, #9
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024b4:	bf00      	nop
  }
  while (Delay --);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1e5a      	subs	r2, r3, #1
 80024ba:	60fa      	str	r2, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f9      	bne.n	80024b4 <RCC_Delay+0x1c>
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	20000054 	.word	0x20000054
 80024d0:	10624dd3 	.word	0x10624dd3

080024d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e041      	b.n	800256a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff f84c 	bl	8001598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3304      	adds	r3, #4
 8002510:	4619      	mov	r1, r3
 8002512:	4610      	mov	r0, r2
 8002514:	f000 fa6a 	bl	80029ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d001      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e035      	b.n	80025f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a16      	ldr	r2, [pc, #88]	; (8002604 <HAL_TIM_Base_Start_IT+0x90>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d009      	beq.n	80025c2 <HAL_TIM_Base_Start_IT+0x4e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b6:	d004      	beq.n	80025c2 <HAL_TIM_Base_Start_IT+0x4e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a12      	ldr	r2, [pc, #72]	; (8002608 <HAL_TIM_Base_Start_IT+0x94>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d111      	bne.n	80025e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d010      	beq.n	80025f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e4:	e007      	b.n	80025f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0201 	orr.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40000400 	.word	0x40000400

0800260c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b02      	cmp	r3, #2
 8002620:	d122      	bne.n	8002668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b02      	cmp	r3, #2
 800262e:	d11b      	bne.n	8002668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0202 	mvn.w	r2, #2
 8002638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f9b1 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f9a4 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f9b3 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b04      	cmp	r3, #4
 8002674:	d122      	bne.n	80026bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b04      	cmp	r3, #4
 8002682:	d11b      	bne.n	80026bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0204 	mvn.w	r2, #4
 800268c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2202      	movs	r2, #2
 8002692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f987 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 80026a8:	e005      	b.n	80026b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f97a 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f989 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0208 	mvn.w	r2, #8
 80026e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2204      	movs	r2, #4
 80026e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f95d 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f950 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f95f 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b10      	cmp	r3, #16
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b10      	cmp	r3, #16
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0210 	mvn.w	r2, #16
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2208      	movs	r2, #8
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f933 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f926 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f935 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0201 	mvn.w	r2, #1
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fe40 	bl	8001410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	2b80      	cmp	r3, #128	; 0x80
 800279c:	d10e      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a8:	2b80      	cmp	r3, #128	; 0x80
 80027aa:	d107      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fa67 	bl	8002c8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d10e      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d107      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8f9 	bl	80029da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d10e      	bne.n	8002814 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b20      	cmp	r3, #32
 8002802:	d107      	bne.n	8002814 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0220 	mvn.w	r2, #32
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa32 	bl	8002c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_TIM_ConfigClockSource+0x18>
 8002830:	2302      	movs	r3, #2
 8002832:	e0b3      	b.n	800299c <HAL_TIM_ConfigClockSource+0x180>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002852:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286c:	d03e      	beq.n	80028ec <HAL_TIM_ConfigClockSource+0xd0>
 800286e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002872:	f200 8087 	bhi.w	8002984 <HAL_TIM_ConfigClockSource+0x168>
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287a:	f000 8085 	beq.w	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 800287e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002882:	d87f      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 8002884:	2b70      	cmp	r3, #112	; 0x70
 8002886:	d01a      	beq.n	80028be <HAL_TIM_ConfigClockSource+0xa2>
 8002888:	2b70      	cmp	r3, #112	; 0x70
 800288a:	d87b      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 800288c:	2b60      	cmp	r3, #96	; 0x60
 800288e:	d050      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x116>
 8002890:	2b60      	cmp	r3, #96	; 0x60
 8002892:	d877      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 8002894:	2b50      	cmp	r3, #80	; 0x50
 8002896:	d03c      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0xf6>
 8002898:	2b50      	cmp	r3, #80	; 0x50
 800289a:	d873      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 800289c:	2b40      	cmp	r3, #64	; 0x40
 800289e:	d058      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x136>
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d86f      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 80028a4:	2b30      	cmp	r3, #48	; 0x30
 80028a6:	d064      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x156>
 80028a8:	2b30      	cmp	r3, #48	; 0x30
 80028aa:	d86b      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d060      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x156>
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d867      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05c      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x156>
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d05a      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028bc:	e062      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6899      	ldr	r1, [r3, #8]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f000 f95c 	bl	8002b8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	609a      	str	r2, [r3, #8]
      break;
 80028ea:	e04e      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6899      	ldr	r1, [r3, #8]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f000 f945 	bl	8002b8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800290e:	609a      	str	r2, [r3, #8]
      break;
 8002910:	e03b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	461a      	mov	r2, r3
 8002920:	f000 f8bc 	bl	8002a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2150      	movs	r1, #80	; 0x50
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f913 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002930:	e02b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	461a      	mov	r2, r3
 8002940:	f000 f8da 	bl	8002af8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2160      	movs	r1, #96	; 0x60
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f903 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002950:	e01b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	461a      	mov	r2, r3
 8002960:	f000 f89c 	bl	8002a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2140      	movs	r1, #64	; 0x40
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f8f3 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002970:	e00b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f000 f8ea 	bl	8002b56 <TIM_ITRx_SetConfig>
        break;
 8002982:	e002      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002984:	bf00      	nop
 8002986:	e000      	b.n	800298a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002988:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <TIM_Base_SetConfig+0xa8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d007      	beq.n	8002a14 <TIM_Base_SetConfig+0x28>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0a:	d003      	beq.n	8002a14 <TIM_Base_SetConfig+0x28>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <TIM_Base_SetConfig+0xac>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d108      	bne.n	8002a26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <TIM_Base_SetConfig+0xa8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_Base_SetConfig+0x52>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a34:	d003      	beq.n	8002a3e <TIM_Base_SetConfig+0x52>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <TIM_Base_SetConfig+0xac>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <TIM_Base_SetConfig+0xa8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d103      	bne.n	8002a84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	615a      	str	r2, [r3, #20]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400

08002a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f023 0201 	bic.w	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f023 030a 	bic.w	r3, r3, #10
 8002ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	621a      	str	r2, [r3, #32]
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f023 0210 	bic.w	r2, r3, #16
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	031b      	lsls	r3, r3, #12
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	621a      	str	r2, [r3, #32]
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f043 0307 	orr.w	r3, r3, #7
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	021a      	lsls	r2, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	609a      	str	r2, [r3, #8]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e041      	b.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2c:	d004      	beq.n	8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10c      	bne.n	8002c52 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40012c00 	.word	0x40012c00
 8002c74:	40000400 	.word	0x40000400

08002c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <__libc_init_array>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	2600      	movs	r6, #0
 8002ca0:	4d0c      	ldr	r5, [pc, #48]	; (8002cd4 <__libc_init_array+0x38>)
 8002ca2:	4c0d      	ldr	r4, [pc, #52]	; (8002cd8 <__libc_init_array+0x3c>)
 8002ca4:	1b64      	subs	r4, r4, r5
 8002ca6:	10a4      	asrs	r4, r4, #2
 8002ca8:	42a6      	cmp	r6, r4
 8002caa:	d109      	bne.n	8002cc0 <__libc_init_array+0x24>
 8002cac:	f000 f822 	bl	8002cf4 <_init>
 8002cb0:	2600      	movs	r6, #0
 8002cb2:	4d0a      	ldr	r5, [pc, #40]	; (8002cdc <__libc_init_array+0x40>)
 8002cb4:	4c0a      	ldr	r4, [pc, #40]	; (8002ce0 <__libc_init_array+0x44>)
 8002cb6:	1b64      	subs	r4, r4, r5
 8002cb8:	10a4      	asrs	r4, r4, #2
 8002cba:	42a6      	cmp	r6, r4
 8002cbc:	d105      	bne.n	8002cca <__libc_init_array+0x2e>
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
 8002cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc4:	4798      	blx	r3
 8002cc6:	3601      	adds	r6, #1
 8002cc8:	e7ee      	b.n	8002ca8 <__libc_init_array+0xc>
 8002cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cce:	4798      	blx	r3
 8002cd0:	3601      	adds	r6, #1
 8002cd2:	e7f2      	b.n	8002cba <__libc_init_array+0x1e>
 8002cd4:	08002d2c 	.word	0x08002d2c
 8002cd8:	08002d2c 	.word	0x08002d2c
 8002cdc:	08002d2c 	.word	0x08002d2c
 8002ce0:	08002d30 	.word	0x08002d30

08002ce4 <memset>:
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4402      	add	r2, r0
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d100      	bne.n	8002cee <memset+0xa>
 8002cec:	4770      	bx	lr
 8002cee:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf2:	e7f9      	b.n	8002ce8 <memset+0x4>

08002cf4 <_init>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	bf00      	nop
 8002cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfa:	bc08      	pop	{r3}
 8002cfc:	469e      	mov	lr, r3
 8002cfe:	4770      	bx	lr

08002d00 <_fini>:
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	bf00      	nop
 8002d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d06:	bc08      	pop	{r3}
 8002d08:	469e      	mov	lr, r3
 8002d0a:	4770      	bx	lr
