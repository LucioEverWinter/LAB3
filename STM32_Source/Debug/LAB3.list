
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b8  080030b8  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  080030b8  080030b8  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b8  080030b8  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080030c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000058  08003118  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003118  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008863  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ee  00000000  00000000  000288e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a68  00000000  00000000  0002b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1ad  00000000  00000000  00042058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820f7  00000000  00000000  0004d205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf2fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002810  00000000  00000000  000cf34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08003080 	.word	0x08003080

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08003080 	.word	0x08003080

0800014c <isButton1Pressed>:
int TimeOutForNoKeyPress = 1000;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000074 	.word	0x20000074

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000078 	.word	0x20000078

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000007c 	.word	0x2000007c

080001b8 <subKeyProcess>:

void subKeyProcess(int i){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d103      	bne.n	80001ce <subKeyProcess+0x16>
		button1_flag = 1;
 80001c6:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <subKeyProcess+0x3c>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
	else if(i == 1)
		button2_flag = 1;
	else if(i == 2)
		button3_flag = 1;
}
 80001cc:	e00c      	b.n	80001e8 <subKeyProcess+0x30>
	else if(i == 1)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d103      	bne.n	80001dc <subKeyProcess+0x24>
		button2_flag = 1;
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <subKeyProcess+0x40>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	e005      	b.n	80001e8 <subKeyProcess+0x30>
	else if(i == 2)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b02      	cmp	r3, #2
 80001e0:	d102      	bne.n	80001e8 <subKeyProcess+0x30>
		button3_flag = 1;
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <subKeyProcess+0x44>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	601a      	str	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	20000074 	.word	0x20000074
 80001f8:	20000078 	.word	0x20000078
 80001fc:	2000007c 	.word	0x2000007c

08000200 <getKeyInput>:

void getKeyInput(){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++){
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e08f      	b.n	800032c <getKeyInput+0x12c>
		KeyReg2[i] = KeyReg1[i];
 800020c:	4a4c      	ldr	r2, [pc, #304]	; (8000340 <getKeyInput+0x140>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	494b      	ldr	r1, [pc, #300]	; (8000344 <getKeyInput+0x144>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800021c:	4a4a      	ldr	r2, [pc, #296]	; (8000348 <getKeyInput+0x148>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4946      	ldr	r1, [pc, #280]	; (8000340 <getKeyInput+0x140>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ( i == 0) {
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d10a      	bne.n	8000248 <getKeyInput+0x48>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin);
 8000232:	2102      	movs	r1, #2
 8000234:	4845      	ldr	r0, [pc, #276]	; (800034c <getKeyInput+0x14c>)
 8000236:	f001 fee3 	bl	8002000 <HAL_GPIO_ReadPin>
 800023a:	4603      	mov	r3, r0
 800023c:	4619      	mov	r1, r3
 800023e:	4a42      	ldr	r2, [pc, #264]	; (8000348 <getKeyInput+0x148>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000246:	e01a      	b.n	800027e <getKeyInput+0x7e>
		}
		else if ( i == 1) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d10a      	bne.n	8000264 <getKeyInput+0x64>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUT2_GPIO_Port, BUT2_Pin);
 800024e:	2104      	movs	r1, #4
 8000250:	483e      	ldr	r0, [pc, #248]	; (800034c <getKeyInput+0x14c>)
 8000252:	f001 fed5 	bl	8002000 <HAL_GPIO_ReadPin>
 8000256:	4603      	mov	r3, r0
 8000258:	4619      	mov	r1, r3
 800025a:	4a3b      	ldr	r2, [pc, #236]	; (8000348 <getKeyInput+0x148>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000262:	e00c      	b.n	800027e <getKeyInput+0x7e>
		}
		else if ( i == 2) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b02      	cmp	r3, #2
 8000268:	d109      	bne.n	800027e <getKeyInput+0x7e>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUT3_GPIO_Port, BUT3_Pin);
 800026a:	2108      	movs	r1, #8
 800026c:	4837      	ldr	r0, [pc, #220]	; (800034c <getKeyInput+0x14c>)
 800026e:	f001 fec7 	bl	8002000 <HAL_GPIO_ReadPin>
 8000272:	4603      	mov	r3, r0
 8000274:	4619      	mov	r1, r3
 8000276:	4a34      	ldr	r2, [pc, #208]	; (8000348 <getKeyInput+0x148>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800027e:	4a30      	ldr	r2, [pc, #192]	; (8000340 <getKeyInput+0x140>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000286:	4930      	ldr	r1, [pc, #192]	; (8000348 <getKeyInput+0x148>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028e:	429a      	cmp	r2, r3
 8000290:	d149      	bne.n	8000326 <getKeyInput+0x126>
 8000292:	4a2b      	ldr	r2, [pc, #172]	; (8000340 <getKeyInput+0x140>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029a:	492a      	ldr	r1, [pc, #168]	; (8000344 <getKeyInput+0x144>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d13f      	bne.n	8000326 <getKeyInput+0x126>
			if (KeyReg2[i] != KeyReg3[i]){
 80002a6:	4a27      	ldr	r2, [pc, #156]	; (8000344 <getKeyInput+0x144>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ae:	4928      	ldr	r1, [pc, #160]	; (8000350 <getKeyInput+0x150>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d017      	beq.n	80002ea <getKeyInput+0xea>
			  KeyReg3[i] = KeyReg2[i];
 80002ba:	4a22      	ldr	r2, [pc, #136]	; (8000344 <getKeyInput+0x144>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c2:	4923      	ldr	r1, [pc, #140]	; (8000350 <getKeyInput+0x150>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			  if (KeyReg2[i] == PRESSED_STATE){
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <getKeyInput+0x144>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d127      	bne.n	8000326 <getKeyInput+0x126>

				subKeyProcess(i);
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f7ff ff6e 	bl	80001b8 <subKeyProcess>

				TimeOutForKeyPress[i] = 300; // note: not need for step 1
 80002dc:	4a1d      	ldr	r2, [pc, #116]	; (8000354 <getKeyInput+0x154>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002e8:	e01d      	b.n	8000326 <getKeyInput+0x126>
				//One pressed
			  }
			}else{
			   TimeOutForKeyPress[i] --;
 80002ea:	4a1a      	ldr	r2, [pc, #104]	; (8000354 <getKeyInput+0x154>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f2:	1e5a      	subs	r2, r3, #1
 80002f4:	4917      	ldr	r1, [pc, #92]	; (8000354 <getKeyInput+0x154>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 80002fc:	4a15      	ldr	r2, [pc, #84]	; (8000354 <getKeyInput+0x154>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d10e      	bne.n	8000326 <getKeyInput+0x126>
				  if (KeyReg2[i] == PRESSED_STATE){
 8000308:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <getKeyInput+0x144>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <getKeyInput+0x11a>
					  subKeyProcess(i);
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f7ff ff4f 	bl	80001b8 <subKeyProcess>
				  }
				  //Long pressed

				  TimeOutForKeyPress[i] = 300;
 800031a:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <getKeyInput+0x154>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3301      	adds	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b02      	cmp	r3, #2
 8000330:	f77f af6c 	ble.w	800020c <getKeyInput+0xc>
				}
		    }
		}
	}
}
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000000c 	.word	0x2000000c
 8000344:	20000018 	.word	0x20000018
 8000348:	20000000 	.word	0x20000000
 800034c:	40010800 	.word	0x40010800
 8000350:	20000024 	.word	0x20000024
 8000354:	20000030 	.word	0x20000030

08000358 <fsm_run>:
int tempYELLOW = 0;
int tempGREEN = 0;
int dis1 = 0;
int dis2 = 0;

void fsm_run() {
 8000358:	b5b0      	push	{r4, r5, r7, lr}
 800035a:	af00      	add	r7, sp, #0
	switch (state) {
 800035c:	4bb6      	ldr	r3, [pc, #728]	; (8000638 <fsm_run+0x2e0>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b28      	cmp	r3, #40	; 0x28
 8000362:	f200 8505 	bhi.w	8000d70 <fsm_run+0xa18>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <fsm_run+0x14>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	08000411 	.word	0x08000411
 8000370:	0800048f 	.word	0x0800048f
 8000374:	0800079f 	.word	0x0800079f
 8000378:	080009a1 	.word	0x080009a1
 800037c:	08000b99 	.word	0x08000b99
 8000380:	08000d71 	.word	0x08000d71
 8000384:	08000d71 	.word	0x08000d71
 8000388:	08000d71 	.word	0x08000d71
 800038c:	08000d71 	.word	0x08000d71
 8000390:	08000d71 	.word	0x08000d71
 8000394:	08000d71 	.word	0x08000d71
 8000398:	08000d71 	.word	0x08000d71
 800039c:	08000d71 	.word	0x08000d71
 80003a0:	08000d71 	.word	0x08000d71
 80003a4:	08000d71 	.word	0x08000d71
 80003a8:	08000d71 	.word	0x08000d71
 80003ac:	08000d71 	.word	0x08000d71
 80003b0:	08000d71 	.word	0x08000d71
 80003b4:	08000d71 	.word	0x08000d71
 80003b8:	08000d71 	.word	0x08000d71
 80003bc:	080008ad 	.word	0x080008ad
 80003c0:	08000d71 	.word	0x08000d71
 80003c4:	08000d71 	.word	0x08000d71
 80003c8:	08000d71 	.word	0x08000d71
 80003cc:	08000d71 	.word	0x08000d71
 80003d0:	08000d71 	.word	0x08000d71
 80003d4:	08000d71 	.word	0x08000d71
 80003d8:	08000d71 	.word	0x08000d71
 80003dc:	08000d71 	.word	0x08000d71
 80003e0:	08000d71 	.word	0x08000d71
 80003e4:	08000a85 	.word	0x08000a85
 80003e8:	08000d71 	.word	0x08000d71
 80003ec:	08000d71 	.word	0x08000d71
 80003f0:	08000d71 	.word	0x08000d71
 80003f4:	08000d71 	.word	0x08000d71
 80003f8:	08000d71 	.word	0x08000d71
 80003fc:	08000d71 	.word	0x08000d71
 8000400:	08000d71 	.word	0x08000d71
 8000404:	08000d71 	.word	0x08000d71
 8000408:	08000d71 	.word	0x08000d71
 800040c:	08000c7d 	.word	0x08000c7d
	case RESET:
		setTimer1(500);
 8000410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000414:	f001 f9ee 	bl	80017f4 <setTimer1>
		setTimer2(1000);
 8000418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800041c:	f001 fa04 	bl	8001828 <setTimer2>

		tempRED = timeRED;
 8000420:	4b86      	ldr	r3, [pc, #536]	; (800063c <fsm_run+0x2e4>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a86      	ldr	r2, [pc, #536]	; (8000640 <fsm_run+0x2e8>)
 8000426:	6013      	str	r3, [r2, #0]
		tempYELLOW = timeYELLOW;
 8000428:	4b86      	ldr	r3, [pc, #536]	; (8000644 <fsm_run+0x2ec>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a86      	ldr	r2, [pc, #536]	; (8000648 <fsm_run+0x2f0>)
 800042e:	6013      	str	r3, [r2, #0]
		tempGREEN = timeGREEN;
 8000430:	4b86      	ldr	r3, [pc, #536]	; (800064c <fsm_run+0x2f4>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a86      	ldr	r2, [pc, #536]	; (8000650 <fsm_run+0x2f8>)
 8000436:	6013      	str	r3, [r2, #0]

		counter1 = 0;
 8000438:	4b86      	ldr	r3, [pc, #536]	; (8000654 <fsm_run+0x2fc>)
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
		counter2 = 0;
 800043e:	4b86      	ldr	r3, [pc, #536]	; (8000658 <fsm_run+0x300>)
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2110      	movs	r1, #16
 8000448:	4884      	ldr	r0, [pc, #528]	; (800065c <fsm_run+0x304>)
 800044a:	f001 fdf0 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	4882      	ldr	r0, [pc, #520]	; (800065c <fsm_run+0x304>)
 8000454:	f001 fdeb 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000458:	2201      	movs	r2, #1
 800045a:	2120      	movs	r1, #32
 800045c:	487f      	ldr	r0, [pc, #508]	; (800065c <fsm_run+0x304>)
 800045e:	f001 fde6 	bl	800202e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000462:	2201      	movs	r2, #1
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	487d      	ldr	r0, [pc, #500]	; (800065c <fsm_run+0x304>)
 8000468:	f001 fde1 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000472:	487a      	ldr	r0, [pc, #488]	; (800065c <fsm_run+0x304>)
 8000474:	f001 fddb 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047e:	4877      	ldr	r0, [pc, #476]	; (800065c <fsm_run+0x304>)
 8000480:	f001 fdd5 	bl	800202e <HAL_GPIO_WritePin>

		state = MODE_1;
 8000484:	4b6c      	ldr	r3, [pc, #432]	; (8000638 <fsm_run+0x2e0>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]
		break;
 800048a:	f000 bc80 	b.w	8000d8e <fsm_run+0xa36>
	case MODE_1:
		updateClockBuffer(dis1/10, dis1%10, dis2/10, dis2%10);
 800048e:	4b74      	ldr	r3, [pc, #464]	; (8000660 <fsm_run+0x308>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a74      	ldr	r2, [pc, #464]	; (8000664 <fsm_run+0x30c>)
 8000494:	fb82 1203 	smull	r1, r2, r2, r3
 8000498:	1092      	asrs	r2, r2, #2
 800049a:	17db      	asrs	r3, r3, #31
 800049c:	1ad4      	subs	r4, r2, r3
 800049e:	4b70      	ldr	r3, [pc, #448]	; (8000660 <fsm_run+0x308>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	4b70      	ldr	r3, [pc, #448]	; (8000664 <fsm_run+0x30c>)
 80004a4:	fb83 1302 	smull	r1, r3, r3, r2
 80004a8:	1099      	asrs	r1, r3, #2
 80004aa:	17d3      	asrs	r3, r2, #31
 80004ac:	1ac9      	subs	r1, r1, r3
 80004ae:	460b      	mov	r3, r1
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	440b      	add	r3, r1
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	1ad1      	subs	r1, r2, r3
 80004b8:	4b6b      	ldr	r3, [pc, #428]	; (8000668 <fsm_run+0x310>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a69      	ldr	r2, [pc, #420]	; (8000664 <fsm_run+0x30c>)
 80004be:	fb82 0203 	smull	r0, r2, r2, r3
 80004c2:	1092      	asrs	r2, r2, #2
 80004c4:	17db      	asrs	r3, r3, #31
 80004c6:	1ad5      	subs	r5, r2, r3
 80004c8:	4b67      	ldr	r3, [pc, #412]	; (8000668 <fsm_run+0x310>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b65      	ldr	r3, [pc, #404]	; (8000664 <fsm_run+0x30c>)
 80004ce:	fb83 0302 	smull	r0, r3, r3, r2
 80004d2:	1098      	asrs	r0, r3, #2
 80004d4:	17d3      	asrs	r3, r2, #31
 80004d6:	1ac0      	subs	r0, r0, r3
 80004d8:	4603      	mov	r3, r0
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4403      	add	r3, r0
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	1ad0      	subs	r0, r2, r3
 80004e2:	4603      	mov	r3, r0
 80004e4:	462a      	mov	r2, r5
 80004e6:	4620      	mov	r0, r4
 80004e8:	f000 ffba 	bl	8001460 <updateClockBuffer>

		if(timer1_flag == 1){
 80004ec:	4b5f      	ldr	r3, [pc, #380]	; (800066c <fsm_run+0x314>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	f040 8120 	bne.w	8000736 <fsm_run+0x3de>
			counter1++;
 80004f6:	4b57      	ldr	r3, [pc, #348]	; (8000654 <fsm_run+0x2fc>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3301      	adds	r3, #1
 80004fc:	4a55      	ldr	r2, [pc, #340]	; (8000654 <fsm_run+0x2fc>)
 80004fe:	6013      	str	r3, [r2, #0]
			counter2++;
 8000500:	4b55      	ldr	r3, [pc, #340]	; (8000658 <fsm_run+0x300>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	4a54      	ldr	r2, [pc, #336]	; (8000658 <fsm_run+0x300>)
 8000508:	6013      	str	r3, [r2, #0]

			if(counter1 <= timeRED){
 800050a:	4b52      	ldr	r3, [pc, #328]	; (8000654 <fsm_run+0x2fc>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b4b      	ldr	r3, [pc, #300]	; (800063c <fsm_run+0x2e4>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	429a      	cmp	r2, r3
 8000514:	dc16      	bgt.n	8000544 <fsm_run+0x1ec>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2110      	movs	r1, #16
 800051a:	4850      	ldr	r0, [pc, #320]	; (800065c <fsm_run+0x304>)
 800051c:	f001 fd87 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	2120      	movs	r1, #32
 8000524:	484d      	ldr	r0, [pc, #308]	; (800065c <fsm_run+0x304>)
 8000526:	f001 fd82 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	2140      	movs	r1, #64	; 0x40
 800052e:	484b      	ldr	r0, [pc, #300]	; (800065c <fsm_run+0x304>)
 8000530:	f001 fd7d 	bl	800202e <HAL_GPIO_WritePin>

				dis1 = timeRED - counter1;
 8000534:	4b41      	ldr	r3, [pc, #260]	; (800063c <fsm_run+0x2e4>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b46      	ldr	r3, [pc, #280]	; (8000654 <fsm_run+0x2fc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	4a48      	ldr	r2, [pc, #288]	; (8000660 <fsm_run+0x308>)
 8000540:	6013      	str	r3, [r2, #0]
 8000542:	e04a      	b.n	80005da <fsm_run+0x282>
			}
			else if(counter1 <= timeRED + timeGREEN){
 8000544:	4b3d      	ldr	r3, [pc, #244]	; (800063c <fsm_run+0x2e4>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b40      	ldr	r3, [pc, #256]	; (800064c <fsm_run+0x2f4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	441a      	add	r2, r3
 800054e:	4b41      	ldr	r3, [pc, #260]	; (8000654 <fsm_run+0x2fc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	db19      	blt.n	800058a <fsm_run+0x232>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2110      	movs	r1, #16
 800055a:	4840      	ldr	r0, [pc, #256]	; (800065c <fsm_run+0x304>)
 800055c:	f001 fd67 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2120      	movs	r1, #32
 8000564:	483d      	ldr	r0, [pc, #244]	; (800065c <fsm_run+0x304>)
 8000566:	f001 fd62 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2140      	movs	r1, #64	; 0x40
 800056e:	483b      	ldr	r0, [pc, #236]	; (800065c <fsm_run+0x304>)
 8000570:	f001 fd5d 	bl	800202e <HAL_GPIO_WritePin>

				dis1 = timeRED + timeGREEN - counter1;
 8000574:	4b31      	ldr	r3, [pc, #196]	; (800063c <fsm_run+0x2e4>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b34      	ldr	r3, [pc, #208]	; (800064c <fsm_run+0x2f4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	441a      	add	r2, r3
 800057e:	4b35      	ldr	r3, [pc, #212]	; (8000654 <fsm_run+0x2fc>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	4a36      	ldr	r2, [pc, #216]	; (8000660 <fsm_run+0x308>)
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	e027      	b.n	80005da <fsm_run+0x282>
			}
			else if(counter1 <= timeRED + timeYELLOW + timeGREEN){
 800058a:	4b2c      	ldr	r3, [pc, #176]	; (800063c <fsm_run+0x2e4>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <fsm_run+0x2ec>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	441a      	add	r2, r3
 8000594:	4b2d      	ldr	r3, [pc, #180]	; (800064c <fsm_run+0x2f4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	441a      	add	r2, r3
 800059a:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <fsm_run+0x2fc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	429a      	cmp	r2, r3
 80005a0:	db1b      	blt.n	80005da <fsm_run+0x282>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2110      	movs	r1, #16
 80005a6:	482d      	ldr	r0, [pc, #180]	; (800065c <fsm_run+0x304>)
 80005a8:	f001 fd41 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2120      	movs	r1, #32
 80005b0:	482a      	ldr	r0, [pc, #168]	; (800065c <fsm_run+0x304>)
 80005b2:	f001 fd3c 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2140      	movs	r1, #64	; 0x40
 80005ba:	4828      	ldr	r0, [pc, #160]	; (800065c <fsm_run+0x304>)
 80005bc:	f001 fd37 	bl	800202e <HAL_GPIO_WritePin>

				dis1 = timeRED + timeYELLOW + timeGREEN - counter1;
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <fsm_run+0x2e4>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <fsm_run+0x2ec>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	441a      	add	r2, r3
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <fsm_run+0x2f4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	441a      	add	r2, r3
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <fsm_run+0x2fc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	4a22      	ldr	r2, [pc, #136]	; (8000660 <fsm_run+0x308>)
 80005d8:	6013      	str	r3, [r2, #0]
			}
			if(counter1 >= timeRED + timeYELLOW + timeGREEN) counter1 = -1;
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <fsm_run+0x2e4>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <fsm_run+0x2ec>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	441a      	add	r2, r3
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <fsm_run+0x2f4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	441a      	add	r2, r3
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <fsm_run+0x2fc>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	dc03      	bgt.n	80005fa <fsm_run+0x2a2>
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <fsm_run+0x2fc>)
 80005f4:	f04f 32ff 	mov.w	r2, #4294967295
 80005f8:	601a      	str	r2, [r3, #0]

			if(counter2 <= timeGREEN){
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <fsm_run+0x300>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <fsm_run+0x2f4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	dc34      	bgt.n	8000670 <fsm_run+0x318>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	4814      	ldr	r0, [pc, #80]	; (800065c <fsm_run+0x304>)
 800060c:	f001 fd0f 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000616:	4811      	ldr	r0, [pc, #68]	; (800065c <fsm_run+0x304>)
 8000618:	f001 fd09 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000622:	480e      	ldr	r0, [pc, #56]	; (800065c <fsm_run+0x304>)
 8000624:	f001 fd03 	bl	800202e <HAL_GPIO_WritePin>

				dis2 = timeGREEN - counter2;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <fsm_run+0x2f4>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <fsm_run+0x300>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <fsm_run+0x310>)
 8000634:	6013      	str	r3, [r2, #0]
 8000636:	e06a      	b.n	800070e <fsm_run+0x3b6>
 8000638:	2000009c 	.word	0x2000009c
 800063c:	2000003c 	.word	0x2000003c
 8000640:	20000088 	.word	0x20000088
 8000644:	20000044 	.word	0x20000044
 8000648:	2000008c 	.word	0x2000008c
 800064c:	20000040 	.word	0x20000040
 8000650:	20000090 	.word	0x20000090
 8000654:	20000080 	.word	0x20000080
 8000658:	20000084 	.word	0x20000084
 800065c:	40010800 	.word	0x40010800
 8000660:	20000094 	.word	0x20000094
 8000664:	66666667 	.word	0x66666667
 8000668:	20000098 	.word	0x20000098
 800066c:	20000104 	.word	0x20000104
			}
			else if(counter2 <= timeGREEN + timeYELLOW){
 8000670:	4b83      	ldr	r3, [pc, #524]	; (8000880 <fsm_run+0x528>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b83      	ldr	r3, [pc, #524]	; (8000884 <fsm_run+0x52c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	441a      	add	r2, r3
 800067a:	4b83      	ldr	r3, [pc, #524]	; (8000888 <fsm_run+0x530>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	429a      	cmp	r2, r3
 8000680:	db1b      	blt.n	80006ba <fsm_run+0x362>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	4881      	ldr	r0, [pc, #516]	; (800088c <fsm_run+0x534>)
 8000688:	f001 fcd1 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000692:	487e      	ldr	r0, [pc, #504]	; (800088c <fsm_run+0x534>)
 8000694:	f001 fccb 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069e:	487b      	ldr	r0, [pc, #492]	; (800088c <fsm_run+0x534>)
 80006a0:	f001 fcc5 	bl	800202e <HAL_GPIO_WritePin>

				dis2 = timeGREEN + timeYELLOW - counter2;
 80006a4:	4b76      	ldr	r3, [pc, #472]	; (8000880 <fsm_run+0x528>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b76      	ldr	r3, [pc, #472]	; (8000884 <fsm_run+0x52c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	441a      	add	r2, r3
 80006ae:	4b76      	ldr	r3, [pc, #472]	; (8000888 <fsm_run+0x530>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	4a76      	ldr	r2, [pc, #472]	; (8000890 <fsm_run+0x538>)
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	e029      	b.n	800070e <fsm_run+0x3b6>
			}
			else if(counter2 <= timeRED + timeYELLOW + timeGREEN){
 80006ba:	4b76      	ldr	r3, [pc, #472]	; (8000894 <fsm_run+0x53c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b71      	ldr	r3, [pc, #452]	; (8000884 <fsm_run+0x52c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	441a      	add	r2, r3
 80006c4:	4b6e      	ldr	r3, [pc, #440]	; (8000880 <fsm_run+0x528>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	441a      	add	r2, r3
 80006ca:	4b6f      	ldr	r3, [pc, #444]	; (8000888 <fsm_run+0x530>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	db1d      	blt.n	800070e <fsm_run+0x3b6>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	486d      	ldr	r0, [pc, #436]	; (800088c <fsm_run+0x534>)
 80006d8:	f001 fca9 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e2:	486a      	ldr	r0, [pc, #424]	; (800088c <fsm_run+0x534>)
 80006e4:	f001 fca3 	bl	800202e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ee:	4867      	ldr	r0, [pc, #412]	; (800088c <fsm_run+0x534>)
 80006f0:	f001 fc9d 	bl	800202e <HAL_GPIO_WritePin>

				dis2 = timeRED + timeYELLOW + timeGREEN - counter2;
 80006f4:	4b67      	ldr	r3, [pc, #412]	; (8000894 <fsm_run+0x53c>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b62      	ldr	r3, [pc, #392]	; (8000884 <fsm_run+0x52c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	441a      	add	r2, r3
 80006fe:	4b60      	ldr	r3, [pc, #384]	; (8000880 <fsm_run+0x528>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	441a      	add	r2, r3
 8000704:	4b60      	ldr	r3, [pc, #384]	; (8000888 <fsm_run+0x530>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	4a61      	ldr	r2, [pc, #388]	; (8000890 <fsm_run+0x538>)
 800070c:	6013      	str	r3, [r2, #0]
			}
			if(counter2 >= timeRED + timeYELLOW + timeGREEN) counter2 = -1;
 800070e:	4b61      	ldr	r3, [pc, #388]	; (8000894 <fsm_run+0x53c>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b5c      	ldr	r3, [pc, #368]	; (8000884 <fsm_run+0x52c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	441a      	add	r2, r3
 8000718:	4b59      	ldr	r3, [pc, #356]	; (8000880 <fsm_run+0x528>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	441a      	add	r2, r3
 800071e:	4b5a      	ldr	r3, [pc, #360]	; (8000888 <fsm_run+0x530>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	429a      	cmp	r2, r3
 8000724:	dc03      	bgt.n	800072e <fsm_run+0x3d6>
 8000726:	4b58      	ldr	r3, [pc, #352]	; (8000888 <fsm_run+0x530>)
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	601a      	str	r2, [r3, #0]

			setTimer1(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000732:	f001 f85f 	bl	80017f4 <setTimer1>
		}



		if (isButton1Pressed() == 1) {
 8000736:	f7ff fd09 	bl	800014c <isButton1Pressed>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	f040 8319 	bne.w	8000d74 <fsm_run+0xa1c>
			setTimer2(500);
 8000742:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000746:	f001 f86f 	bl	8001828 <setTimer2>

			counter1 = 0;
 800074a:	4b53      	ldr	r3, [pc, #332]	; (8000898 <fsm_run+0x540>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
			counter2 = 0;
 8000750:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <fsm_run+0x530>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]

			state = MODE_2;
 8000756:	4b51      	ldr	r3, [pc, #324]	; (800089c <fsm_run+0x544>)
 8000758:	2202      	movs	r2, #2
 800075a:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2110      	movs	r1, #16
 8000760:	484a      	ldr	r0, [pc, #296]	; (800088c <fsm_run+0x534>)
 8000762:	f001 fc64 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	4848      	ldr	r0, [pc, #288]	; (800088c <fsm_run+0x534>)
 800076c:	f001 fc5f 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
 8000774:	4845      	ldr	r0, [pc, #276]	; (800088c <fsm_run+0x534>)
 8000776:	f001 fc5a 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000780:	4842      	ldr	r0, [pc, #264]	; (800088c <fsm_run+0x534>)
 8000782:	f001 fc54 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2140      	movs	r1, #64	; 0x40
 800078a:	4840      	ldr	r0, [pc, #256]	; (800088c <fsm_run+0x534>)
 800078c:	f001 fc4f 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000796:	483d      	ldr	r0, [pc, #244]	; (800088c <fsm_run+0x534>)
 8000798:	f001 fc49 	bl	800202e <HAL_GPIO_WritePin>
		}
		break;
 800079c:	e2ea      	b.n	8000d74 <fsm_run+0xa1c>
	case MODE_2:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 800079e:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <fsm_run+0x548>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a40      	ldr	r2, [pc, #256]	; (80008a4 <fsm_run+0x54c>)
 80007a4:	fb82 1203 	smull	r1, r2, r2, r3
 80007a8:	1092      	asrs	r2, r2, #2
 80007aa:	17db      	asrs	r3, r3, #31
 80007ac:	1ad0      	subs	r0, r2, r3
 80007ae:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <fsm_run+0x548>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <fsm_run+0x54c>)
 80007b4:	fb83 1302 	smull	r1, r3, r3, r2
 80007b8:	1099      	asrs	r1, r3, #2
 80007ba:	17d3      	asrs	r3, r2, #31
 80007bc:	1ac9      	subs	r1, r1, r3
 80007be:	460b      	mov	r3, r1
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	440b      	add	r3, r1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	1ad1      	subs	r1, r2, r3
 80007c8:	460b      	mov	r3, r1
 80007ca:	4602      	mov	r2, r0
 80007cc:	2102      	movs	r1, #2
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fe46 	bl	8001460 <updateClockBuffer>

		if (timer2_flag == 1) {
 80007d4:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <fsm_run+0x550>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d10b      	bne.n	80007f4 <fsm_run+0x49c>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80007dc:	2110      	movs	r1, #16
 80007de:	482b      	ldr	r0, [pc, #172]	; (800088c <fsm_run+0x534>)
 80007e0:	f001 fc3d 	bl	800205e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	4829      	ldr	r0, [pc, #164]	; (800088c <fsm_run+0x534>)
 80007e8:	f001 fc39 	bl	800205e <HAL_GPIO_TogglePin>
			setTimer2(500);
 80007ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f0:	f001 f81a 	bl	8001828 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 80007f4:	f7ff fcaa 	bl	800014c <isButton1Pressed>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d126      	bne.n	800084c <fsm_run+0x4f4>
			setTimer2(500);
 80007fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000802:	f001 f811 	bl	8001828 <setTimer2>

			state = MODE_3;
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <fsm_run+0x544>)
 8000808:	2203      	movs	r2, #3
 800080a:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2110      	movs	r1, #16
 8000810:	481e      	ldr	r0, [pc, #120]	; (800088c <fsm_run+0x534>)
 8000812:	f001 fc0c 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	481c      	ldr	r0, [pc, #112]	; (800088c <fsm_run+0x534>)
 800081c:	f001 fc07 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2120      	movs	r1, #32
 8000824:	4819      	ldr	r0, [pc, #100]	; (800088c <fsm_run+0x534>)
 8000826:	f001 fc02 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	4816      	ldr	r0, [pc, #88]	; (800088c <fsm_run+0x534>)
 8000832:	f001 fbfc 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	4814      	ldr	r0, [pc, #80]	; (800088c <fsm_run+0x534>)
 800083c:	f001 fbf7 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <fsm_run+0x534>)
 8000848:	f001 fbf1 	bl	800202e <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 800084c:	f7ff fc90 	bl	8000170 <isButton2Pressed>
 8000850:	4603      	mov	r3, r0
 8000852:	2b01      	cmp	r3, #1
 8000854:	f040 8290 	bne.w	8000d78 <fsm_run+0xa20>
			setTimer2(500);
 8000858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085c:	f000 ffe4 	bl	8001828 <setTimer2>
			tempRED++;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <fsm_run+0x548>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <fsm_run+0x548>)
 8000868:	6013      	str	r3, [r2, #0]
			if (tempRED >= 100) tempRED = 0;
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <fsm_run+0x548>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b63      	cmp	r3, #99	; 0x63
 8000870:	dd02      	ble.n	8000878 <fsm_run+0x520>
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <fsm_run+0x548>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
			state = MODI_2;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <fsm_run+0x544>)
 800087a:	2214      	movs	r2, #20
 800087c:	601a      	str	r2, [r3, #0]
		}
		break;
 800087e:	e27b      	b.n	8000d78 <fsm_run+0xa20>
 8000880:	20000040 	.word	0x20000040
 8000884:	20000044 	.word	0x20000044
 8000888:	20000084 	.word	0x20000084
 800088c:	40010800 	.word	0x40010800
 8000890:	20000098 	.word	0x20000098
 8000894:	2000003c 	.word	0x2000003c
 8000898:	20000080 	.word	0x20000080
 800089c:	2000009c 	.word	0x2000009c
 80008a0:	20000088 	.word	0x20000088
 80008a4:	66666667 	.word	0x66666667
 80008a8:	2000010c 	.word	0x2000010c
	case MODI_2:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 80008ac:	4bb3      	ldr	r3, [pc, #716]	; (8000b7c <fsm_run+0x824>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4ab3      	ldr	r2, [pc, #716]	; (8000b80 <fsm_run+0x828>)
 80008b2:	fb82 1203 	smull	r1, r2, r2, r3
 80008b6:	1092      	asrs	r2, r2, #2
 80008b8:	17db      	asrs	r3, r3, #31
 80008ba:	1ad0      	subs	r0, r2, r3
 80008bc:	4baf      	ldr	r3, [pc, #700]	; (8000b7c <fsm_run+0x824>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4baf      	ldr	r3, [pc, #700]	; (8000b80 <fsm_run+0x828>)
 80008c2:	fb83 1302 	smull	r1, r3, r3, r2
 80008c6:	1099      	asrs	r1, r3, #2
 80008c8:	17d3      	asrs	r3, r2, #31
 80008ca:	1ac9      	subs	r1, r1, r3
 80008cc:	460b      	mov	r3, r1
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	440b      	add	r3, r1
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	1ad1      	subs	r1, r2, r3
 80008d6:	460b      	mov	r3, r1
 80008d8:	4602      	mov	r2, r0
 80008da:	2102      	movs	r1, #2
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 fdbf 	bl	8001460 <updateClockBuffer>

		if (timer2_flag == 1) {
 80008e2:	4ba8      	ldr	r3, [pc, #672]	; (8000b84 <fsm_run+0x82c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d10b      	bne.n	8000902 <fsm_run+0x5aa>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80008ea:	2110      	movs	r1, #16
 80008ec:	48a6      	ldr	r0, [pc, #664]	; (8000b88 <fsm_run+0x830>)
 80008ee:	f001 fbb6 	bl	800205e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 80008f2:	2180      	movs	r1, #128	; 0x80
 80008f4:	48a4      	ldr	r0, [pc, #656]	; (8000b88 <fsm_run+0x830>)
 80008f6:	f001 fbb2 	bl	800205e <HAL_GPIO_TogglePin>
			setTimer2(500);
 80008fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fe:	f000 ff93 	bl	8001828 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000902:	f7ff fc23 	bl	800014c <isButton1Pressed>
 8000906:	4603      	mov	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	d126      	bne.n	800095a <fsm_run+0x602>
			setTimer2(500);
 800090c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000910:	f000 ff8a 	bl	8001828 <setTimer2>

			state = MODE_3;
 8000914:	4b9d      	ldr	r3, [pc, #628]	; (8000b8c <fsm_run+0x834>)
 8000916:	2203      	movs	r2, #3
 8000918:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	2110      	movs	r1, #16
 800091e:	489a      	ldr	r0, [pc, #616]	; (8000b88 <fsm_run+0x830>)
 8000920:	f001 fb85 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	4897      	ldr	r0, [pc, #604]	; (8000b88 <fsm_run+0x830>)
 800092a:	f001 fb80 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2120      	movs	r1, #32
 8000932:	4895      	ldr	r0, [pc, #596]	; (8000b88 <fsm_run+0x830>)
 8000934:	f001 fb7b 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093e:	4892      	ldr	r0, [pc, #584]	; (8000b88 <fsm_run+0x830>)
 8000940:	f001 fb75 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2140      	movs	r1, #64	; 0x40
 8000948:	488f      	ldr	r0, [pc, #572]	; (8000b88 <fsm_run+0x830>)
 800094a:	f001 fb70 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000954:	488c      	ldr	r0, [pc, #560]	; (8000b88 <fsm_run+0x830>)
 8000956:	f001 fb6a 	bl	800202e <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 800095a:	f7ff fc09 	bl	8000170 <isButton2Pressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10f      	bne.n	8000984 <fsm_run+0x62c>
			setTimer2(500);
 8000964:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000968:	f000 ff5e 	bl	8001828 <setTimer2>
			tempRED++;
 800096c:	4b83      	ldr	r3, [pc, #524]	; (8000b7c <fsm_run+0x824>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	4a82      	ldr	r2, [pc, #520]	; (8000b7c <fsm_run+0x824>)
 8000974:	6013      	str	r3, [r2, #0]
			if (tempRED >= 100) tempRED = 0;
 8000976:	4b81      	ldr	r3, [pc, #516]	; (8000b7c <fsm_run+0x824>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b63      	cmp	r3, #99	; 0x63
 800097c:	dd02      	ble.n	8000984 <fsm_run+0x62c>
 800097e:	4b7f      	ldr	r3, [pc, #508]	; (8000b7c <fsm_run+0x824>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 8000984:	f7ff fc06 	bl	8000194 <isButton3Pressed>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	f040 81f6 	bne.w	8000d7c <fsm_run+0xa24>
			timeRED = tempRED;
 8000990:	4b7a      	ldr	r3, [pc, #488]	; (8000b7c <fsm_run+0x824>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a7e      	ldr	r2, [pc, #504]	; (8000b90 <fsm_run+0x838>)
 8000996:	6013      	str	r3, [r2, #0]
			state = MODE_2;
 8000998:	4b7c      	ldr	r3, [pc, #496]	; (8000b8c <fsm_run+0x834>)
 800099a:	2202      	movs	r2, #2
 800099c:	601a      	str	r2, [r3, #0]
		}
		break;
 800099e:	e1ed      	b.n	8000d7c <fsm_run+0xa24>
	case MODE_3:
		updateClockBuffer(0, 3, tempYELLOW/10, tempYELLOW%10);
 80009a0:	4b7c      	ldr	r3, [pc, #496]	; (8000b94 <fsm_run+0x83c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a76      	ldr	r2, [pc, #472]	; (8000b80 <fsm_run+0x828>)
 80009a6:	fb82 1203 	smull	r1, r2, r2, r3
 80009aa:	1092      	asrs	r2, r2, #2
 80009ac:	17db      	asrs	r3, r3, #31
 80009ae:	1ad0      	subs	r0, r2, r3
 80009b0:	4b78      	ldr	r3, [pc, #480]	; (8000b94 <fsm_run+0x83c>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b72      	ldr	r3, [pc, #456]	; (8000b80 <fsm_run+0x828>)
 80009b6:	fb83 1302 	smull	r1, r3, r3, r2
 80009ba:	1099      	asrs	r1, r3, #2
 80009bc:	17d3      	asrs	r3, r2, #31
 80009be:	1ac9      	subs	r1, r1, r3
 80009c0:	460b      	mov	r3, r1
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	440b      	add	r3, r1
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	1ad1      	subs	r1, r2, r3
 80009ca:	460b      	mov	r3, r1
 80009cc:	4602      	mov	r2, r0
 80009ce:	2103      	movs	r1, #3
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 fd45 	bl	8001460 <updateClockBuffer>

		if (timer2_flag == 1) {
 80009d6:	4b6b      	ldr	r3, [pc, #428]	; (8000b84 <fsm_run+0x82c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d10c      	bne.n	80009f8 <fsm_run+0x6a0>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80009de:	2120      	movs	r1, #32
 80009e0:	4869      	ldr	r0, [pc, #420]	; (8000b88 <fsm_run+0x830>)
 80009e2:	f001 fb3c 	bl	800205e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 80009e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ea:	4867      	ldr	r0, [pc, #412]	; (8000b88 <fsm_run+0x830>)
 80009ec:	f001 fb37 	bl	800205e <HAL_GPIO_TogglePin>
			setTimer2(500);
 80009f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f4:	f000 ff18 	bl	8001828 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 80009f8:	f7ff fba8 	bl	800014c <isButton1Pressed>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d126      	bne.n	8000a50 <fsm_run+0x6f8>
			setTimer2(500);
 8000a02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a06:	f000 ff0f 	bl	8001828 <setTimer2>

			state = MODE_4;
 8000a0a:	4b60      	ldr	r3, [pc, #384]	; (8000b8c <fsm_run+0x834>)
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2110      	movs	r1, #16
 8000a14:	485c      	ldr	r0, [pc, #368]	; (8000b88 <fsm_run+0x830>)
 8000a16:	f001 fb0a 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	485a      	ldr	r0, [pc, #360]	; (8000b88 <fsm_run+0x830>)
 8000a20:	f001 fb05 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2120      	movs	r1, #32
 8000a28:	4857      	ldr	r0, [pc, #348]	; (8000b88 <fsm_run+0x830>)
 8000a2a:	f001 fb00 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a34:	4854      	ldr	r0, [pc, #336]	; (8000b88 <fsm_run+0x830>)
 8000a36:	f001 fafa 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	4852      	ldr	r0, [pc, #328]	; (8000b88 <fsm_run+0x830>)
 8000a40:	f001 faf5 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4a:	484f      	ldr	r0, [pc, #316]	; (8000b88 <fsm_run+0x830>)
 8000a4c:	f001 faef 	bl	800202e <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 8000a50:	f7ff fb8e 	bl	8000170 <isButton2Pressed>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	f040 8192 	bne.w	8000d80 <fsm_run+0xa28>
			setTimer2(500);
 8000a5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a60:	f000 fee2 	bl	8001828 <setTimer2>
			tempYELLOW++;
 8000a64:	4b4b      	ldr	r3, [pc, #300]	; (8000b94 <fsm_run+0x83c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	4a4a      	ldr	r2, [pc, #296]	; (8000b94 <fsm_run+0x83c>)
 8000a6c:	6013      	str	r3, [r2, #0]
			if (tempYELLOW >= 100) tempYELLOW = 0;
 8000a6e:	4b49      	ldr	r3, [pc, #292]	; (8000b94 <fsm_run+0x83c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b63      	cmp	r3, #99	; 0x63
 8000a74:	dd02      	ble.n	8000a7c <fsm_run+0x724>
 8000a76:	4b47      	ldr	r3, [pc, #284]	; (8000b94 <fsm_run+0x83c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
			state = MODI_3;
 8000a7c:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <fsm_run+0x834>)
 8000a7e:	221e      	movs	r2, #30
 8000a80:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a82:	e17d      	b.n	8000d80 <fsm_run+0xa28>
	case MODI_3:
		updateClockBuffer(0, 3, tempYELLOW/10, tempYELLOW%10);
 8000a84:	4b43      	ldr	r3, [pc, #268]	; (8000b94 <fsm_run+0x83c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a3d      	ldr	r2, [pc, #244]	; (8000b80 <fsm_run+0x828>)
 8000a8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8e:	1092      	asrs	r2, r2, #2
 8000a90:	17db      	asrs	r3, r3, #31
 8000a92:	1ad0      	subs	r0, r2, r3
 8000a94:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <fsm_run+0x83c>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <fsm_run+0x828>)
 8000a9a:	fb83 1302 	smull	r1, r3, r3, r2
 8000a9e:	1099      	asrs	r1, r3, #2
 8000aa0:	17d3      	asrs	r3, r2, #31
 8000aa2:	1ac9      	subs	r1, r1, r3
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	1ad1      	subs	r1, r2, r3
 8000aae:	460b      	mov	r3, r1
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	2103      	movs	r1, #3
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 fcd3 	bl	8001460 <updateClockBuffer>

		if (timer2_flag == 1) {
 8000aba:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <fsm_run+0x82c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d10c      	bne.n	8000adc <fsm_run+0x784>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	4830      	ldr	r0, [pc, #192]	; (8000b88 <fsm_run+0x830>)
 8000ac6:	f001 faca 	bl	800205e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 8000aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ace:	482e      	ldr	r0, [pc, #184]	; (8000b88 <fsm_run+0x830>)
 8000ad0:	f001 fac5 	bl	800205e <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000ad4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad8:	f000 fea6 	bl	8001828 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000adc:	f7ff fb36 	bl	800014c <isButton1Pressed>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d126      	bne.n	8000b34 <fsm_run+0x7dc>
			setTimer2(500);
 8000ae6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aea:	f000 fe9d 	bl	8001828 <setTimer2>

			state = MODE_4;
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <fsm_run+0x834>)
 8000af0:	2204      	movs	r2, #4
 8000af2:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2110      	movs	r1, #16
 8000af8:	4823      	ldr	r0, [pc, #140]	; (8000b88 <fsm_run+0x830>)
 8000afa:	f001 fa98 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	4821      	ldr	r0, [pc, #132]	; (8000b88 <fsm_run+0x830>)
 8000b04:	f001 fa93 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	481e      	ldr	r0, [pc, #120]	; (8000b88 <fsm_run+0x830>)
 8000b0e:	f001 fa8e 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b18:	481b      	ldr	r0, [pc, #108]	; (8000b88 <fsm_run+0x830>)
 8000b1a:	f001 fa88 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	4819      	ldr	r0, [pc, #100]	; (8000b88 <fsm_run+0x830>)
 8000b24:	f001 fa83 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2e:	4816      	ldr	r0, [pc, #88]	; (8000b88 <fsm_run+0x830>)
 8000b30:	f001 fa7d 	bl	800202e <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 8000b34:	f7ff fb1c 	bl	8000170 <isButton2Pressed>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d10f      	bne.n	8000b5e <fsm_run+0x806>
			setTimer2(500);
 8000b3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b42:	f000 fe71 	bl	8001828 <setTimer2>
			tempYELLOW++;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <fsm_run+0x83c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <fsm_run+0x83c>)
 8000b4e:	6013      	str	r3, [r2, #0]
			if (tempYELLOW >= 100) tempYELLOW = 0;
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <fsm_run+0x83c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b63      	cmp	r3, #99	; 0x63
 8000b56:	dd02      	ble.n	8000b5e <fsm_run+0x806>
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <fsm_run+0x83c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 8000b5e:	f7ff fb19 	bl	8000194 <isButton3Pressed>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	f040 810d 	bne.w	8000d84 <fsm_run+0xa2c>
			tempYELLOW = tempYELLOW;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <fsm_run+0x83c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <fsm_run+0x83c>)
 8000b70:	6013      	str	r3, [r2, #0]
			state = MODE_3;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <fsm_run+0x834>)
 8000b74:	2203      	movs	r2, #3
 8000b76:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b78:	e104      	b.n	8000d84 <fsm_run+0xa2c>
 8000b7a:	bf00      	nop
 8000b7c:	20000088 	.word	0x20000088
 8000b80:	66666667 	.word	0x66666667
 8000b84:	2000010c 	.word	0x2000010c
 8000b88:	40010800 	.word	0x40010800
 8000b8c:	2000009c 	.word	0x2000009c
 8000b90:	2000003c 	.word	0x2000003c
 8000b94:	2000008c 	.word	0x2000008c
	case MODE_4:
		updateClockBuffer(0, 4, tempGREEN/10, tempGREEN%10);
 8000b98:	4b7e      	ldr	r3, [pc, #504]	; (8000d94 <fsm_run+0xa3c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a7e      	ldr	r2, [pc, #504]	; (8000d98 <fsm_run+0xa40>)
 8000b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba2:	1092      	asrs	r2, r2, #2
 8000ba4:	17db      	asrs	r3, r3, #31
 8000ba6:	1ad0      	subs	r0, r2, r3
 8000ba8:	4b7a      	ldr	r3, [pc, #488]	; (8000d94 <fsm_run+0xa3c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b7a      	ldr	r3, [pc, #488]	; (8000d98 <fsm_run+0xa40>)
 8000bae:	fb83 1302 	smull	r1, r3, r3, r2
 8000bb2:	1099      	asrs	r1, r3, #2
 8000bb4:	17d3      	asrs	r3, r2, #31
 8000bb6:	1ac9      	subs	r1, r1, r3
 8000bb8:	460b      	mov	r3, r1
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	1ad1      	subs	r1, r2, r3
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 fc49 	bl	8001460 <updateClockBuffer>

		if (timer2_flag == 1) {
 8000bce:	4b73      	ldr	r3, [pc, #460]	; (8000d9c <fsm_run+0xa44>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d10c      	bne.n	8000bf0 <fsm_run+0x898>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	4871      	ldr	r0, [pc, #452]	; (8000da0 <fsm_run+0xa48>)
 8000bda:	f001 fa40 	bl	800205e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 8000bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be2:	486f      	ldr	r0, [pc, #444]	; (8000da0 <fsm_run+0xa48>)
 8000be4:	f001 fa3b 	bl	800205e <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000be8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bec:	f000 fe1c 	bl	8001828 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000bf0:	f7ff faac 	bl	800014c <isButton1Pressed>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d126      	bne.n	8000c48 <fsm_run+0x8f0>
			setTimer2(500);
 8000bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfe:	f000 fe13 	bl	8001828 <setTimer2>

			state = RESET;
 8000c02:	4b68      	ldr	r3, [pc, #416]	; (8000da4 <fsm_run+0xa4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	4864      	ldr	r0, [pc, #400]	; (8000da0 <fsm_run+0xa48>)
 8000c0e:	f001 fa0e 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4862      	ldr	r0, [pc, #392]	; (8000da0 <fsm_run+0xa48>)
 8000c18:	f001 fa09 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2120      	movs	r1, #32
 8000c20:	485f      	ldr	r0, [pc, #380]	; (8000da0 <fsm_run+0xa48>)
 8000c22:	f001 fa04 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2c:	485c      	ldr	r0, [pc, #368]	; (8000da0 <fsm_run+0xa48>)
 8000c2e:	f001 f9fe 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	485a      	ldr	r0, [pc, #360]	; (8000da0 <fsm_run+0xa48>)
 8000c38:	f001 f9f9 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c42:	4857      	ldr	r0, [pc, #348]	; (8000da0 <fsm_run+0xa48>)
 8000c44:	f001 f9f3 	bl	800202e <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 8000c48:	f7ff fa92 	bl	8000170 <isButton2Pressed>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	f040 809a 	bne.w	8000d88 <fsm_run+0xa30>
			setTimer2(500);
 8000c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c58:	f000 fde6 	bl	8001828 <setTimer2>
			tempGREEN++;
 8000c5c:	4b4d      	ldr	r3, [pc, #308]	; (8000d94 <fsm_run+0xa3c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a4c      	ldr	r2, [pc, #304]	; (8000d94 <fsm_run+0xa3c>)
 8000c64:	6013      	str	r3, [r2, #0]
			if (tempGREEN >= 100) tempGREEN = 0;
 8000c66:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <fsm_run+0xa3c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b63      	cmp	r3, #99	; 0x63
 8000c6c:	dd02      	ble.n	8000c74 <fsm_run+0x91c>
 8000c6e:	4b49      	ldr	r3, [pc, #292]	; (8000d94 <fsm_run+0xa3c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
			state = MODI_4;
 8000c74:	4b4b      	ldr	r3, [pc, #300]	; (8000da4 <fsm_run+0xa4c>)
 8000c76:	2228      	movs	r2, #40	; 0x28
 8000c78:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c7a:	e085      	b.n	8000d88 <fsm_run+0xa30>
	case MODI_4:
		updateClockBuffer(0, 4, tempGREEN/10, tempGREEN%10);
 8000c7c:	4b45      	ldr	r3, [pc, #276]	; (8000d94 <fsm_run+0xa3c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a45      	ldr	r2, [pc, #276]	; (8000d98 <fsm_run+0xa40>)
 8000c82:	fb82 1203 	smull	r1, r2, r2, r3
 8000c86:	1092      	asrs	r2, r2, #2
 8000c88:	17db      	asrs	r3, r3, #31
 8000c8a:	1ad0      	subs	r0, r2, r3
 8000c8c:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <fsm_run+0xa3c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <fsm_run+0xa40>)
 8000c92:	fb83 1302 	smull	r1, r3, r3, r2
 8000c96:	1099      	asrs	r1, r3, #2
 8000c98:	17d3      	asrs	r3, r2, #31
 8000c9a:	1ac9      	subs	r1, r1, r3
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	1ad1      	subs	r1, r2, r3
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4602      	mov	r2, r0
 8000caa:	2104      	movs	r1, #4
 8000cac:	2000      	movs	r0, #0
 8000cae:	f000 fbd7 	bl	8001460 <updateClockBuffer>

		if (timer2_flag == 1) {
 8000cb2:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <fsm_run+0xa44>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d10c      	bne.n	8000cd4 <fsm_run+0x97c>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000cba:	2140      	movs	r1, #64	; 0x40
 8000cbc:	4838      	ldr	r0, [pc, #224]	; (8000da0 <fsm_run+0xa48>)
 8000cbe:	f001 f9ce 	bl	800205e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 8000cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc6:	4836      	ldr	r0, [pc, #216]	; (8000da0 <fsm_run+0xa48>)
 8000cc8:	f001 f9c9 	bl	800205e <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000ccc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd0:	f000 fdaa 	bl	8001828 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000cd4:	f7ff fa3a 	bl	800014c <isButton1Pressed>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d126      	bne.n	8000d2c <fsm_run+0x9d4>
			setTimer2(500);
 8000cde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce2:	f000 fda1 	bl	8001828 <setTimer2>

			state = RESET;
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <fsm_run+0xa4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2110      	movs	r1, #16
 8000cf0:	482b      	ldr	r0, [pc, #172]	; (8000da0 <fsm_run+0xa48>)
 8000cf2:	f001 f99c 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	4829      	ldr	r0, [pc, #164]	; (8000da0 <fsm_run+0xa48>)
 8000cfc:	f001 f997 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2120      	movs	r1, #32
 8000d04:	4826      	ldr	r0, [pc, #152]	; (8000da0 <fsm_run+0xa48>)
 8000d06:	f001 f992 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d10:	4823      	ldr	r0, [pc, #140]	; (8000da0 <fsm_run+0xa48>)
 8000d12:	f001 f98c 	bl	800202e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2140      	movs	r1, #64	; 0x40
 8000d1a:	4821      	ldr	r0, [pc, #132]	; (8000da0 <fsm_run+0xa48>)
 8000d1c:	f001 f987 	bl	800202e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d26:	481e      	ldr	r0, [pc, #120]	; (8000da0 <fsm_run+0xa48>)
 8000d28:	f001 f981 	bl	800202e <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 8000d2c:	f7ff fa20 	bl	8000170 <isButton2Pressed>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d10f      	bne.n	8000d56 <fsm_run+0x9fe>
			setTimer2(500);
 8000d36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d3a:	f000 fd75 	bl	8001828 <setTimer2>
			tempGREEN++;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <fsm_run+0xa3c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <fsm_run+0xa3c>)
 8000d46:	6013      	str	r3, [r2, #0]
			if (tempGREEN >= 100) tempGREEN = 0;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <fsm_run+0xa3c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b63      	cmp	r3, #99	; 0x63
 8000d4e:	dd02      	ble.n	8000d56 <fsm_run+0x9fe>
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <fsm_run+0xa3c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 8000d56:	f7ff fa1d 	bl	8000194 <isButton3Pressed>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d115      	bne.n	8000d8c <fsm_run+0xa34>
			tempGREEN = tempGREEN;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <fsm_run+0xa3c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <fsm_run+0xa3c>)
 8000d66:	6013      	str	r3, [r2, #0]
			state = MODE_4;
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <fsm_run+0xa4c>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d6e:	e00d      	b.n	8000d8c <fsm_run+0xa34>
	default:
		break;
 8000d70:	bf00      	nop
 8000d72:	e00c      	b.n	8000d8e <fsm_run+0xa36>
		break;
 8000d74:	bf00      	nop
 8000d76:	e00a      	b.n	8000d8e <fsm_run+0xa36>
		break;
 8000d78:	bf00      	nop
 8000d7a:	e008      	b.n	8000d8e <fsm_run+0xa36>
		break;
 8000d7c:	bf00      	nop
 8000d7e:	e006      	b.n	8000d8e <fsm_run+0xa36>
		break;
 8000d80:	bf00      	nop
 8000d82:	e004      	b.n	8000d8e <fsm_run+0xa36>
		break;
 8000d84:	bf00      	nop
 8000d86:	e002      	b.n	8000d8e <fsm_run+0xa36>
		break;
 8000d88:	bf00      	nop
 8000d8a:	e000      	b.n	8000d8e <fsm_run+0xa36>
		break;
 8000d8c:	bf00      	nop
	}
}
 8000d8e:	bf00      	nop
 8000d90:	bdb0      	pop	{r4, r5, r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000090 	.word	0x20000090
 8000d98:	66666667 	.word	0x66666667
 8000d9c:	2000010c 	.word	0x2000010c
 8000da0:	40010800 	.word	0x40010800
 8000da4:	2000009c 	.word	0x2000009c

08000da8 <display7SEG>:
 *      Author: Admin
 */

#include "global.h"

void display7SEG(int num){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	switch(num){
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b09      	cmp	r3, #9
 8000db4:	f200 8180 	bhi.w	80010b8 <display7SEG+0x310>
 8000db8:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <display7SEG+0x18>)
 8000dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbe:	bf00      	nop
 8000dc0:	08000de9 	.word	0x08000de9
 8000dc4:	08000e31 	.word	0x08000e31
 8000dc8:	08000e79 	.word	0x08000e79
 8000dcc:	08000ec1 	.word	0x08000ec1
 8000dd0:	08000f09 	.word	0x08000f09
 8000dd4:	08000f51 	.word	0x08000f51
 8000dd8:	08000f99 	.word	0x08000f99
 8000ddc:	08000fe1 	.word	0x08000fe1
 8000de0:	08001029 	.word	0x08001029
 8000de4:	08001071 	.word	0x08001071
	case 0:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000de8:	2200      	movs	r2, #0
 8000dea:	2101      	movs	r1, #1
 8000dec:	48b5      	ldr	r0, [pc, #724]	; (80010c4 <display7SEG+0x31c>)
 8000dee:	f001 f91e 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000df2:	2200      	movs	r2, #0
 8000df4:	2102      	movs	r1, #2
 8000df6:	48b3      	ldr	r0, [pc, #716]	; (80010c4 <display7SEG+0x31c>)
 8000df8:	f001 f919 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2104      	movs	r1, #4
 8000e00:	48b0      	ldr	r0, [pc, #704]	; (80010c4 <display7SEG+0x31c>)
 8000e02:	f001 f914 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000e06:	2200      	movs	r2, #0
 8000e08:	2108      	movs	r1, #8
 8000e0a:	48ae      	ldr	r0, [pc, #696]	; (80010c4 <display7SEG+0x31c>)
 8000e0c:	f001 f90f 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000e10:	2200      	movs	r2, #0
 8000e12:	2110      	movs	r1, #16
 8000e14:	48ab      	ldr	r0, [pc, #684]	; (80010c4 <display7SEG+0x31c>)
 8000e16:	f001 f90a 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	48a9      	ldr	r0, [pc, #676]	; (80010c4 <display7SEG+0x31c>)
 8000e20:	f001 f905 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000e24:	2201      	movs	r2, #1
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	48a6      	ldr	r0, [pc, #664]	; (80010c4 <display7SEG+0x31c>)
 8000e2a:	f001 f900 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8000e2e:	e144      	b.n	80010ba <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000e30:	2201      	movs	r2, #1
 8000e32:	2101      	movs	r1, #1
 8000e34:	48a3      	ldr	r0, [pc, #652]	; (80010c4 <display7SEG+0x31c>)
 8000e36:	f001 f8fa 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	48a1      	ldr	r0, [pc, #644]	; (80010c4 <display7SEG+0x31c>)
 8000e40:	f001 f8f5 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000e44:	2200      	movs	r2, #0
 8000e46:	2104      	movs	r1, #4
 8000e48:	489e      	ldr	r0, [pc, #632]	; (80010c4 <display7SEG+0x31c>)
 8000e4a:	f001 f8f0 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2108      	movs	r1, #8
 8000e52:	489c      	ldr	r0, [pc, #624]	; (80010c4 <display7SEG+0x31c>)
 8000e54:	f001 f8eb 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4899      	ldr	r0, [pc, #612]	; (80010c4 <display7SEG+0x31c>)
 8000e5e:	f001 f8e6 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000e62:	2201      	movs	r2, #1
 8000e64:	2120      	movs	r1, #32
 8000e66:	4897      	ldr	r0, [pc, #604]	; (80010c4 <display7SEG+0x31c>)
 8000e68:	f001 f8e1 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2140      	movs	r1, #64	; 0x40
 8000e70:	4894      	ldr	r0, [pc, #592]	; (80010c4 <display7SEG+0x31c>)
 8000e72:	f001 f8dc 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8000e76:	e120      	b.n	80010ba <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4891      	ldr	r0, [pc, #580]	; (80010c4 <display7SEG+0x31c>)
 8000e7e:	f001 f8d6 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000e82:	2200      	movs	r2, #0
 8000e84:	2102      	movs	r1, #2
 8000e86:	488f      	ldr	r0, [pc, #572]	; (80010c4 <display7SEG+0x31c>)
 8000e88:	f001 f8d1 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_SET ) ;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2104      	movs	r1, #4
 8000e90:	488c      	ldr	r0, [pc, #560]	; (80010c4 <display7SEG+0x31c>)
 8000e92:	f001 f8cc 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000e96:	2200      	movs	r2, #0
 8000e98:	2108      	movs	r1, #8
 8000e9a:	488a      	ldr	r0, [pc, #552]	; (80010c4 <display7SEG+0x31c>)
 8000e9c:	f001 f8c7 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4887      	ldr	r0, [pc, #540]	; (80010c4 <display7SEG+0x31c>)
 8000ea6:	f001 f8c2 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2120      	movs	r1, #32
 8000eae:	4885      	ldr	r0, [pc, #532]	; (80010c4 <display7SEG+0x31c>)
 8000eb0:	f001 f8bd 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	4882      	ldr	r0, [pc, #520]	; (80010c4 <display7SEG+0x31c>)
 8000eba:	f001 f8b8 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8000ebe:	e0fc      	b.n	80010ba <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	487f      	ldr	r0, [pc, #508]	; (80010c4 <display7SEG+0x31c>)
 8000ec6:	f001 f8b2 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2102      	movs	r1, #2
 8000ece:	487d      	ldr	r0, [pc, #500]	; (80010c4 <display7SEG+0x31c>)
 8000ed0:	f001 f8ad 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	487a      	ldr	r0, [pc, #488]	; (80010c4 <display7SEG+0x31c>)
 8000eda:	f001 f8a8 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	4878      	ldr	r0, [pc, #480]	; (80010c4 <display7SEG+0x31c>)
 8000ee4:	f001 f8a3 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2110      	movs	r1, #16
 8000eec:	4875      	ldr	r0, [pc, #468]	; (80010c4 <display7SEG+0x31c>)
 8000eee:	f001 f89e 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	4873      	ldr	r0, [pc, #460]	; (80010c4 <display7SEG+0x31c>)
 8000ef8:	f001 f899 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000efc:	2200      	movs	r2, #0
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	4870      	ldr	r0, [pc, #448]	; (80010c4 <display7SEG+0x31c>)
 8000f02:	f001 f894 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8000f06:	e0d8      	b.n	80010ba <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	486d      	ldr	r0, [pc, #436]	; (80010c4 <display7SEG+0x31c>)
 8000f0e:	f001 f88e 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000f12:	2200      	movs	r2, #0
 8000f14:	2102      	movs	r1, #2
 8000f16:	486b      	ldr	r0, [pc, #428]	; (80010c4 <display7SEG+0x31c>)
 8000f18:	f001 f889 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	4868      	ldr	r0, [pc, #416]	; (80010c4 <display7SEG+0x31c>)
 8000f22:	f001 f884 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000f26:	2201      	movs	r2, #1
 8000f28:	2108      	movs	r1, #8
 8000f2a:	4866      	ldr	r0, [pc, #408]	; (80010c4 <display7SEG+0x31c>)
 8000f2c:	f001 f87f 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000f30:	2201      	movs	r2, #1
 8000f32:	2110      	movs	r1, #16
 8000f34:	4863      	ldr	r0, [pc, #396]	; (80010c4 <display7SEG+0x31c>)
 8000f36:	f001 f87a 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	4861      	ldr	r0, [pc, #388]	; (80010c4 <display7SEG+0x31c>)
 8000f40:	f001 f875 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000f44:	2200      	movs	r2, #0
 8000f46:	2140      	movs	r1, #64	; 0x40
 8000f48:	485e      	ldr	r0, [pc, #376]	; (80010c4 <display7SEG+0x31c>)
 8000f4a:	f001 f870 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8000f4e:	e0b4      	b.n	80010ba <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000f50:	2200      	movs	r2, #0
 8000f52:	2101      	movs	r1, #1
 8000f54:	485b      	ldr	r0, [pc, #364]	; (80010c4 <display7SEG+0x31c>)
 8000f56:	f001 f86a 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4859      	ldr	r0, [pc, #356]	; (80010c4 <display7SEG+0x31c>)
 8000f60:	f001 f865 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000f64:	2200      	movs	r2, #0
 8000f66:	2104      	movs	r1, #4
 8000f68:	4856      	ldr	r0, [pc, #344]	; (80010c4 <display7SEG+0x31c>)
 8000f6a:	f001 f860 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2108      	movs	r1, #8
 8000f72:	4854      	ldr	r0, [pc, #336]	; (80010c4 <display7SEG+0x31c>)
 8000f74:	f001 f85b 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4851      	ldr	r0, [pc, #324]	; (80010c4 <display7SEG+0x31c>)
 8000f7e:	f001 f856 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000f82:	2200      	movs	r2, #0
 8000f84:	2120      	movs	r1, #32
 8000f86:	484f      	ldr	r0, [pc, #316]	; (80010c4 <display7SEG+0x31c>)
 8000f88:	f001 f851 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2140      	movs	r1, #64	; 0x40
 8000f90:	484c      	ldr	r0, [pc, #304]	; (80010c4 <display7SEG+0x31c>)
 8000f92:	f001 f84c 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8000f96:	e090      	b.n	80010ba <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4849      	ldr	r0, [pc, #292]	; (80010c4 <display7SEG+0x31c>)
 8000f9e:	f001 f846 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	4847      	ldr	r0, [pc, #284]	; (80010c4 <display7SEG+0x31c>)
 8000fa8:	f001 f841 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000fac:	2200      	movs	r2, #0
 8000fae:	2104      	movs	r1, #4
 8000fb0:	4844      	ldr	r0, [pc, #272]	; (80010c4 <display7SEG+0x31c>)
 8000fb2:	f001 f83c 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2108      	movs	r1, #8
 8000fba:	4842      	ldr	r0, [pc, #264]	; (80010c4 <display7SEG+0x31c>)
 8000fbc:	f001 f837 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	483f      	ldr	r0, [pc, #252]	; (80010c4 <display7SEG+0x31c>)
 8000fc6:	f001 f832 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2120      	movs	r1, #32
 8000fce:	483d      	ldr	r0, [pc, #244]	; (80010c4 <display7SEG+0x31c>)
 8000fd0:	f001 f82d 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2140      	movs	r1, #64	; 0x40
 8000fd8:	483a      	ldr	r0, [pc, #232]	; (80010c4 <display7SEG+0x31c>)
 8000fda:	f001 f828 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8000fde:	e06c      	b.n	80010ba <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4837      	ldr	r0, [pc, #220]	; (80010c4 <display7SEG+0x31c>)
 8000fe6:	f001 f822 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000fea:	2200      	movs	r2, #0
 8000fec:	2102      	movs	r1, #2
 8000fee:	4835      	ldr	r0, [pc, #212]	; (80010c4 <display7SEG+0x31c>)
 8000ff0:	f001 f81d 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	4832      	ldr	r0, [pc, #200]	; (80010c4 <display7SEG+0x31c>)
 8000ffa:	f001 f818 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000ffe:	2201      	movs	r2, #1
 8001000:	2108      	movs	r1, #8
 8001002:	4830      	ldr	r0, [pc, #192]	; (80010c4 <display7SEG+0x31c>)
 8001004:	f001 f813 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8001008:	2201      	movs	r2, #1
 800100a:	2110      	movs	r1, #16
 800100c:	482d      	ldr	r0, [pc, #180]	; (80010c4 <display7SEG+0x31c>)
 800100e:	f001 f80e 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8001012:	2201      	movs	r2, #1
 8001014:	2120      	movs	r1, #32
 8001016:	482b      	ldr	r0, [pc, #172]	; (80010c4 <display7SEG+0x31c>)
 8001018:	f001 f809 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 800101c:	2201      	movs	r2, #1
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	4828      	ldr	r0, [pc, #160]	; (80010c4 <display7SEG+0x31c>)
 8001022:	f001 f804 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8001026:	e048      	b.n	80010ba <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8001028:	2200      	movs	r2, #0
 800102a:	2101      	movs	r1, #1
 800102c:	4825      	ldr	r0, [pc, #148]	; (80010c4 <display7SEG+0x31c>)
 800102e:	f000 fffe 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8001032:	2200      	movs	r2, #0
 8001034:	2102      	movs	r1, #2
 8001036:	4823      	ldr	r0, [pc, #140]	; (80010c4 <display7SEG+0x31c>)
 8001038:	f000 fff9 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 800103c:	2200      	movs	r2, #0
 800103e:	2104      	movs	r1, #4
 8001040:	4820      	ldr	r0, [pc, #128]	; (80010c4 <display7SEG+0x31c>)
 8001042:	f000 fff4 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8001046:	2200      	movs	r2, #0
 8001048:	2108      	movs	r1, #8
 800104a:	481e      	ldr	r0, [pc, #120]	; (80010c4 <display7SEG+0x31c>)
 800104c:	f000 ffef 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8001050:	2200      	movs	r2, #0
 8001052:	2110      	movs	r1, #16
 8001054:	481b      	ldr	r0, [pc, #108]	; (80010c4 <display7SEG+0x31c>)
 8001056:	f000 ffea 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 800105a:	2200      	movs	r2, #0
 800105c:	2120      	movs	r1, #32
 800105e:	4819      	ldr	r0, [pc, #100]	; (80010c4 <display7SEG+0x31c>)
 8001060:	f000 ffe5 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8001064:	2200      	movs	r2, #0
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	4816      	ldr	r0, [pc, #88]	; (80010c4 <display7SEG+0x31c>)
 800106a:	f000 ffe0 	bl	800202e <HAL_GPIO_WritePin>
		break;
 800106e:	e024      	b.n	80010ba <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8001070:	2200      	movs	r2, #0
 8001072:	2101      	movs	r1, #1
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <display7SEG+0x31c>)
 8001076:	f000 ffda 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 800107a:	2200      	movs	r2, #0
 800107c:	2102      	movs	r1, #2
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <display7SEG+0x31c>)
 8001080:	f000 ffd5 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8001084:	2200      	movs	r2, #0
 8001086:	2104      	movs	r1, #4
 8001088:	480e      	ldr	r0, [pc, #56]	; (80010c4 <display7SEG+0x31c>)
 800108a:	f000 ffd0 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 800108e:	2200      	movs	r2, #0
 8001090:	2108      	movs	r1, #8
 8001092:	480c      	ldr	r0, [pc, #48]	; (80010c4 <display7SEG+0x31c>)
 8001094:	f000 ffcb 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8001098:	2201      	movs	r2, #1
 800109a:	2110      	movs	r1, #16
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <display7SEG+0x31c>)
 800109e:	f000 ffc6 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 80010a2:	2200      	movs	r2, #0
 80010a4:	2120      	movs	r1, #32
 80010a6:	4807      	ldr	r0, [pc, #28]	; (80010c4 <display7SEG+0x31c>)
 80010a8:	f000 ffc1 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 80010ac:	2200      	movs	r2, #0
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <display7SEG+0x31c>)
 80010b2:	f000 ffbc 	bl	800202e <HAL_GPIO_WritePin>
		break;
 80010b6:	e000      	b.n	80010ba <display7SEG+0x312>
	default:
		break;
 80010b8:	bf00      	nop
	}
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40010c00 	.word	0x40010c00

080010c8 <display7SEG0>:
void display7SEG0(int num){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	switch(num){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b09      	cmp	r3, #9
 80010d4:	f200 81bc 	bhi.w	8001450 <display7SEG0+0x388>
 80010d8:	a201      	add	r2, pc, #4	; (adr r2, 80010e0 <display7SEG0+0x18>)
 80010da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010de:	bf00      	nop
 80010e0:	08001109 	.word	0x08001109
 80010e4:	0800115d 	.word	0x0800115d
 80010e8:	080011b1 	.word	0x080011b1
 80010ec:	08001205 	.word	0x08001205
 80010f0:	08001259 	.word	0x08001259
 80010f4:	080012ad 	.word	0x080012ad
 80010f8:	08001301 	.word	0x08001301
 80010fc:	08001355 	.word	0x08001355
 8001100:	080013a9 	.word	0x080013a9
 8001104:	080013fd 	.word	0x080013fd
	case 0:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001108:	2200      	movs	r2, #0
 800110a:	2180      	movs	r1, #128	; 0x80
 800110c:	48d3      	ldr	r0, [pc, #844]	; (800145c <display7SEG0+0x394>)
 800110e:	f000 ff8e 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001118:	48d0      	ldr	r0, [pc, #832]	; (800145c <display7SEG0+0x394>)
 800111a:	f000 ff88 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001124:	48cd      	ldr	r0, [pc, #820]	; (800145c <display7SEG0+0x394>)
 8001126:	f000 ff82 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001130:	48ca      	ldr	r0, [pc, #808]	; (800145c <display7SEG0+0x394>)
 8001132:	f000 ff7c 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800113c:	48c7      	ldr	r0, [pc, #796]	; (800145c <display7SEG0+0x394>)
 800113e:	f000 ff76 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001148:	48c4      	ldr	r0, [pc, #784]	; (800145c <display7SEG0+0x394>)
 800114a:	f000 ff70 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	48c1      	ldr	r0, [pc, #772]	; (800145c <display7SEG0+0x394>)
 8001156:	f000 ff6a 	bl	800202e <HAL_GPIO_WritePin>
		break;
 800115a:	e17a      	b.n	8001452 <display7SEG0+0x38a>
	case 1:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 800115c:	2201      	movs	r2, #1
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	48be      	ldr	r0, [pc, #760]	; (800145c <display7SEG0+0x394>)
 8001162:	f000 ff64 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	48bb      	ldr	r0, [pc, #748]	; (800145c <display7SEG0+0x394>)
 800116e:	f000 ff5e 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001178:	48b8      	ldr	r0, [pc, #736]	; (800145c <display7SEG0+0x394>)
 800117a:	f000 ff58 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001184:	48b5      	ldr	r0, [pc, #724]	; (800145c <display7SEG0+0x394>)
 8001186:	f000 ff52 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001190:	48b2      	ldr	r0, [pc, #712]	; (800145c <display7SEG0+0x394>)
 8001192:	f000 ff4c 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119c:	48af      	ldr	r0, [pc, #700]	; (800145c <display7SEG0+0x394>)
 800119e:	f000 ff46 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a8:	48ac      	ldr	r0, [pc, #688]	; (800145c <display7SEG0+0x394>)
 80011aa:	f000 ff40 	bl	800202e <HAL_GPIO_WritePin>
		break;
 80011ae:	e150      	b.n	8001452 <display7SEG0+0x38a>
	case 2:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 80011b0:	2200      	movs	r2, #0
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	48a9      	ldr	r0, [pc, #676]	; (800145c <display7SEG0+0x394>)
 80011b6:	f000 ff3a 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c0:	48a6      	ldr	r0, [pc, #664]	; (800145c <display7SEG0+0x394>)
 80011c2:	f000 ff34 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_SET ) ;
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	48a3      	ldr	r0, [pc, #652]	; (800145c <display7SEG0+0x394>)
 80011ce:	f000 ff2e 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d8:	48a0      	ldr	r0, [pc, #640]	; (800145c <display7SEG0+0x394>)
 80011da:	f000 ff28 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e4:	489d      	ldr	r0, [pc, #628]	; (800145c <display7SEG0+0x394>)
 80011e6:	f000 ff22 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f0:	489a      	ldr	r0, [pc, #616]	; (800145c <display7SEG0+0x394>)
 80011f2:	f000 ff1c 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fc:	4897      	ldr	r0, [pc, #604]	; (800145c <display7SEG0+0x394>)
 80011fe:	f000 ff16 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8001202:	e126      	b.n	8001452 <display7SEG0+0x38a>
	case 3:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001204:	2200      	movs	r2, #0
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	4894      	ldr	r0, [pc, #592]	; (800145c <display7SEG0+0x394>)
 800120a:	f000 ff10 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001214:	4891      	ldr	r0, [pc, #580]	; (800145c <display7SEG0+0x394>)
 8001216:	f000 ff0a 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001220:	488e      	ldr	r0, [pc, #568]	; (800145c <display7SEG0+0x394>)
 8001222:	f000 ff04 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122c:	488b      	ldr	r0, [pc, #556]	; (800145c <display7SEG0+0x394>)
 800122e:	f000 fefe 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001238:	4888      	ldr	r0, [pc, #544]	; (800145c <display7SEG0+0x394>)
 800123a:	f000 fef8 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 800123e:	2201      	movs	r2, #1
 8001240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001244:	4885      	ldr	r0, [pc, #532]	; (800145c <display7SEG0+0x394>)
 8001246:	f000 fef2 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001250:	4882      	ldr	r0, [pc, #520]	; (800145c <display7SEG0+0x394>)
 8001252:	f000 feec 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8001256:	e0fc      	b.n	8001452 <display7SEG0+0x38a>
	case 4:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8001258:	2201      	movs	r2, #1
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	487f      	ldr	r0, [pc, #508]	; (800145c <display7SEG0+0x394>)
 800125e:	f000 fee6 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001268:	487c      	ldr	r0, [pc, #496]	; (800145c <display7SEG0+0x394>)
 800126a:	f000 fee0 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	4879      	ldr	r0, [pc, #484]	; (800145c <display7SEG0+0x394>)
 8001276:	f000 feda 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001280:	4876      	ldr	r0, [pc, #472]	; (800145c <display7SEG0+0x394>)
 8001282:	f000 fed4 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128c:	4873      	ldr	r0, [pc, #460]	; (800145c <display7SEG0+0x394>)
 800128e:	f000 fece 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001298:	4870      	ldr	r0, [pc, #448]	; (800145c <display7SEG0+0x394>)
 800129a:	f000 fec8 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a4:	486d      	ldr	r0, [pc, #436]	; (800145c <display7SEG0+0x394>)
 80012a6:	f000 fec2 	bl	800202e <HAL_GPIO_WritePin>
		break;
 80012aa:	e0d2      	b.n	8001452 <display7SEG0+0x38a>
	case 5:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 80012ac:	2200      	movs	r2, #0
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	486a      	ldr	r0, [pc, #424]	; (800145c <display7SEG0+0x394>)
 80012b2:	f000 febc 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012bc:	4867      	ldr	r0, [pc, #412]	; (800145c <display7SEG0+0x394>)
 80012be:	f000 feb6 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c8:	4864      	ldr	r0, [pc, #400]	; (800145c <display7SEG0+0x394>)
 80012ca:	f000 feb0 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d4:	4861      	ldr	r0, [pc, #388]	; (800145c <display7SEG0+0x394>)
 80012d6:	f000 feaa 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e0:	485e      	ldr	r0, [pc, #376]	; (800145c <display7SEG0+0x394>)
 80012e2:	f000 fea4 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ec:	485b      	ldr	r0, [pc, #364]	; (800145c <display7SEG0+0x394>)
 80012ee:	f000 fe9e 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f8:	4858      	ldr	r0, [pc, #352]	; (800145c <display7SEG0+0x394>)
 80012fa:	f000 fe98 	bl	800202e <HAL_GPIO_WritePin>
		break;
 80012fe:	e0a8      	b.n	8001452 <display7SEG0+0x38a>
	case 6:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001300:	2200      	movs	r2, #0
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	4855      	ldr	r0, [pc, #340]	; (800145c <display7SEG0+0x394>)
 8001306:	f000 fe92 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001310:	4852      	ldr	r0, [pc, #328]	; (800145c <display7SEG0+0x394>)
 8001312:	f000 fe8c 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131c:	484f      	ldr	r0, [pc, #316]	; (800145c <display7SEG0+0x394>)
 800131e:	f000 fe86 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001328:	484c      	ldr	r0, [pc, #304]	; (800145c <display7SEG0+0x394>)
 800132a:	f000 fe80 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001334:	4849      	ldr	r0, [pc, #292]	; (800145c <display7SEG0+0x394>)
 8001336:	f000 fe7a 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001340:	4846      	ldr	r0, [pc, #280]	; (800145c <display7SEG0+0x394>)
 8001342:	f000 fe74 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134c:	4843      	ldr	r0, [pc, #268]	; (800145c <display7SEG0+0x394>)
 800134e:	f000 fe6e 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8001352:	e07e      	b.n	8001452 <display7SEG0+0x38a>
	case 7:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001354:	2200      	movs	r2, #0
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	4840      	ldr	r0, [pc, #256]	; (800145c <display7SEG0+0x394>)
 800135a:	f000 fe68 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001364:	483d      	ldr	r0, [pc, #244]	; (800145c <display7SEG0+0x394>)
 8001366:	f000 fe62 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001370:	483a      	ldr	r0, [pc, #232]	; (800145c <display7SEG0+0x394>)
 8001372:	f000 fe5c 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8001376:	2201      	movs	r2, #1
 8001378:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800137c:	4837      	ldr	r0, [pc, #220]	; (800145c <display7SEG0+0x394>)
 800137e:	f000 fe56 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001388:	4834      	ldr	r0, [pc, #208]	; (800145c <display7SEG0+0x394>)
 800138a:	f000 fe50 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001394:	4831      	ldr	r0, [pc, #196]	; (800145c <display7SEG0+0x394>)
 8001396:	f000 fe4a 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a0:	482e      	ldr	r0, [pc, #184]	; (800145c <display7SEG0+0x394>)
 80013a2:	f000 fe44 	bl	800202e <HAL_GPIO_WritePin>
		break;
 80013a6:	e054      	b.n	8001452 <display7SEG0+0x38a>
	case 8:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 80013a8:	2200      	movs	r2, #0
 80013aa:	2180      	movs	r1, #128	; 0x80
 80013ac:	482b      	ldr	r0, [pc, #172]	; (800145c <display7SEG0+0x394>)
 80013ae:	f000 fe3e 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b8:	4828      	ldr	r0, [pc, #160]	; (800145c <display7SEG0+0x394>)
 80013ba:	f000 fe38 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c4:	4825      	ldr	r0, [pc, #148]	; (800145c <display7SEG0+0x394>)
 80013c6:	f000 fe32 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d0:	4822      	ldr	r0, [pc, #136]	; (800145c <display7SEG0+0x394>)
 80013d2:	f000 fe2c 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013dc:	481f      	ldr	r0, [pc, #124]	; (800145c <display7SEG0+0x394>)
 80013de:	f000 fe26 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e8:	481c      	ldr	r0, [pc, #112]	; (800145c <display7SEG0+0x394>)
 80013ea:	f000 fe20 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f4:	4819      	ldr	r0, [pc, #100]	; (800145c <display7SEG0+0x394>)
 80013f6:	f000 fe1a 	bl	800202e <HAL_GPIO_WritePin>
		break;
 80013fa:	e02a      	b.n	8001452 <display7SEG0+0x38a>
	case 9:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 80013fc:	2200      	movs	r2, #0
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	4816      	ldr	r0, [pc, #88]	; (800145c <display7SEG0+0x394>)
 8001402:	f000 fe14 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140c:	4813      	ldr	r0, [pc, #76]	; (800145c <display7SEG0+0x394>)
 800140e:	f000 fe0e 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001418:	4810      	ldr	r0, [pc, #64]	; (800145c <display7SEG0+0x394>)
 800141a:	f000 fe08 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <display7SEG0+0x394>)
 8001426:	f000 fe02 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001430:	480a      	ldr	r0, [pc, #40]	; (800145c <display7SEG0+0x394>)
 8001432:	f000 fdfc 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <display7SEG0+0x394>)
 800143e:	f000 fdf6 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001448:	4804      	ldr	r0, [pc, #16]	; (800145c <display7SEG0+0x394>)
 800144a:	f000 fdf0 	bl	800202e <HAL_GPIO_WritePin>
		break;
 800144e:	e000      	b.n	8001452 <display7SEG0+0x38a>
	default:
		break;
 8001450:	bf00      	nop
	}
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40010c00 	.word	0x40010c00

08001460 <updateClockBuffer>:
int timeYELLOW = 2;

int led_buffer[4] = {0, 0, 0, 0};


void updateClockBuffer(int num0, int num1, int num2, int num3) {
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
	led_buffer[0] = num0;
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <updateClockBuffer+0x30>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1;
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <updateClockBuffer+0x30>)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	6053      	str	r3, [r2, #4]
	led_buffer[2] = num2;
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <updateClockBuffer+0x30>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num3;
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <updateClockBuffer+0x30>)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	60d3      	str	r3, [r2, #12]
}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	200000a0 	.word	0x200000a0

08001494 <update7SEG>:

void update7SEG(int index) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	switch (index) {
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d003      	beq.n	80014aa <update7SEG+0x16>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d017      	beq.n	80014d8 <update7SEG+0x44>
		display7SEG0(led_buffer[3]);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 80014a8:	e02d      	b.n	8001506 <update7SEG+0x72>
		display7SEG(led_buffer[0]);
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <update7SEG+0x7c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fc7a 	bl	8000da8 <display7SEG>
		display7SEG0(led_buffer[1]);
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <update7SEG+0x7c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe05 	bl	80010c8 <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c4:	4813      	ldr	r0, [pc, #76]	; (8001514 <update7SEG+0x80>)
 80014c6:	f000 fdb2 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d0:	4810      	ldr	r0, [pc, #64]	; (8001514 <update7SEG+0x80>)
 80014d2:	f000 fdac 	bl	800202e <HAL_GPIO_WritePin>
		break;
 80014d6:	e016      	b.n	8001506 <update7SEG+0x72>
		display7SEG(led_buffer[2]);
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <update7SEG+0x7c>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fc63 	bl	8000da8 <display7SEG>
		display7SEG0(led_buffer[3]);
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <update7SEG+0x7c>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fdee 	bl	80010c8 <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f2:	4808      	ldr	r0, [pc, #32]	; (8001514 <update7SEG+0x80>)
 80014f4:	f000 fd9b 	bl	800202e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <update7SEG+0x80>)
 8001500:	f000 fd95 	bl	800202e <HAL_GPIO_WritePin>
		break;
 8001504:	bf00      	nop
	}
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200000a0 	.word	0x200000a0
 8001514:	40010c00 	.word	0x40010c00

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151e:	f000 fa83 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001522:	f000 f851 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001526:	f000 f8d7 	bl	80016d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800152a:	f000 f889 	bl	8001640 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800152e:	4823      	ldr	r0, [pc, #140]	; (80015bc <main+0xa4>)
 8001530:	f001 f9e6 	bl	8002900 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = 0;
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <main+0xa8>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
  int led_idx = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
  int index = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
  setTimer0(1000);
 8001542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001546:	f000 f93b 	bl	80017c0 <setTimer0>
  while (1)
  {
	  if (timer0_flag == 1) {
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <main+0xac>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d12e      	bne.n	80015b0 <main+0x98>
		  switch (led_idx) {
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d82d      	bhi.n	80015b4 <main+0x9c>
 8001558:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <main+0x48>)
 800155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155e:	bf00      	nop
 8001560:	08001571 	.word	0x08001571
 8001564:	08001579 	.word	0x08001579
 8001568:	08001591 	.word	0x08001591
 800156c:	08001599 	.word	0x08001599
			  case 0:
				  led_idx++;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3301      	adds	r3, #1
 8001574:	607b      	str	r3, [r7, #4]
				  break;
 8001576:	e01e      	b.n	80015b6 <main+0x9e>
		  	  case 1:
		  		  index = 1;
 8001578:	2301      	movs	r3, #1
 800157a:	603b      	str	r3, [r7, #0]
		  		  update7SEG(index);
 800157c:	6838      	ldr	r0, [r7, #0]
 800157e:	f7ff ff89 	bl	8001494 <update7SEG>
		  		  setTimer0(500);
 8001582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001586:	f000 f91b 	bl	80017c0 <setTimer0>
		  		  led_idx = 2;
 800158a:	2302      	movs	r3, #2
 800158c:	607b      	str	r3, [r7, #4]
		  		  break;
 800158e:	e012      	b.n	80015b6 <main+0x9e>
		  	  case 2:
		  		  led_idx++;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3301      	adds	r3, #1
 8001594:	607b      	str	r3, [r7, #4]
		  		  break;
 8001596:	e00e      	b.n	80015b6 <main+0x9e>
		  	  case 3:
		  		  index = 2;
 8001598:	2302      	movs	r3, #2
 800159a:	603b      	str	r3, [r7, #0]
		  		  update7SEG(index);
 800159c:	6838      	ldr	r0, [r7, #0]
 800159e:	f7ff ff79 	bl	8001494 <update7SEG>
		  		  setTimer0(500);
 80015a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a6:	f000 f90b 	bl	80017c0 <setTimer0>
		  		  led_idx = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
		  		  break;
 80015ae:	e002      	b.n	80015b6 <main+0x9e>
		  	  default:
		  		  break;
		  }
	  }
 80015b0:	bf00      	nop
 80015b2:	e000      	b.n	80015b6 <main+0x9e>
		  		  break;
 80015b4:	bf00      	nop
	  fsm_run();
 80015b6:	f7fe fecf 	bl	8000358 <fsm_run>
	  if (timer0_flag == 1) {
 80015ba:	e7c6      	b.n	800154a <main+0x32>
 80015bc:	200000b0 	.word	0x200000b0
 80015c0:	2000009c 	.word	0x2000009c
 80015c4:	200000fc 	.word	0x200000fc

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b090      	sub	sp, #64	; 0x40
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	2228      	movs	r2, #40	; 0x28
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 fd4a 	bl	8003070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f2:	2310      	movs	r3, #16
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fd46 	bl	8002090 <HAL_RCC_OscConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800160a:	f000 f8d3 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160e:	230f      	movs	r3, #15
 8001610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f000 ffb4 	bl	8002594 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001632:	f000 f8bf 	bl	80017b4 <Error_Handler>
  }
}
 8001636:	bf00      	nop
 8001638:	3740      	adds	r7, #64	; 0x40
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	463b      	mov	r3, r7
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <MX_TIM2_Init+0x94>)
 800165e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001662:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_TIM2_Init+0x94>)
 8001666:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800166a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <MX_TIM2_Init+0x94>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_TIM2_Init+0x94>)
 8001674:	2209      	movs	r2, #9
 8001676:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_TIM2_Init+0x94>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <MX_TIM2_Init+0x94>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <MX_TIM2_Init+0x94>)
 8001686:	f001 f8eb 	bl	8002860 <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001690:	f000 f890 	bl	80017b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001698:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4619      	mov	r1, r3
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <MX_TIM2_Init+0x94>)
 80016a2:	f001 fa81 	bl	8002ba8 <HAL_TIM_ConfigClockSource>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016ac:	f000 f882 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_TIM2_Init+0x94>)
 80016be:	f001 fc49 	bl	8002f54 <HAL_TIMEx_MasterConfigSynchronization>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016c8:	f000 f874 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200000b0 	.word	0x200000b0

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <MX_GPIO_Init+0xb8>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a27      	ldr	r2, [pc, #156]	; (8001790 <MX_GPIO_Init+0xb8>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <MX_GPIO_Init+0xb8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <MX_GPIO_Init+0xb8>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a21      	ldr	r2, [pc, #132]	; (8001790 <MX_GPIO_Init+0xb8>)
 800170a:	f043 0308 	orr.w	r3, r3, #8
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <MX_GPIO_Init+0xb8>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001722:	481c      	ldr	r0, [pc, #112]	; (8001794 <MX_GPIO_Init+0xbc>)
 8001724:	f000 fc83 	bl	800202e <HAL_GPIO_WritePin>
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D0_Pin
 8001728:	2200      	movs	r2, #0
 800172a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800172e:	481a      	ldr	r0, [pc, #104]	; (8001798 <MX_GPIO_Init+0xc0>)
 8001730:	f000 fc7d 	bl	800202e <HAL_GPIO_WritePin>
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin;
 8001734:	230e      	movs	r3, #14
 8001736:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173c:	2301      	movs	r3, #1
 800173e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	4619      	mov	r1, r3
 8001746:	4813      	ldr	r0, [pc, #76]	; (8001794 <MX_GPIO_Init+0xbc>)
 8001748:	f000 fade 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_0_Pin
                           LED_YELLOW_0_Pin LED_GREEN_0_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 800174c:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001750:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2302      	movs	r3, #2
 800175c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	4619      	mov	r1, r3
 8001764:	480b      	ldr	r0, [pc, #44]	; (8001794 <MX_GPIO_Init+0xbc>)
 8001766:	f000 facf 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin EN1_Pin
                           EN2_Pin D_Pin E_Pin F_Pin
                           G_Pin A0_Pin B0_Pin C0_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D0_Pin
 800176a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800176e:	60bb      	str	r3, [r7, #8]
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2302      	movs	r3, #2
 800177a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	4619      	mov	r1, r3
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_GPIO_Init+0xc0>)
 8001784:	f000 fac0 	bl	8001d08 <HAL_GPIO_Init>

}
 8001788:	bf00      	nop
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	40010800 	.word	0x40010800
 8001798:	40010c00 	.word	0x40010c00

0800179c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	timer_run();
 80017a4:	f000 f85a 	bl	800185c <timer_run>
	getKeyInput();
 80017a8:	f7fe fd2a 	bl	8000200 <getKeyInput>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	e7fe      	b.n	80017bc <Error_Handler+0x8>
	...

080017c0 <setTimer0>:
int timer1_counter = 0;
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0(int duration){
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/ TIMER_CYCLE;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <setTimer0+0x28>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80017d2:	4a06      	ldr	r2, [pc, #24]	; (80017ec <setTimer0+0x2c>)
 80017d4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <setTimer0+0x30>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000048 	.word	0x20000048
 80017ec:	200000f8 	.word	0x200000f8
 80017f0:	200000fc 	.word	0x200000fc

080017f4 <setTimer1>:

void setTimer1(int duration){
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/ TIMER_CYCLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <setTimer1+0x28>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	fb92 f3f3 	sdiv	r3, r2, r3
 8001806:	4a06      	ldr	r2, [pc, #24]	; (8001820 <setTimer1+0x2c>)
 8001808:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <setTimer1+0x30>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000048 	.word	0x20000048
 8001820:	20000100 	.word	0x20000100
 8001824:	20000104 	.word	0x20000104

08001828 <setTimer2>:

void setTimer2(int duration){
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/ TIMER_CYCLE;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <setTimer2+0x28>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	fb92 f3f3 	sdiv	r3, r2, r3
 800183a:	4a06      	ldr	r2, [pc, #24]	; (8001854 <setTimer2+0x2c>)
 800183c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <setTimer2+0x30>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000048 	.word	0x20000048
 8001854:	20000108 	.word	0x20000108
 8001858:	2000010c 	.word	0x2000010c

0800185c <timer_run>:

void timer_run(){
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <timer_run+0x6c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	dd0b      	ble.n	8001880 <timer_run+0x24>
		timer0_counter--;
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <timer_run+0x6c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <timer_run+0x6c>)
 8001870:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0) timer0_flag = 1;
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <timer_run+0x6c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <timer_run+0x24>
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <timer_run+0x70>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]
	}

	if(timer1_counter > 0){
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <timer_run+0x74>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	dd0b      	ble.n	80018a0 <timer_run+0x44>
		timer1_counter--;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <timer_run+0x74>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3b01      	subs	r3, #1
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <timer_run+0x74>)
 8001890:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <timer_run+0x74>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <timer_run+0x44>
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <timer_run+0x78>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <timer_run+0x7c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	dd0b      	ble.n	80018c0 <timer_run+0x64>
		timer2_counter--;
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <timer_run+0x7c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <timer_run+0x7c>)
 80018b0:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <timer_run+0x7c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <timer_run+0x64>
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <timer_run+0x80>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
	}
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	200000f8 	.word	0x200000f8
 80018cc:	200000fc 	.word	0x200000fc
 80018d0:	20000100 	.word	0x20000100
 80018d4:	20000104 	.word	0x20000104
 80018d8:	20000108 	.word	0x20000108
 80018dc:	2000010c 	.word	0x2000010c

080018e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_MspInit+0x40>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <HAL_MspInit+0x40>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6193      	str	r3, [r2, #24]
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_MspInit+0x40>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_MspInit+0x40>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <HAL_MspInit+0x40>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_MspInit+0x40>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40021000 	.word	0x40021000

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001934:	d113      	bne.n	800195e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_TIM_Base_MspInit+0x44>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_TIM_Base_MspInit+0x44>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_TIM_Base_MspInit+0x44>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	201c      	movs	r0, #28
 8001954:	f000 f9a1 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001958:	201c      	movs	r0, #28
 800195a:	f000 f9ba 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <NMI_Handler+0x4>

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b2:	f000 f87f 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <TIM2_IRQHandler+0x10>)
 80019c2:	f000 ffe9 	bl	8002998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200000b0 	.word	0x200000b0

080019d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019de:	490d      	ldr	r1, [pc, #52]	; (8001a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f4:	4c0a      	ldr	r4, [pc, #40]	; (8001a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a02:	f7ff ffe5 	bl	80019d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f001 fb0f 	bl	8003028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0a:	f7ff fd85 	bl	8001518 <main>
  bx lr
 8001a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001a18:	080030c0 	.word	0x080030c0
  ldr r2, =_sbss
 8001a1c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001a20:	20000114 	.word	0x20000114

08001a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_2_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_Init+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_Init+0x28>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f923 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff ff4c 	bl	80018e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f93b 	bl	8001cee <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f903 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000004c 	.word	0x2000004c
 8001aac:	20000054 	.word	0x20000054
 8001ab0:	20000050 	.word	0x20000050

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000054 	.word	0x20000054
 8001ad4:	20000110 	.word	0x20000110

08001ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000110 	.word	0x20000110

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4906      	ldr	r1, [pc, #24]	; (8001b84 <__NVIC_EnableIRQ+0x34>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff90 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff2d 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff42 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff90 	bl	8001bdc <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5f 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff35 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b08b      	sub	sp, #44	; 0x2c
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1a:	e161      	b.n	8001fe0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 8150 	bne.w	8001fda <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4a97      	ldr	r2, [pc, #604]	; (8001f9c <HAL_GPIO_Init+0x294>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d05e      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d44:	4a95      	ldr	r2, [pc, #596]	; (8001f9c <HAL_GPIO_Init+0x294>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d875      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d4a:	4a95      	ldr	r2, [pc, #596]	; (8001fa0 <HAL_GPIO_Init+0x298>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d058      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d50:	4a93      	ldr	r2, [pc, #588]	; (8001fa0 <HAL_GPIO_Init+0x298>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d86f      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d56:	4a93      	ldr	r2, [pc, #588]	; (8001fa4 <HAL_GPIO_Init+0x29c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d052      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d5c:	4a91      	ldr	r2, [pc, #580]	; (8001fa4 <HAL_GPIO_Init+0x29c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d869      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d62:	4a91      	ldr	r2, [pc, #580]	; (8001fa8 <HAL_GPIO_Init+0x2a0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d04c      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d68:	4a8f      	ldr	r2, [pc, #572]	; (8001fa8 <HAL_GPIO_Init+0x2a0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d863      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d6e:	4a8f      	ldr	r2, [pc, #572]	; (8001fac <HAL_GPIO_Init+0x2a4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d046      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d74:	4a8d      	ldr	r2, [pc, #564]	; (8001fac <HAL_GPIO_Init+0x2a4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d85d      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d7a:	2b12      	cmp	r3, #18
 8001d7c:	d82a      	bhi.n	8001dd4 <HAL_GPIO_Init+0xcc>
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d859      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d82:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <HAL_GPIO_Init+0x80>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08001e03 	.word	0x08001e03
 8001d8c:	08001ddd 	.word	0x08001ddd
 8001d90:	08001def 	.word	0x08001def
 8001d94:	08001e31 	.word	0x08001e31
 8001d98:	08001e37 	.word	0x08001e37
 8001d9c:	08001e37 	.word	0x08001e37
 8001da0:	08001e37 	.word	0x08001e37
 8001da4:	08001e37 	.word	0x08001e37
 8001da8:	08001e37 	.word	0x08001e37
 8001dac:	08001e37 	.word	0x08001e37
 8001db0:	08001e37 	.word	0x08001e37
 8001db4:	08001e37 	.word	0x08001e37
 8001db8:	08001e37 	.word	0x08001e37
 8001dbc:	08001e37 	.word	0x08001e37
 8001dc0:	08001e37 	.word	0x08001e37
 8001dc4:	08001e37 	.word	0x08001e37
 8001dc8:	08001e37 	.word	0x08001e37
 8001dcc:	08001de5 	.word	0x08001de5
 8001dd0:	08001df9 	.word	0x08001df9
 8001dd4:	4a76      	ldr	r2, [pc, #472]	; (8001fb0 <HAL_GPIO_Init+0x2a8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dda:	e02c      	b.n	8001e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e029      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	3304      	adds	r3, #4
 8001dea:	623b      	str	r3, [r7, #32]
          break;
 8001dec:	e024      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	3308      	adds	r3, #8
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e01f      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e01a      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	623b      	str	r3, [r7, #32]
          break;
 8001e0e:	e013      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	611a      	str	r2, [r3, #16]
          break;
 8001e22:	e009      	b.n	8001e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2308      	movs	r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	615a      	str	r2, [r3, #20]
          break;
 8001e2e:	e003      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
          break;
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          break;
 8001e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2bff      	cmp	r3, #255	; 0xff
 8001e3c:	d801      	bhi.n	8001e42 <HAL_GPIO_Init+0x13a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	e001      	b.n	8001e46 <HAL_GPIO_Init+0x13e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3304      	adds	r3, #4
 8001e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d802      	bhi.n	8001e54 <HAL_GPIO_Init+0x14c>
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	e002      	b.n	8001e5a <HAL_GPIO_Init+0x152>
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	3b08      	subs	r3, #8
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	210f      	movs	r1, #15
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	6a39      	ldr	r1, [r7, #32]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80a9 	beq.w	8001fda <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e88:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <HAL_GPIO_Init+0x2ac>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a49      	ldr	r2, [pc, #292]	; (8001fb4 <HAL_GPIO_Init+0x2ac>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_GPIO_Init+0x2ac>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea0:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <HAL_GPIO_Init+0x2b0>)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3d      	ldr	r2, [pc, #244]	; (8001fbc <HAL_GPIO_Init+0x2b4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00d      	beq.n	8001ee8 <HAL_GPIO_Init+0x1e0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <HAL_GPIO_Init+0x2b8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <HAL_GPIO_Init+0x1dc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_GPIO_Init+0x2bc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_GPIO_Init+0x1d8>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e004      	b.n	8001eea <HAL_GPIO_Init+0x1e2>
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x1e2>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_GPIO_Init+0x1e2>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eec:	f002 0203 	and.w	r2, r2, #3
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	4093      	lsls	r3, r2
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001efa:	492f      	ldr	r1, [pc, #188]	; (8001fb8 <HAL_GPIO_Init+0x2b0>)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f14:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	492b      	ldr	r1, [pc, #172]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f22:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4927      	ldr	r1, [pc, #156]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f3c:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4921      	ldr	r1, [pc, #132]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f4a:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	491d      	ldr	r1, [pc, #116]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4917      	ldr	r1, [pc, #92]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	4913      	ldr	r1, [pc, #76]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01f      	beq.n	8001fcc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	490d      	ldr	r1, [pc, #52]	; (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
 8001f98:	e01f      	b.n	8001fda <HAL_GPIO_Init+0x2d2>
 8001f9a:	bf00      	nop
 8001f9c:	10320000 	.word	0x10320000
 8001fa0:	10310000 	.word	0x10310000
 8001fa4:	10220000 	.word	0x10220000
 8001fa8:	10210000 	.word	0x10210000
 8001fac:	10120000 	.word	0x10120000
 8001fb0:	10110000 	.word	0x10110000
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40010800 	.word	0x40010800
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_GPIO_Init+0x2f4>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4909      	ldr	r1, [pc, #36]	; (8001ffc <HAL_GPIO_Init+0x2f4>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	3301      	adds	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f47f ae96 	bne.w	8001d1c <HAL_GPIO_Init+0x14>
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	372c      	adds	r7, #44	; 0x2c
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e001      	b.n	8002022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	807b      	strh	r3, [r7, #2]
 800203a:	4613      	mov	r3, r2
 800203c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800203e:	787b      	ldrb	r3, [r7, #1]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002044:	887a      	ldrh	r2, [r7, #2]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800204a:	e003      	b.n	8002054 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800204c:	887b      	ldrh	r3, [r7, #2]
 800204e:	041a      	lsls	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	611a      	str	r2, [r3, #16]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002070:	887a      	ldrh	r2, [r7, #2]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	041a      	lsls	r2, r3, #16
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43d9      	mvns	r1, r3
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	400b      	ands	r3, r1
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	611a      	str	r2, [r3, #16]
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e272      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8087 	beq.w	80021be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b0:	4b92      	ldr	r3, [pc, #584]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d00c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020bc:	4b8f      	ldr	r3, [pc, #572]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d112      	bne.n	80020ee <HAL_RCC_OscConfig+0x5e>
 80020c8:	4b8c      	ldr	r3, [pc, #560]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d4:	d10b      	bne.n	80020ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d6:	4b89      	ldr	r3, [pc, #548]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d06c      	beq.n	80021bc <HAL_RCC_OscConfig+0x12c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d168      	bne.n	80021bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e24c      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x76>
 80020f8:	4b80      	ldr	r3, [pc, #512]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a7f      	ldr	r2, [pc, #508]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e02e      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x98>
 800210e:	4b7b      	ldr	r3, [pc, #492]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a7a      	ldr	r2, [pc, #488]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b78      	ldr	r3, [pc, #480]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a77      	ldr	r2, [pc, #476]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0xbc>
 8002132:	4b72      	ldr	r3, [pc, #456]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a71      	ldr	r2, [pc, #452]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b6f      	ldr	r3, [pc, #444]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6e      	ldr	r2, [pc, #440]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 800214c:	4b6b      	ldr	r3, [pc, #428]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a6a      	ldr	r2, [pc, #424]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a67      	ldr	r2, [pc, #412]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002162:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff fcb4 	bl	8001ad8 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff fcb0 	bl	8001ad8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e200      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xe4>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fca0 	bl	8001ad8 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff fc9c 	bl	8001ad8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1ec      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x10c>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d063      	beq.n	8002292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ca:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021d6:	4b49      	ldr	r3, [pc, #292]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d11c      	bne.n	800221c <HAL_RCC_OscConfig+0x18c>
 80021e2:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	4b43      	ldr	r3, [pc, #268]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_RCC_OscConfig+0x176>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e1c0      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4939      	ldr	r1, [pc, #228]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	e03a      	b.n	8002292 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002224:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCC_OscConfig+0x270>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7ff fc55 	bl	8001ad8 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002232:	f7ff fc51 	bl	8001ad8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1a1      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4927      	ldr	r1, [pc, #156]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
 8002264:	e015      	b.n	8002292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_RCC_OscConfig+0x270>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff fc34 	bl	8001ad8 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002274:	f7ff fc30 	bl	8001ad8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e180      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d03a      	beq.n	8002314 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d019      	beq.n	80022da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7ff fc14 	bl	8001ad8 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7ff fc10 	bl	8001ad8 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e160      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022d2:	2001      	movs	r0, #1
 80022d4:	f000 faa6 	bl	8002824 <RCC_Delay>
 80022d8:	e01c      	b.n	8002314 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7ff fbfa 	bl	8001ad8 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e6:	e00f      	b.n	8002308 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e8:	f7ff fbf6 	bl	8001ad8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d908      	bls.n	8002308 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e146      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	42420000 	.word	0x42420000
 8002304:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	4b92      	ldr	r3, [pc, #584]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e9      	bne.n	80022e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a6 	beq.w	800246e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b8b      	ldr	r3, [pc, #556]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a87      	ldr	r2, [pc, #540]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	61d3      	str	r3, [r2, #28]
 800233e:	4b85      	ldr	r3, [pc, #532]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d118      	bne.n	800238c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a7e      	ldr	r2, [pc, #504]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7ff fbb7 	bl	8001ad8 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7ff fbb3 	bl	8001ad8 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b64      	cmp	r3, #100	; 0x64
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e103      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x312>
 8002394:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a6e      	ldr	r2, [pc, #440]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	e02d      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x334>
 80023aa:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a69      	ldr	r2, [pc, #420]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a66      	ldr	r2, [pc, #408]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	e01c      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d10c      	bne.n	80023e6 <HAL_RCC_OscConfig+0x356>
 80023cc:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a60      	ldr	r2, [pc, #384]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	4b5e      	ldr	r3, [pc, #376]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a5d      	ldr	r2, [pc, #372]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	e00b      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023e6:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a5a      	ldr	r2, [pc, #360]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b58      	ldr	r3, [pc, #352]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a57      	ldr	r2, [pc, #348]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d015      	beq.n	8002432 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7ff fb67 	bl	8001ad8 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7ff fb63 	bl	8001ad8 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0b1      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ee      	beq.n	800240e <HAL_RCC_OscConfig+0x37e>
 8002430:	e014      	b.n	800245c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7ff fb51 	bl	8001ad8 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7ff fb4d 	bl	8001ad8 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e09b      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	4b40      	ldr	r3, [pc, #256]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1ee      	bne.n	800243a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b3c      	ldr	r3, [pc, #240]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a3b      	ldr	r2, [pc, #236]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8087 	beq.w	8002586 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d061      	beq.n	8002548 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d146      	bne.n	800251a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_RCC_OscConfig+0x4cc>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7ff fb21 	bl	8001ad8 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249a:	f7ff fb1d 	bl	8001ad8 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e06d      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d108      	bne.n	80024d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4921      	ldr	r1, [pc, #132]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d4:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a19      	ldr	r1, [r3, #32]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	430b      	orrs	r3, r1
 80024e6:	491b      	ldr	r1, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_RCC_OscConfig+0x4cc>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7ff faf1 	bl	8001ad8 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fa:	f7ff faed 	bl	8001ad8 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e03d      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x46a>
 8002518:	e035      	b.n	8002586 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCC_OscConfig+0x4cc>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff fada 	bl	8001ad8 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7ff fad6 	bl	8001ad8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e026      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x498>
 8002546:	e01e      	b.n	8002586 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d107      	bne.n	8002560 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e019      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
 8002554:	40021000 	.word	0x40021000
 8002558:	40007000 	.word	0x40007000
 800255c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_OscConfig+0x500>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	429a      	cmp	r2, r3
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0d0      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d910      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	4965      	ldr	r1, [pc, #404]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d040      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d115      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e073      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06b      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f023 0203 	bic.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4936      	ldr	r1, [pc, #216]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002684:	f7ff fa28 	bl	8001ad8 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7ff fa24 	bl	8001ad8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e053      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 020c 	and.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1eb      	bne.n	800268c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d210      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4922      	ldr	r1, [pc, #136]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f821 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1cc>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1d0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f986 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
 800275c:	080030a8 	.word	0x080030a8
 8002760:	2000004c 	.word	0x2000004c
 8002764:	20000050 	.word	0x20000050

08002768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	b490      	push	{r4, r7}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800276e:	4b29      	ldr	r3, [pc, #164]	; (8002814 <HAL_RCC_GetSysClockFreq+0xac>)
 8002770:	1d3c      	adds	r4, r7, #4
 8002772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002778:	f240 2301 	movw	r3, #513	; 0x201
 800277c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x40>
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x46>
 80027a6:	e02b      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a8:	4b1c      	ldr	r3, [pc, #112]	; (800281c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027aa:	623b      	str	r3, [r7, #32]
      break;
 80027ac:	e02b      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	0c9b      	lsrs	r3, r3, #18
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3328      	adds	r3, #40	; 0x28
 80027b8:	443b      	add	r3, r7
 80027ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d012      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	0c5b      	lsrs	r3, r3, #17
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	3328      	adds	r3, #40	; 0x28
 80027d6:	443b      	add	r3, r7
 80027d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	4a0e      	ldr	r2, [pc, #56]	; (800281c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027e2:	fb03 f202 	mul.w	r2, r3, r2
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	e004      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	623b      	str	r3, [r7, #32]
      break;
 80027fe:	e002      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002802:	623b      	str	r3, [r7, #32]
      break;
 8002804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002806:	6a3b      	ldr	r3, [r7, #32]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3728      	adds	r7, #40	; 0x28
 800280c:	46bd      	mov	sp, r7
 800280e:	bc90      	pop	{r4, r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	08003098 	.word	0x08003098
 8002818:	40021000 	.word	0x40021000
 800281c:	007a1200 	.word	0x007a1200
 8002820:	003d0900 	.word	0x003d0900

08002824 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <RCC_Delay+0x34>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <RCC_Delay+0x38>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0a5b      	lsrs	r3, r3, #9
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002840:	bf00      	nop
  }
  while (Delay --);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1e5a      	subs	r2, r3, #1
 8002846:	60fa      	str	r2, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f9      	bne.n	8002840 <RCC_Delay+0x1c>
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	2000004c 	.word	0x2000004c
 800285c:	10624dd3 	.word	0x10624dd3

08002860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e041      	b.n	80028f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff f84c 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3304      	adds	r3, #4
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f000 fa6a 	bl	8002d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d001      	beq.n	8002918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e035      	b.n	8002984 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a16      	ldr	r2, [pc, #88]	; (8002990 <HAL_TIM_Base_Start_IT+0x90>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_TIM_Base_Start_IT+0x4e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002942:	d004      	beq.n	800294e <HAL_TIM_Base_Start_IT+0x4e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a12      	ldr	r2, [pc, #72]	; (8002994 <HAL_TIM_Base_Start_IT+0x94>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d111      	bne.n	8002972 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b06      	cmp	r3, #6
 800295e:	d010      	beq.n	8002982 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002970:	e007      	b.n	8002982 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0201 	orr.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40000400 	.word	0x40000400

08002998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d122      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d11b      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0202 	mvn.w	r2, #2
 80029c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f9b1 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 80029e0:	e005      	b.n	80029ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f9a4 	bl	8002d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f9b3 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d122      	bne.n	8002a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d11b      	bne.n	8002a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0204 	mvn.w	r2, #4
 8002a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f987 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 8002a34:	e005      	b.n	8002a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f97a 	bl	8002d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f989 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d122      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d11b      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0208 	mvn.w	r2, #8
 8002a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2204      	movs	r2, #4
 8002a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f95d 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f950 	bl	8002d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f95f 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0210 	mvn.w	r2, #16
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f933 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f926 	bl	8002d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f935 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0201 	mvn.w	r2, #1
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe fe40 	bl	800179c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b80      	cmp	r3, #128	; 0x80
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d107      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa67 	bl	8003016 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d10e      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d107      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f8f9 	bl	8002d66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d10e      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d107      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0220 	mvn.w	r2, #32
 8002b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa32 	bl	8003004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIM_ConfigClockSource+0x18>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e0b3      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x180>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002be6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf8:	d03e      	beq.n	8002c78 <HAL_TIM_ConfigClockSource+0xd0>
 8002bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfe:	f200 8087 	bhi.w	8002d10 <HAL_TIM_ConfigClockSource+0x168>
 8002c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c06:	f000 8085 	beq.w	8002d14 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0e:	d87f      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x168>
 8002c10:	2b70      	cmp	r3, #112	; 0x70
 8002c12:	d01a      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0xa2>
 8002c14:	2b70      	cmp	r3, #112	; 0x70
 8002c16:	d87b      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x168>
 8002c18:	2b60      	cmp	r3, #96	; 0x60
 8002c1a:	d050      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x116>
 8002c1c:	2b60      	cmp	r3, #96	; 0x60
 8002c1e:	d877      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x168>
 8002c20:	2b50      	cmp	r3, #80	; 0x50
 8002c22:	d03c      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0xf6>
 8002c24:	2b50      	cmp	r3, #80	; 0x50
 8002c26:	d873      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x168>
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d058      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x136>
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d86f      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x168>
 8002c30:	2b30      	cmp	r3, #48	; 0x30
 8002c32:	d064      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x156>
 8002c34:	2b30      	cmp	r3, #48	; 0x30
 8002c36:	d86b      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x168>
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d060      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x156>
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d867      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x168>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d05c      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x156>
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d05a      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c48:	e062      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6899      	ldr	r1, [r3, #8]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f000 f95c 	bl	8002f16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	609a      	str	r2, [r3, #8]
      break;
 8002c76:	e04e      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	6899      	ldr	r1, [r3, #8]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f000 f945 	bl	8002f16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c9a:	609a      	str	r2, [r3, #8]
      break;
 8002c9c:	e03b      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f000 f8bc 	bl	8002e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2150      	movs	r1, #80	; 0x50
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f913 	bl	8002ee2 <TIM_ITRx_SetConfig>
      break;
 8002cbc:	e02b      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f000 f8da 	bl	8002e84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2160      	movs	r1, #96	; 0x60
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f903 	bl	8002ee2 <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e01b      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f000 f89c 	bl	8002e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2140      	movs	r1, #64	; 0x40
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f8f3 	bl	8002ee2 <TIM_ITRx_SetConfig>
      break;
 8002cfc:	e00b      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f000 f8ea 	bl	8002ee2 <TIM_ITRx_SetConfig>
        break;
 8002d0e:	e002      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d10:	bf00      	nop
 8002d12:	e000      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <TIM_Base_SetConfig+0xa8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d007      	beq.n	8002da0 <TIM_Base_SetConfig+0x28>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d003      	beq.n	8002da0 <TIM_Base_SetConfig+0x28>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <TIM_Base_SetConfig+0xac>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d108      	bne.n	8002db2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a1a      	ldr	r2, [pc, #104]	; (8002e20 <TIM_Base_SetConfig+0xa8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <TIM_Base_SetConfig+0x52>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc0:	d003      	beq.n	8002dca <TIM_Base_SetConfig+0x52>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <TIM_Base_SetConfig+0xac>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <TIM_Base_SetConfig+0xa8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	615a      	str	r2, [r3, #20]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40000400 	.word	0x40000400

08002e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f023 0201 	bic.w	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f023 030a 	bic.w	r3, r3, #10
 8002e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f023 0210 	bic.w	r2, r3, #16
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	031b      	lsls	r3, r3, #12
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ec0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	621a      	str	r2, [r3, #32]
}
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f043 0307 	orr.w	r3, r3, #7
 8002f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	609a      	str	r2, [r3, #8]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b087      	sub	sp, #28
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	021a      	lsls	r2, r3, #8
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	609a      	str	r2, [r3, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e041      	b.n	8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d004      	beq.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a10      	ldr	r2, [pc, #64]	; (8003000 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d10c      	bne.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40000400 	.word	0x40000400

08003004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <__libc_init_array>:
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	2600      	movs	r6, #0
 800302c:	4d0c      	ldr	r5, [pc, #48]	; (8003060 <__libc_init_array+0x38>)
 800302e:	4c0d      	ldr	r4, [pc, #52]	; (8003064 <__libc_init_array+0x3c>)
 8003030:	1b64      	subs	r4, r4, r5
 8003032:	10a4      	asrs	r4, r4, #2
 8003034:	42a6      	cmp	r6, r4
 8003036:	d109      	bne.n	800304c <__libc_init_array+0x24>
 8003038:	f000 f822 	bl	8003080 <_init>
 800303c:	2600      	movs	r6, #0
 800303e:	4d0a      	ldr	r5, [pc, #40]	; (8003068 <__libc_init_array+0x40>)
 8003040:	4c0a      	ldr	r4, [pc, #40]	; (800306c <__libc_init_array+0x44>)
 8003042:	1b64      	subs	r4, r4, r5
 8003044:	10a4      	asrs	r4, r4, #2
 8003046:	42a6      	cmp	r6, r4
 8003048:	d105      	bne.n	8003056 <__libc_init_array+0x2e>
 800304a:	bd70      	pop	{r4, r5, r6, pc}
 800304c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003050:	4798      	blx	r3
 8003052:	3601      	adds	r6, #1
 8003054:	e7ee      	b.n	8003034 <__libc_init_array+0xc>
 8003056:	f855 3b04 	ldr.w	r3, [r5], #4
 800305a:	4798      	blx	r3
 800305c:	3601      	adds	r6, #1
 800305e:	e7f2      	b.n	8003046 <__libc_init_array+0x1e>
 8003060:	080030b8 	.word	0x080030b8
 8003064:	080030b8 	.word	0x080030b8
 8003068:	080030b8 	.word	0x080030b8
 800306c:	080030bc 	.word	0x080030bc

08003070 <memset>:
 8003070:	4603      	mov	r3, r0
 8003072:	4402      	add	r2, r0
 8003074:	4293      	cmp	r3, r2
 8003076:	d100      	bne.n	800307a <memset+0xa>
 8003078:	4770      	bx	lr
 800307a:	f803 1b01 	strb.w	r1, [r3], #1
 800307e:	e7f9      	b.n	8003074 <memset+0x4>

08003080 <_init>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	bf00      	nop
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr

0800308c <_fini>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr
